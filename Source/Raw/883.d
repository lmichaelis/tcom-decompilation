var int POTIONALCHEMYMODE = 0;
const int POTIONALCHEMY_REGENERATE = 1;
const int POTIONALCHEMY_REGENERATEHP = 2;
const int POTIONALCHEMY_REGENERATEMP = 3;
const int POTIONALCHEMY_PERMAMENT = 4;
const int POTIONALCHEMY_TIMED = 5;
const int POTIONALCHEMY_SEED = 6;
const int POTIONALCHEMY_SEEDHP = 7;
const int POTIONALCHEMY_SEEDMP = 8;
const int POTIONALCHEMY_OTHER = 9;
const int POTIONALCHEMY_POISON = 10;
const int POTIONALCHEMY_BOOZE = 11;
const int POTIONALCHEMY_TABAK = 12;
const int POTIONALCHEMY_ORE = 13;
const int POTIONALCHEMY_INFO = -1;
const int POTIONALCHEMY_INSTANCE = -1;
func void PC_POTIONALCHEMY_AMOUNTCHOICES() {
    INFO_CLEARCHOICES(POTIONALCHEMY_INFO);
    MAX = PC_CRAFTRECIPEITEM_MAX(POTIONALCHEMY_INSTANCE);
    if ((MAX) > (0)) {
        ALL_STRING = CS4(DIALOG_ALL, " (", I2S(MAX), ")");
        INFO_ADDCHOICE(POTIONALCHEMY_INFO, ALL_STRING, 0xb98c);
        if ((MAX) > (9)) {
            INFO_ADDCHOICE(POTIONALCHEMY_INFO, CHOICE_NUMBER_10, 0xb98e);
        };
        if ((MAX) > (4)) {
            INFO_ADDCHOICE(POTIONALCHEMY_INFO, CHOICE_NUMBER_5, 0xb98f);
        };
        INFO_ADDCHOICE(POTIONALCHEMY_INFO, CHOICE_NUMBER_1, 0xb990);
        INFO_ADDCHOICE(POTIONALCHEMY_INFO, DIALOG_BACK, 0xb98b);
    };
    POTIONALCHEMY_INSTANCE = -(1);
}

var int PC_POTIONALCHEMY_AMOUNTCHOICES.MAX = 0;
var string PC_POTIONALCHEMY_AMOUNTCHOICES.ALL_STRING = "";
func void PC_POTIONALCHEMY_CHECKAMOUNTCHOICES() {
    if ((PC_CRAFTRECIPEITEM_MAX(POTIONALCHEMY_INSTANCE)) > (0)) {
        PC_POTIONALCHEMY_AMOUNTCHOICES();
    };
    POTIONALCHEMY_INSTANCE = -(1);
    PRINTS_EXT(PRINT_PRODITEMSMISSING, RGBA(255, 50, 50, 255));
}

func void PC_POTIONALCHEMY_AMOUNTBACK() {
    INFO_CLEARCHOICES(POTIONALCHEMY_INFO);
    POTIONALCHEMY_INSTANCE = -(1);
}

func void PC_POTIONALCHEMY_AMOUNTALL() {
    MAX = PC_CRAFTRECIPEITEM_MAX(POTIONALCHEMY_INSTANCE);
    PC_CRAFTRECIPEITEMS(POTIONALCHEMY_INSTANCE, MAX);
    PC_POTIONALCHEMY_AMOUNTCHOICES();
}

var int PC_POTIONALCHEMY_AMOUNTALL.MAX = 0;
func void PC_POTIONALCHEMY_AMOUNT10() {
    PC_CRAFTRECIPEITEMS(POTIONALCHEMY_INSTANCE, 10);
    PC_POTIONALCHEMY_AMOUNTCHOICES();
}

func void PC_POTIONALCHEMY_AMOUNT5() {
    PC_CRAFTRECIPEITEMS(POTIONALCHEMY_INSTANCE, 5);
    PC_POTIONALCHEMY_AMOUNTCHOICES();
}

func void PC_POTIONALCHEMY_AMOUNT1() {
    PC_CRAFTRECIPEITEMS(POTIONALCHEMY_INSTANCE, 1);
    PC_POTIONALCHEMY_AMOUNTCHOICES();
}

instance PC_POTIONALCHEMY_END(C_INFO) {
    NPC = 0xc3ab;
    NR = 999;
    CONDITION = PC_POTIONALCHEMY_END_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_END_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_ENDE;
}

func int PC_POTIONALCHEMY_END_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_END_INFO() {
    B_ENDPRODUCTIONDIALOG();
}

instance PC_POTIONALCHEMY_REGENERATE(C_INFO) {
    NPC = 0xc3ab;
    NR = 1;
    CONDITION = PC_POTIONALCHEMY_REGENERATE_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_REGENERATE_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Restoration potions.";
}

func int PC_POTIONALCHEMY_REGENERATE_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_REGENERATE_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_REGENERATE;
}

instance PC_POTIONALCHEMY_REGENERATE_STOP(C_INFO) {
    NPC = 0xc3ab;
    NR = 99;
    CONDITION = PC_POTIONALCHEMY_REGENERATE_STOP_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_REGENERATE_STOP_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_BACK;
}

func int PC_POTIONALCHEMY_REGENERATE_STOP_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_REGENERATE_STOP_INFO() {
    POTIONALCHEMYMODE = 0;
}

instance PC_MANA_START(C_INFO) {
    NPC = 0xc3ab;
    NR = 6;
    CONDITION = PC_MANA_START_CONDITION;
    INFORMATION = PC_MANA_START_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Brew mana potions.";
}

func int PC_MANA_START_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_MANA_START_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_REGENERATEMP;
}

instance PC_MANA_STOP(C_INFO) {
    NPC = 0xc3ab;
    NR = 99;
    CONDITION = PC_MANA_STOP_CONDITION;
    INFORMATION = PC_MANA_STOP_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_BACK;
}

func int PC_MANA_STOP_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEMP))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_MANA_STOP_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_REGENERATE;
}

instance PC_ITPO_MANA_01(C_INFO) {
    NR = 0x2782;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_01_CONDITION;
    INFORMATION = PC_ITPO_MANA_01_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Esencja many. (2 ogniste pokrzywy, 1 rdest polny)";
}

func int PC_ITPO_MANA_01_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[3]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEMP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_01_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88af;
    POTIONALCHEMY_INFO = 0xb9a0;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_01_VOL2(C_INFO) {
    NR = 0x279d;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_01_VOL2_CONDITION;
    INFORMATION = PC_ITPO_MANA_01_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Esencja many. (2 ogniste pokrzywy, 1 rdest polny)";
}

func int PC_ITPO_MANA_01_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[3]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEMP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_01_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88b0;
    POTIONALCHEMY_INFO = 0xb9a3;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_02(C_INFO) {
    NR = 0x2784;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_02_CONDITION;
    INFORMATION = PC_ITPO_MANA_02_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Ekstrakt many. (2 ogniste ziela, 1 rdest polny)";
}

func int PC_ITPO_MANA_02_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[4]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEMP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_02_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88b3;
    POTIONALCHEMY_INFO = 0xb9a6;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_02_VOL2(C_INFO) {
    NR = 0x279e;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_02_VOL2_CONDITION;
    INFORMATION = PC_ITPO_MANA_02_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Ekstrakt many. (2 ogniste ziela, 1 rdest polny)";
}

func int PC_ITPO_MANA_02_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[4]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEMP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_02_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88b4;
    POTIONALCHEMY_INFO = 0xb9a9;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_03(C_INFO) {
    NR = 0x2786;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_03_CONDITION;
    INFORMATION = PC_ITPO_MANA_03_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Eliksir many. (2 ogniste korzenie, 1 rdest polny)";
}

func int PC_ITPO_MANA_03_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[5]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEMP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_03_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88b7;
    POTIONALCHEMY_INFO = 0xb9ac;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_03_VOL2(C_INFO) {
    NR = 0x279f;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_03_VOL2_CONDITION;
    INFORMATION = PC_ITPO_MANA_03_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Eliksir many. (2 ogniste korzenie, 1 rdest polny)";
}

func int PC_ITPO_MANA_03_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[5]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEMP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_03_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88b8;
    POTIONALCHEMY_INFO = 0xb9af;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_04(C_INFO) {
    NR = 0x2788;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_04_CONDITION;
    INFORMATION = PC_ITPO_MANA_04_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Pe³nia many. (3 esencje many, 1 rdest polny)";
}

func int PC_ITPO_MANA_04_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[13]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEMP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_04_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88bb;
    POTIONALCHEMY_INFO = 0xb9b2;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_04_VOL2(C_INFO) {
    NR = 0x27a0;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_04_VOL2_CONDITION;
    INFORMATION = PC_ITPO_MANA_04_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Pe³nia many. (3 esencje many, 1 rdest polny)";
}

func int PC_ITPO_MANA_04_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[13]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEMP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_04_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88bc;
    POTIONALCHEMY_INFO = 0xb9b5;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_BLUEPLANT(C_INFO) {
    NR = 0x2775;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_BLUEPLANT_CONDITION;
    INFORMATION = PC_ITPO_MANA_BLUEPLANT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Wywar z niebieskiego bzu.";
}

func int PC_ITPO_MANA_BLUEPLANT_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[17]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEMP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_BLUEPLANT_INFO() {
    POTIONALCHEMY_INSTANCE = 0x889a;
    POTIONALCHEMY_INFO = 0xb9b8;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_BLUEPLANT_VOL2(C_INFO) {
    NR = 0x2774;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_BLUEPLANT_VOL2_CONDITION;
    INFORMATION = PC_ITPO_MANA_BLUEPLANT_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Wywar z niebieskiego bzu.";
}

func int PC_ITPO_MANA_BLUEPLANT_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[17]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEMP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_BLUEPLANT_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x889b;
    POTIONALCHEMY_INFO = 0xb9bb;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_HEALTH_START(C_INFO) {
    NPC = 0xc3ab;
    NR = 7;
    CONDITION = PC_HEALTH_START_CONDITION;
    INFORMATION = PC_HEALTH_START_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Brew healing potions.";
}

func int PC_HEALTH_START_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_HEALTH_START_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_REGENERATEHP;
}

instance PC_HEALTH_STOP(C_INFO) {
    NPC = 0xc3ab;
    NR = 99;
    CONDITION = PC_HEALTH_STOP_CONDITION;
    INFORMATION = PC_HEALTH_STOP_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_BACK;
}

func int PC_HEALTH_STOP_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEHP))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_HEALTH_STOP_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_REGENERATE;
}

instance PC_ITPO_HEALTH_01(C_INFO) {
    NR = 0x2778;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_01_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_01_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Esencja lecznicza. (2 roliny lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_01_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[0]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEHP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_01_INFO() {
    POTIONALCHEMY_INSTANCE = 0x889f;
    POTIONALCHEMY_INFO = 0xb9c4;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HEALTH_01_VOL2(C_INFO) {
    NR = 0x2799;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_01_VOL2_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_01_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Esencja lecznicza. (2 roliny lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_01_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[0]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEHP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_01_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88a0;
    POTIONALCHEMY_INFO = 0xb9c7;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HEALTH_02(C_INFO) {
    NR = 0x277a;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_02_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_02_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Ekstrakt leczniczy. (2 ziela lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_02_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[1]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEHP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_02_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88a3;
    POTIONALCHEMY_INFO = 0xb9ca;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HEALTH_02_VOL2(C_INFO) {
    NR = 0x279a;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_02_VOL2_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_02_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Ekstrakt leczniczy. (2 ziela lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_02_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[1]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEHP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_02_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88a4;
    POTIONALCHEMY_INFO = 0xb9cd;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HEALTH_03(C_INFO) {
    NR = 0x277c;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_03_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_03_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Eliksir leczniczy. (2 korzenie lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_03_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[2]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEHP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_03_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88a7;
    POTIONALCHEMY_INFO = 0xb9d0;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HEALTH_03_VOL2(C_INFO) {
    NR = 0x279b;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_03_VOL2_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_03_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Ulepszony eliksir leczniczy. (2 korzenie lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_03_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[2]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEHP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_03_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88a8;
    POTIONALCHEMY_INFO = 0xb9d3;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HEALTH_04(C_INFO) {
    NR = 0x277f;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_04_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_04_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Pe³nia ¿ycia. (3 esencje lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_04_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[14]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEHP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_04_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88ab;
    POTIONALCHEMY_INFO = 0xb9d6;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HEALTH_04_VOL2(C_INFO) {
    NR = 0x279c;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_04_VOL2_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_04_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Ulepszona pe³nia ¿ycia. (3 esencje lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_04_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[14]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_REGENERATEHP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_04_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88ae;
    POTIONALCHEMY_INFO = 0xb9d9;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_SPECIAL_START(C_INFO) {
    NPC = 0xc3ab;
    NR = 2;
    CONDITION = PC_SPECIAL_START_CONDITION;
    INFORMATION = PC_SPECIAL_START_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Permanent potions.";
}

func int PC_SPECIAL_START_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_SPECIAL_START_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_PERMAMENT;
}

instance PC_SPECIAL_STOP(C_INFO) {
    NPC = 0xc3ab;
    NR = 99;
    CONDITION = PC_SPECIAL_STOP_CONDITION;
    INFORMATION = PC_SPECIAL_STOP_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_BACK;
}

func int PC_SPECIAL_STOP_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_PERMAMENT))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_SPECIAL_STOP_INFO() {
    POTIONALCHEMYMODE = 0;
}

instance PC_ITPO_PERM_HEALTH(C_INFO) {
    NR = 0x278a;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_PERM_HEALTH_CONDITION;
    INFORMATION = PC_ITPO_PERM_HEALTH_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Eliksir ¿ycia. (1 korzeñ leczniczy, 1 szczaw królewski)";
}

func int PC_ITPO_PERM_HEALTH_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[10]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_PERMAMENT))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_PERM_HEALTH_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88bf;
    POTIONALCHEMY_INFO = 0xb9e2;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_PERM_MANA(C_INFO) {
    NR = 0x278b;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_PERM_MANA_CONDITION;
    INFORMATION = PC_ITPO_PERM_MANA_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Eliksir ducha. (1 ognisty korzeñ, 1 szczaw królewski)";
}

func int PC_ITPO_PERM_MANA_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[9]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_PERMAMENT))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_PERM_MANA_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88c1;
    POTIONALCHEMY_INFO = 0xb9e5;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_PERM_DEX(C_INFO) {
    NR = 0x278d;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_DEX_CONDITION;
    INFORMATION = PC_ITPO_DEX_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Mikstura zrêcznoci. (1 porcja goblinich jagód, 1 szczaw królewski)";
}

func int PC_ITPO_DEX_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[8]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_PERMAMENT))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_DEX_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88c5;
    POTIONALCHEMY_INFO = 0xb9e8;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_PERM_STRG(C_INFO) {
    NR = 0x278c;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_STRG_CONDITION;
    INFORMATION = PC_ITPO_STRG_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Mikstura si³y. (1 smoczy korzeñ, 1 szczaw królewski)";
}

func int PC_ITPO_STRG_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[7]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_PERMAMENT))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_STRG_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88c3;
    POTIONALCHEMY_INFO = 0xb9eb;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_STONESKIN(C_INFO) {
    NR = 0x2793;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_STONESKIN_CONDITION;
    INFORMATION = PC_ITPO_STONESKIN_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "StoneSkin";
}

func int PC_ITPO_STONESKIN_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[25]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_PERMAMENT))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_STONESKIN_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88df;
    POTIONALCHEMY_INFO = 0xb9ee;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_POTIONALCHEMY_TIMED(C_INFO) {
    NPC = 0xc3ab;
    NR = 4;
    CONDITION = PC_POTIONALCHEMY_TIMED_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_TIMED_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Timed potions.";
}

func int PC_POTIONALCHEMY_TIMED_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_TIMED_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_TIMED;
}

instance PC_POTIONALCHEMY_TIMED_STOP(C_INFO) {
    NPC = 0xc3ab;
    NR = 99;
    CONDITION = PC_POTIONALCHEMY_TIMED_STOP_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_TIMED_STOP_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_BACK;
}

func int PC_POTIONALCHEMY_TIMED_STOP_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_TIMED_STOP_INFO() {
    POTIONALCHEMYMODE = 0;
}

instance PC_ITPO_SPEED(C_INFO) {
    NR = 0x277e;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_SPEED_CONDITION;
    INFORMATION = PC_ITPO_SPEED_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Mikstura szybkoci (1 zêbate ziele, 1 rdest polny)";
}

func int PC_ITPO_SPEED_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[6]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_SPEED_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88c7;
    POTIONALCHEMY_INFO = 0xb9f7;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_SPEED2(C_INFO) {
    NR = 0x2781;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_SPEED2_CONDITION;
    INFORMATION = PC_ITPO_SPEED2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Silna mikstura szybkoci";
}

func int PC_ITPO_SPEED2_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[16]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_SPEED2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88c9;
    POTIONALCHEMY_INFO = 0xb9fa;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_TIMED_HEALTH(C_INFO) {
    NR = 0x278e;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_TIMED_HEALTH_CONDITION;
    INFORMATION = PC_ITPO_TIMED_HEALTH_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "temp ¿ycie";
}

func int PC_ITPO_TIMED_HEALTH_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[20]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_TIMED_HEALTH_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88cb;
    POTIONALCHEMY_INFO = 0xb9fd;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_TIMED_HEALTH2(C_INFO) {
    NR = 0x27ab;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_TIMED_HEALTH2_CONDITION;
    INFORMATION = PC_ITPO_TIMED_HEALTH2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "temp ¿ycie";
}

func int PC_ITPO_TIMED_HEALTH2_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[29]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_TIMED_HEALTH2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88d5;
    POTIONALCHEMY_INFO = 0xba00;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_TIMED_MANA(C_INFO) {
    NR = 0x278f;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_TIMED_MANA_CONDITION;
    INFORMATION = PC_ITPO_TIMED_MANA_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "temp Mana";
}

func int PC_ITPO_TIMED_MANA_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[21]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_TIMED_MANA_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88cd;
    POTIONALCHEMY_INFO = 0xba03;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_TIMED_MANA2(C_INFO) {
    NR = 0x27ac;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_TIMED_MANA2_CONDITION;
    INFORMATION = PC_ITPO_TIMED_MANA2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "temp Mana";
}

func int PC_ITPO_TIMED_MANA2_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[30]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_TIMED_MANA2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88d7;
    POTIONALCHEMY_INFO = 0xba06;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_TIMED_STR(C_INFO) {
    NR = 0x2790;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_TIMED_STR_CONDITION;
    INFORMATION = PC_ITPO_TIMED_STR_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "temp Str";
}

func int PC_ITPO_TIMED_STR_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[22]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_TIMED_STR_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88cf;
    POTIONALCHEMY_INFO = 0xba09;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_TIMED_STR2(C_INFO) {
    NR = 0x27ad;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_TIMED_STR2_CONDITION;
    INFORMATION = PC_ITPO_TIMED_STR2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "temp Str";
}

func int PC_ITPO_TIMED_STR2_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[31]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_TIMED_STR2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88d9;
    POTIONALCHEMY_INFO = 0xba0c;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_TIMED_DEX(C_INFO) {
    NR = 0x2791;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_TIMED_DEX_CONDITION;
    INFORMATION = PC_ITPO_TIMED_DEX_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "temp Dex";
}

func int PC_ITPO_TIMED_DEX_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[23]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_TIMED_DEX_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88d1;
    POTIONALCHEMY_INFO = 0xba0f;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_TIMED_DEX2(C_INFO) {
    NR = 0x27af;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_TIMED_DEX2_CONDITION;
    INFORMATION = PC_ITPO_TIMED_DEX2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "temp Dex";
}

func int PC_ITPO_TIMED_DEX2_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[32]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_TIMED_DEX2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88db;
    POTIONALCHEMY_INFO = 0xba12;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_TIMED_DEF(C_INFO) {
    NR = 0x2792;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_TIMED_DEF_CONDITION;
    INFORMATION = PC_ITPO_TIMED_DEF_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "temp Def";
}

func int PC_ITPO_TIMED_DEF_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[24]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_TIMED_DEF_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88d3;
    POTIONALCHEMY_INFO = 0xba15;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_TIMED_DEF2(C_INFO) {
    NR = 0x27af;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_TIMED_DEF2_CONDITION;
    INFORMATION = PC_ITPO_TIMED_DEF2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "temp Def";
}

func int PC_ITPO_TIMED_DEF2_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[33]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_TIMED_DEF2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88dd;
    POTIONALCHEMY_INFO = 0xba18;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HPREGEN(C_INFO) {
    NR = 0x2796;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HPREGEN_CONDITION;
    INFORMATION = PC_ITPO_HPREGEN_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "HpRegen";
}

func int PC_ITPO_HPREGEN_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[18]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HPREGEN_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88e5;
    POTIONALCHEMY_INFO = 0xba1b;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HPREGEN2(C_INFO) {
    NR = 0x27b0;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HPREGEN2_CONDITION;
    INFORMATION = PC_ITPO_HPREGEN2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "HpRegen";
}

func int PC_ITPO_HPREGEN2_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[27]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HPREGEN2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88e9;
    POTIONALCHEMY_INFO = 0xba1e;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANAREGEN(C_INFO) {
    NR = 0x2797;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANAREGEN_CONDITION;
    INFORMATION = PC_ITPO_MANAREGEN_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "ManaRegen";
}

func int PC_ITPO_MANAREGEN_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[19]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANAREGEN_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88e7;
    POTIONALCHEMY_INFO = 0xba21;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANAREGEN2(C_INFO) {
    NR = 0x27b1;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANAREGEN2_CONDITION;
    INFORMATION = PC_ITPO_MANAREGEN2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "ManaRegen";
}

func int PC_ITPO_MANAREGEN2_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[28]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANAREGEN2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88eb;
    POTIONALCHEMY_INFO = 0xba24;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_POTIONALCHEMY_POTION_FALL(C_INFO) {
    NR = 0x2794;
    NPC = 0xc3ab;
    CONDITION = PC_POTIONALCHEMY_POTION_FALL_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_POTION_FALL_INFO;
    PERMANENT = TRUE;
}

func int PC_POTIONALCHEMY_POTION_FALL_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[15]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_POTION_FALL_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88e1;
    POTIONALCHEMY_INFO = 0xba27;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_POTIONALCHEMY_POTION_DIVE(C_INFO) {
    NR = 0x2795;
    NPC = 0xc3ab;
    CONDITION = PC_POTIONALCHEMY_POTION_DIVE_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_POTION_DIVE_INFO;
    PERMANENT = TRUE;
}

func int PC_POTIONALCHEMY_POTION_DIVE_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[26]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_TIMED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_POTION_DIVE_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88e3;
    POTIONALCHEMY_INFO = 0xba2a;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_POTIONALCHEMY_SEED(C_INFO) {
    NPC = 0xc3ab;
    NR = 5;
    CONDITION = PC_POTIONALCHEMY_SEED_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_SEED_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Potions from seeds.";
}

func int PC_POTIONALCHEMY_SEED_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_SEED_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_SEED;
}

instance PC_POTIONALCHEMY_SEED_STOP(C_INFO) {
    NPC = 0xc3ab;
    NR = 99;
    CONDITION = PC_POTIONALCHEMY_SEED_STOP_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_SEED_STOP_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_BACK;
}

func int PC_POTIONALCHEMY_SEED_STOP_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_SEED_STOP_INFO() {
    POTIONALCHEMYMODE = 0;
}

instance PC_MANA_SEED_START(C_INFO) {
    NPC = 0xc3ab;
    NR = 6;
    CONDITION = PC_MANA_SEED_START_CONDITION;
    INFORMATION = PC_MANA_SEED_START_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Brew mana potions.";
}

func int PC_MANA_SEED_START_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_MANA_SEED_START_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_SEEDMP;
}

instance PC_MANA_SEED_STOP(C_INFO) {
    NPC = 0xc3ab;
    NR = 99;
    CONDITION = PC_MANA_SEED_STOP_CONDITION;
    INFORMATION = PC_MANA_SEED_STOP_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_BACK;
}

func int PC_MANA_SEED_STOP_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDMP))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_MANA_SEED_STOP_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_SEED;
}

instance PC_ITPO_MANA_01_SEED(C_INFO) {
    NR = 0x2783;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_01_SEED_CONDITION;
    INFORMATION = PC_ITPO_MANA_01_SEED_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Esencja many (2 ogniste pokrzywy, 1 rdest polny)";
}

func int PC_ITPO_MANA_01_SEED_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[3]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDMP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_01_SEED_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88b1;
    POTIONALCHEMY_INFO = 0xba39;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_01_SEED_VOL2(C_INFO) {
    NR = 0x27a6;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_01_SEED_VOL2_CONDITION;
    INFORMATION = PC_ITPO_MANA_01_SEED_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Esencja many (2 ogniste pokrzywy, 1 rdest polny)";
}

func int PC_ITPO_MANA_01_SEED_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[3]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDMP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_01_SEED_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88b2;
    POTIONALCHEMY_INFO = 0xba3c;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_02_SEED(C_INFO) {
    NR = 0x2785;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_02_SEED_CONDITION;
    INFORMATION = PC_ITPO_MANA_02_SEED_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Ekstrakt many (2 ogniste ziela, 1 rdest polny)";
}

func int PC_ITPO_MANA_02_SEED_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[4]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDMP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_02_SEED_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88b5;
    POTIONALCHEMY_INFO = 0xba3f;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_02_SEED_VOL2(C_INFO) {
    NR = 0x27a7;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_02_SEED_VOL2_CONDITION;
    INFORMATION = PC_ITPO_MANA_02_SEED_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Ekstrakt many (2 ogniste ziela, 1 rdest polny)";
}

func int PC_ITPO_MANA_02_SEED_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[4]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDMP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_02_SEED_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88b6;
    POTIONALCHEMY_INFO = 0xba42;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_03_SEED(C_INFO) {
    NR = 0x2787;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_03_SEED_CONDITION;
    INFORMATION = PC_ITPO_MANA_03_SEED_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Eliksir many (2 ogniste korzenie, 1 rdest polny)";
}

func int PC_ITPO_MANA_03_SEED_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[5]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDMP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_03_SEED_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88b9;
    POTIONALCHEMY_INFO = 0xba45;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_03_SEED_VOL2(C_INFO) {
    NR = 0x27a8;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_03_SEED_VOL2_CONDITION;
    INFORMATION = PC_ITPO_MANA_03_SEED_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Eliksir many (2 ogniste korzenie, 1 rdest polny)";
}

func int PC_ITPO_MANA_03_SEED_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[5]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDMP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_03_SEED_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88ba;
    POTIONALCHEMY_INFO = 0xba48;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_04_SEED(C_INFO) {
    NR = 0x2789;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_04_SEED_CONDITION;
    INFORMATION = PC_ITPO_MANA_04_SEED_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Pe³nia many (3 esencje many, 1 rdest polny)";
}

func int PC_ITPO_MANA_04_SEED_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[13]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDMP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_04_SEED_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88bd;
    POTIONALCHEMY_INFO = 0xba4b;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_04_SEED_VOL2(C_INFO) {
    NR = 0x27a9;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_04_SEED_VOL2_CONDITION;
    INFORMATION = PC_ITPO_MANA_04_SEED_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Pe³nia many (3 esencje many, 1 rdest polny)";
}

func int PC_ITPO_MANA_04_SEED_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[13]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDMP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_04_SEED_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88be;
    POTIONALCHEMY_INFO = 0xba4e;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_BLUEPLANT_SEED(C_INFO) {
    NR = 0x2776;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_BLUEPLANT_SEED_CONDITION;
    INFORMATION = PC_ITPO_MANA_BLUEPLANT_SEED_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Blue Elder Decoction";
}

func int PC_ITPO_MANA_BLUEPLANT_SEED_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[17]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDMP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_BLUEPLANT_SEED_INFO() {
    POTIONALCHEMY_INSTANCE = 0x889c;
    POTIONALCHEMY_INFO = 0xba51;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_MANA_BLUEPLANT_SEED_VOL2(C_INFO) {
    NR = 0x2777;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_MANA_BLUEPLANT_SEED_VOL2_CONDITION;
    INFORMATION = PC_ITPO_MANA_BLUEPLANT_SEED_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Blue Elder Decoction";
}

func int PC_ITPO_MANA_BLUEPLANT_SEED_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[17]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDMP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_MANA_BLUEPLANT_SEED_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x889d;
    POTIONALCHEMY_INFO = 0xba54;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_HEALTH_SEED_START(C_INFO) {
    NPC = 0xc3ab;
    NR = 7;
    CONDITION = PC_HEALTH_SEED_START_CONDITION;
    INFORMATION = PC_HEALTH_SEED_START_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Brew healing potions.";
}

func int PC_HEALTH_SEED_START_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEED))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_HEALTH_SEED_START_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_SEEDHP;
}

instance PC_HEALTH_SEED_STOP(C_INFO) {
    NPC = 0xc3ab;
    NR = 99;
    CONDITION = PC_HEALTH_SEED_STOP_CONDITION;
    INFORMATION = PC_HEALTH_SEED_STOP_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_BACK;
}

func int PC_HEALTH_SEED_STOP_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDHP))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_HEALTH_SEED_STOP_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_SEED;
}

instance PC_ITPO_HEALTH_01_SEED(C_INFO) {
    NR = 0x2779;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_01_SEED_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_01_SEED_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Esencja lecznicza (2 roliny lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_01_SEED_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[0]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDHP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_01_SEED_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88a1;
    POTIONALCHEMY_INFO = 0xba5d;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HEALTH_01_SEED_VOL2(C_INFO) {
    NR = 0x27a2;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_01_SEED_VOL2_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_01_SEED_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Esencja lecznicza (2 roliny lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_01_SEED_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[0]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDHP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_01_SEED_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88a2;
    POTIONALCHEMY_INFO = 0xba60;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HEALTH_02_SEED(C_INFO) {
    NR = 0x277b;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_02_SEED_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_02_SEED_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Ekstrakt leczniczy (2 ziela lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_02_SEED_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[1]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDHP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_02_SEED_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88a5;
    POTIONALCHEMY_INFO = 0xba63;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HEALTH_02_SEED_VOL2(C_INFO) {
    NR = 0x27a3;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_02_SEED_VOL2_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_02_SEED_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Ekstrakt leczniczy (2 ziela lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_02_SEED_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[1]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDHP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_02_SEED_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88a6;
    POTIONALCHEMY_INFO = 0xba66;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HEALTH_03_SEED(C_INFO) {
    NR = 0x277d;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_03_SEED_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_03_SEED_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Eliksir leczniczy (2 korzenie lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_03_SEED_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[2]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDHP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_03_SEED_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88a9;
    POTIONALCHEMY_INFO = 0xba69;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HEALTH_03_SEED_VOL2(C_INFO) {
    NR = 0x27a4;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_03_SEED_VOL2_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_03_SEED_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Eliksir leczniczy (2 korzenie lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_03_SEED_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[2]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDHP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_03_SEED_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88aa;
    POTIONALCHEMY_INFO = 0xba6c;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HEALTH_04_SEED(C_INFO) {
    NR = 0x2780;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_04_SEED_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_04_SEED_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Pe³nia ¿ycia (3 esencje lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_04_SEED_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[14]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDHP))) && ((BETTERALCHEMY_HEALER) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_04_SEED_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88ac;
    POTIONALCHEMY_INFO = 0xba6f;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_ITPO_HEALTH_04_SEED_VOL2(C_INFO) {
    NR = 0x27a5;
    NPC = 0xc3ab;
    CONDITION = PC_ITPO_HEALTH_04_SEED_VOL2_CONDITION;
    INFORMATION = PC_ITPO_HEALTH_04_SEED_VOL2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Pe³nia ¿ycia (3 esencje lecznicze, 1 rdest polny)";
}

func int PC_ITPO_HEALTH_04_SEED_VOL2_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((PLAYER_TALENT_ALCHEMY[14]) == (TRUE))) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_SEEDHP))) && ((BETTERALCHEMY_HEALER) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_ITPO_HEALTH_04_SEED_VOL2_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88ad;
    POTIONALCHEMY_INFO = 0xba72;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_POTIONALCHEMY_OTHER(C_INFO) {
    NPC = 0xc3ab;
    NR = 6;
    CONDITION = PC_POTIONALCHEMY_OTHER_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_OTHER_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Other.";
}

func int PC_POTIONALCHEMY_OTHER_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_OTHER_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_OTHER;
}

instance PC_POTIONALCHEMY_OTHER_STOP(C_INFO) {
    NPC = 0xc3ab;
    NR = 1;
    CONDITION = PC_POTIONALCHEMY_OTHER_STOP_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_OTHER_STOP_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_BACK;
}

func int PC_POTIONALCHEMY_OTHER_STOP_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_OTHER))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_OTHER_STOP_INFO() {
    POTIONALCHEMYMODE = 0;
}

instance PC_POTIONALCHEMY_OTHER_ORE(C_INFO) {
    NPC = 0xc3ab;
    NR = 150;
    CONDITION = PC_POTIONALCHEMY_OTHER_ORE_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_OTHER_ORE_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Crush magic ore nuggets.";
}

func int PC_POTIONALCHEMY_OTHER_ORE_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_OTHER))) && ((NPC_HASITEMS(SELF, 0x859a)) >= (1))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_OTHER_ORE_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_ORE;
}

instance PC_POTIONALCHEMY_OTHER_ORE_STOP(C_INFO) {
    NPC = 0xc3ab;
    NR = 1;
    CONDITION = PC_POTIONALCHEMY_OTHER_ORE_STOP_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_OTHER_ORE_STOP_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_BACK;
}

func int PC_POTIONALCHEMY_OTHER_ORE_STOP_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_ORE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

var string POWDEREDORE_PRINTHOWMANYCREATED = "";
var string POWDEREDORE_COUNTHOWMANYCREATED = "";
var int POWDEREDORE_HOWMUCHAMMO = 0;
func void PC_POTIONALCHEMY_OTHER_ORE_STOP_INFO() {
    POWDEREDORE_HOWMUCHAMMO = 0;
    POTIONALCHEMYMODE = POTIONALCHEMY_OTHER;
}

func void PC_POTIONALCHEMY_OTHER_HOWMANY() {
    if ((NPC_GETTALENTSKILL(HERO, NPC_TALENT_ALCHEMY)) == (0)) {
        POWDEREDORE_HOWMUCHAMMO = 15;
    };
    if ((NPC_GETTALENTSKILL(HERO, NPC_TALENT_ALCHEMY)) == (1)) {
        POWDEREDORE_HOWMUCHAMMO = 18;
    };
    if ((NPC_GETTALENTSKILL(HERO, NPC_TALENT_ALCHEMY)) == (2)) {
        POWDEREDORE_HOWMUCHAMMO = 22;
    };
    if ((NPC_GETTALENTSKILL(HERO, NPC_TALENT_ALCHEMY)) == (3)) {
        POWDEREDORE_HOWMUCHAMMO = 25;
    };
}

instance PC_POTIONALCHEMY_OTHER_ORE_ONE(C_INFO) {
    NPC = 0xc3ab;
    NR = 150;
    CONDITION = PC_POTIONALCHEMY_OTHER_ORE_ONE_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_OTHER_ORE_ONE_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Crush 1 nugget.";
}

func int PC_POTIONALCHEMY_OTHER_ORE_ONE_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_ORE))) && ((NPC_HASITEMS(SELF, 0x859a)) >= (1))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_OTHER_ORE_ONE_INFO() {
    NPC_REMOVEINVITEMS(SELF, 0x859a, 1);
    PC_POTIONALCHEMY_OTHER_HOWMANY();
    CREATEINVITEMS(SELF, 0x8c95, POWDEREDORE_HOWMUCHAMMO);
    POWDEREDORE_PRINTHOWMANYCREATED = INTTOSTRING((1) * (POWDEREDORE_HOWMUCHAMMO));
    POWDEREDORE_COUNTHOWMANYCREATED = CONCATSTRINGS(POWDEREDORE_PRINTHOWMANYCREATED, BOWMAKING_PRINT_HOWMANYISDONE);
    PRINT(PRINT_ORESUCCESS);
    PRINT(POWDEREDORE_COUNTHOWMANYCREATED);
}

instance PC_POTIONALCHEMY_OTHER_ORE_FIVE(C_INFO) {
    NPC = 0xc3ab;
    NR = 151;
    CONDITION = PC_POTIONALCHEMY_OTHER_ORE_FIVE_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_OTHER_ORE_FIVE_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Crush 5 nuggets.";
}

func int PC_POTIONALCHEMY_OTHER_ORE_FIVE_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_ORE))) && ((NPC_HASITEMS(SELF, 0x859a)) >= (5))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_OTHER_ORE_FIVE_INFO() {
    NPC_REMOVEINVITEMS(SELF, 0x859a, 5);
    PC_POTIONALCHEMY_OTHER_HOWMANY();
    CREATEINVITEMS(SELF, 0x8c95, (5) * (POWDEREDORE_HOWMUCHAMMO));
    POWDEREDORE_PRINTHOWMANYCREATED = INTTOSTRING((5) * (POWDEREDORE_HOWMUCHAMMO));
    POWDEREDORE_COUNTHOWMANYCREATED = CONCATSTRINGS(POWDEREDORE_PRINTHOWMANYCREATED, BOWMAKING_PRINT_HOWMANYISDONE);
    PRINT(PRINT_ORESUCCESS);
    PRINT(POWDEREDORE_COUNTHOWMANYCREATED);
}

instance PC_POTIONALCHEMY_OTHER_ORE_TEN(C_INFO) {
    NPC = 0xc3ab;
    NR = 152;
    CONDITION = PC_POTIONALCHEMY_OTHER_ORE_TEN_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_OTHER_ORE_TEN_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Crush 10 nuggets.";
}

func int PC_POTIONALCHEMY_OTHER_ORE_TEN_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_ORE))) && ((NPC_HASITEMS(SELF, 0x859a)) >= (10))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_OTHER_ORE_TEN_INFO() {
    NPC_REMOVEINVITEMS(SELF, 0x859a, 10);
    PC_POTIONALCHEMY_OTHER_HOWMANY();
    CREATEINVITEMS(SELF, 0x8c95, (10) * (POWDEREDORE_HOWMUCHAMMO));
    POWDEREDORE_PRINTHOWMANYCREATED = INTTOSTRING((10) * (POWDEREDORE_HOWMUCHAMMO));
    POWDEREDORE_COUNTHOWMANYCREATED = CONCATSTRINGS(POWDEREDORE_PRINTHOWMANYCREATED, BOWMAKING_PRINT_HOWMANYISDONE);
    PRINT(PRINT_ORESUCCESS);
    PRINT(POWDEREDORE_COUNTHOWMANYCREATED);
}

instance PC_POTIONALCHEMY_OTHER_ORE_ALL(C_INFO) {
    NPC = 0xc3ab;
    NR = 153;
    CONDITION = PC_POTIONALCHEMY_OTHER_ORE_ALL_CONDITION;
    INFORMATION = PC_POTIONALCHEMY_OTHER_ORE_ALL_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Crush all nuggets.";
}

func int PC_POTIONALCHEMY_OTHER_ORE_ALL_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_ORE))) && ((NPC_HASITEMS(SELF, 0x859a)) >= (10))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POTIONALCHEMY_OTHER_ORE_ALL_INFO() {
    NUMBER_NUGGET = NPC_HASITEMS(HERO, 0x859a);
    NPC_REMOVEINVITEMS(SELF, 0x859a, NUMBER_NUGGET);
    PC_POTIONALCHEMY_OTHER_HOWMANY();
    CREATEINVITEMS(SELF, 0x8c95, (NUMBER_NUGGET) * (POWDEREDORE_HOWMUCHAMMO));
    POWDEREDORE_PRINTHOWMANYCREATED = INTTOSTRING((NUMBER_NUGGET) * (POWDEREDORE_HOWMUCHAMMO));
    POWDEREDORE_COUNTHOWMANYCREATED = CONCATSTRINGS(POWDEREDORE_PRINTHOWMANYCREATED, BOWMAKING_PRINT_HOWMANYISDONE);
    PRINT(PRINT_ORESUCCESS);
    PRINT(POWDEREDORE_COUNTHOWMANYCREATED);
}

var int PC_POTIONALCHEMY_OTHER_ORE_ALL_INFO.NUMBER_NUGGET = 0;
instance PC_POISON_START(C_INFO) {
    NPC = 0xc3ab;
    NR = 2;
    CONDITION = PC_POISON_START_CONDITION;
    INFORMATION = PC_POISON_START_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Prepare poison.";
}

func int PC_POISON_START_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_OTHER))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POISON_START_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_POISON;
}

instance PC_POISON_STOP(C_INFO) {
    NPC = 0xc3ab;
    NR = 1;
    CONDITION = PC_POISON_STOP_CONDITION;
    INFORMATION = PC_POISON_STOP_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_BACK;
}

func int PC_POISON_STOP_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_POISON))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POISON_STOP_INFO() {
    POTIONALCHEMYMODE = POTIONALCHEMY_OTHER;
}

instance PC_Q501POTION_START(C_INFO) {
    NPC = 0xc3ab;
    NR = 100;
    CONDITION = PC_Q501POTION_START_CONDITION;
    INFORMATION = PC_Q501POTION_START_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Brew Dagobert's potion.";
}

func int PC_Q501POTION_START_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_OTHER))) && ((ALCHEMY_Q501_DALBERTPOTION) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_Q501POTION_START_INFO() {
    Q501_NEEDHELPWITHPOTION = TRUE;
    AI_OUTPUT(HERO, HERO, "DIA_MARVIN_Q501Potion_15_01");
    B_LOGENTRY(TOPIC_Q501, LOG_Q501_CANTDOIT);
    PC_POTIONALCHEMY_END_INFO();
}

instance PC_Q307POTION_START(C_INFO) {
    NPC = 0xc3ab;
    NR = 0x2798;
    CONDITION = PC_Q307POTION_START_CONDITION;
    INFORMATION = PC_Q307POTION_START_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Brew poison and antidote for Ben.";
}

func int PC_Q307POTION_START_CONDITION() {
    if (((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_POISON))) && ((ALCHEMY_Q307_BENPOTION) == (TRUE))) && ((NPC_HASITEMS(HERO, 0x9056)) == (0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_Q307POTION_START_INFO() {
    POTIONALCHEMY_INSTANCE = 0x8898;
    POTIONALCHEMY_INFO = 0xba9b;
    PC_CRAFTRECIPEITEMS(0x8898, 1);
}

instance PC_POISON_SQ228(C_INFO) {
    NPC = 0xc3ab;
    NR = 0x27a1;
    CONDITION = PC_POISON_SQ228_CONDITION;
    INFORMATION = PC_POISON_SQ228_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Rat poison.";
}

func int PC_POISON_SQ228_CONDITION() {
    if ((((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_POISON))) && ((ALCHEMY_SQ228_POISONRAT) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_POISON_SQ228_INFO() {
    POTIONALCHEMY_INSTANCE = 0x8899;
    POTIONALCHEMY_INFO = 0xba9e;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

instance PC_TABAK_START(C_INFO) {
    NPC = 0xc3ab;
    NR = 0x27aa;
    CONDITION = PC_TABAK_START_CONDITION;
    INFORMATION = PC_TABAK_START_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Blend tobacco and roll reefers.";
}

func int PC_TABAK_START_CONDITION() {
    if (((PLAYER_MOBSI_PRODUCTION) == (MOBSI_POTIONALCHEMY)) && ((POTIONALCHEMYMODE) == (POTIONALCHEMY_OTHER))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void PC_TABAK_START_INFO() {
    POTIONALCHEMY_INSTANCE = 0x88ed;
    POTIONALCHEMY_INFO = 0xbaa1;
    PC_POTIONALCHEMY_CHECKAMOUNTCHOICES();
}

func void POTIONALCHEMY_REFRESHDIALOGS() {
    PC_ITPO_MANA_01.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88af);
    PC_ITPO_MANA_01_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88b0);
    PC_ITPO_MANA_02.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88b3);
    PC_ITPO_MANA_02_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88b4);
    PC_ITPO_MANA_03.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88b7);
    PC_ITPO_MANA_03_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88b8);
    PC_ITPO_MANA_04.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88bb);
    PC_ITPO_MANA_04_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88bc);
    PC_ITPO_MANA_BLUEPLANT.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x889a);
    PC_ITPO_MANA_BLUEPLANT_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x889b);
    PC_ITPO_HEALTH_01.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x889f);
    PC_ITPO_HEALTH_01_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88a0);
    PC_ITPO_HEALTH_02.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88a3);
    PC_ITPO_HEALTH_02_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88a4);
    PC_ITPO_HEALTH_03.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88a7);
    PC_ITPO_HEALTH_03_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88a8);
    PC_ITPO_HEALTH_04.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88ab);
    PC_ITPO_HEALTH_04_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88ae);
    PC_ITPO_MANA_01_SEED.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88b1);
    PC_ITPO_MANA_02_SEED.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88b5);
    PC_ITPO_MANA_03_SEED.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88b9);
    PC_ITPO_MANA_04_SEED.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88bd);
    PC_ITPO_MANA_01_SEED_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88b2);
    PC_ITPO_MANA_02_SEED_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88b6);
    PC_ITPO_MANA_03_SEED_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88ba);
    PC_ITPO_MANA_04_SEED_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88be);
    PC_ITPO_MANA_BLUEPLANT_SEED.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x889c);
    PC_ITPO_MANA_BLUEPLANT_SEED_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x889d);
    PC_ITPO_HEALTH_01_SEED.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88a1);
    PC_ITPO_HEALTH_02_SEED.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88a5);
    PC_ITPO_HEALTH_03_SEED.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88a9);
    PC_ITPO_HEALTH_04_SEED.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88ac);
    PC_ITPO_HEALTH_01_SEED_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88a2);
    PC_ITPO_HEALTH_02_SEED_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88a6);
    PC_ITPO_HEALTH_03_SEED_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88aa);
    PC_ITPO_HEALTH_04_SEED_VOL2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88ad);
    PC_ITPO_PERM_HEALTH.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88bf);
    PC_ITPO_PERM_MANA.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88c1);
    PC_ITPO_PERM_STRG.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88c3);
    PC_ITPO_PERM_DEX.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88c5);
    PC_ITPO_STONESKIN.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88df);
    PC_ITPO_TIMED_HEALTH.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88cb);
    PC_ITPO_TIMED_MANA.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88cd);
    PC_ITPO_TIMED_STR.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88cf);
    PC_ITPO_TIMED_DEX.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88d1);
    PC_ITPO_TIMED_DEF.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88d3);
    PC_ITPO_TIMED_HEALTH2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88d5);
    PC_ITPO_TIMED_MANA2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88d7);
    PC_ITPO_TIMED_STR2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88d9);
    PC_ITPO_TIMED_DEX2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88db);
    PC_ITPO_TIMED_DEF2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88dd);
    PC_ITPO_SPEED.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88c7);
    PC_ITPO_SPEED2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88c9);
    PC_POTIONALCHEMY_POTION_FALL.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88e1);
    PC_POTIONALCHEMY_POTION_DIVE.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88e3);
    PC_ITPO_HPREGEN.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88e5);
    PC_ITPO_MANAREGEN.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88e7);
    PC_ITPO_HPREGEN2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88e9);
    PC_ITPO_MANAREGEN2.DESCRIPTION = BUILDRECIPEDIALOGDESCRIPTION(0x88eb);
}

func void POTIONALCHEMY_S1() {
    CREATEINVITEMS(SELF, 0x8581, 1);
    POTIONALCHEMYMODE = 0;
    POTIONALCHEMY_REFRESHDIALOGS();
    HER = HLP_GETNPC(0xc3ab);
    if ((HLP_GETINSTANCEID(SELF)) == (HLP_GETINSTANCEID(HER))) {
        SELF.AIVAR[4] = TRUE;
        PLAYER_MOBSI_PRODUCTION = MOBSI_POTIONALCHEMY;
        AI_PROCESSINFOS(HER);
    };
}

instance POTIONALCHEMY_S1.HER(C_NPC)
