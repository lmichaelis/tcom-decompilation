instance DIA_WINSTAN_EXIT(C_INFO) {
    NPC = 0xccd7;
    NR = 999;
    CONDITION = DIA_WINSTAN_EXIT_CONDITION;
    INFORMATION = DIA_WINSTAN_EXIT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_ENDE;
}

func int DIA_WINSTAN_EXIT_CONDITION() {
    return TRUE;
}

func void DIA_WINSTAN_EXIT_INFO() {
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_WINSTAN_CANYOUTEACH(C_INFO) {
    NPC = 0xccd7;
    NR = 3;
    CONDITION = DIA_WINSTAN_CANYOUTEACH_CONDITION;
    INFORMATION = DIA_WINSTAN_CANYOUTEACH_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Could you train me?";
}

func int DIA_WINSTAN_CANYOUTEACH_CONDITION() {
    if (((OTHER.GUILD) == (GIL_MIL)) && ((BECOMEAGUARD_TAVERNPART) >= (2))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_CANYOUTEACH_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_CanYouTeach_15_00");
    if ((MARVIN_MILITIASPECIALIZATION) >= (1)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_CanYouTeach_03_02");
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_CanYouTeach_03_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_CanYouTeach_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_CanYouTeach_03_04");
    LOG_CREATETOPIC(TOPIC_MILITIATEACHER, LOG_NOTE);
    AI_LOGENTRY(TOPIC_MILITIATEACHER, LOG_MILITIATEACHER_WINSTAN);
}

var int WINSTAN_NOMORE = 0;
var int WINSTAN_CURRENT1HLEVEL = 0;
var int WINSTAN_CURRENT2HLEVEL = 0;
var int WINSTAN_CURRENTSTRLEVEL = 0;
var string WINSTAN_PRINTS = "";
const int WINSTAN_RLEVEL = 40;
const int WINSTAN_RLEVELSTR = 80;
instance DIA_WINSTAN_TEACH(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_TEACH_CONDITION;
    INFORMATION = DIA_WINSTAN_TEACH_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "I want to train.";
}

func int DIA_WINSTAN_TEACH_CONDITION() {
    if (((NPC_KNOWSINFO(OTHER, 0x10792)) && ((WINSTAN_NOMORE) == (FALSE))) && ((OTHER.GUILD) == (GIL_MIL))) {
        if ((MARVIN_MILITIASPECIALIZATION) >= (1)) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_TEACH_CHOICES() {
    WINSTAN_CURRENT1HLEVEL = OTHER.AIVAR[84];
    WINSTAN_CURRENT2HLEVEL = OTHER.AIVAR[85];
    WINSTAN_CURRENTSTRLEVEL = OTHER.AIVAR[81];
    WINSTAN_GOLDCOST = 0;
    INFO_CLEARCHOICES(0x1079c);
    INFO_ADDCHOICE(0x1079c, DIALOG_BACK, 0x107a1);
    INFO_ADDCHOICE(0x1079c, B_BUILDLEARNSTRING2(PRINT_LEARN1H1, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_1H, 1), WINSTAN_GOLDCOST), 0x107a2);
    INFO_ADDCHOICE(0x1079c, B_BUILDLEARNSTRING2(PRINT_LEARN1H5, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_1H, 5), (WINSTAN_GOLDCOST) * (5)), 0x107a3);
    INFO_ADDCHOICE(0x1079c, B_BUILDLEARNSTRING2(PRINT_LEARN2H1, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_2H, 1), WINSTAN_GOLDCOST), 0x107a4);
    INFO_ADDCHOICE(0x1079c, B_BUILDLEARNSTRING2(PRINT_LEARN2H5, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_2H, 5), (WINSTAN_GOLDCOST) * (5)), 0x107a5);
    INFO_ADDCHOICE(0x1079c, B_BUILDLEARNSTRING2(PRINT_LEARNSTR1, B_GETLEARNCOSTATTRIBUTE(OTHER, ATR_STRENGTH, 1), WINSTAN_GOLDCOST), 0x107a6);
    INFO_ADDCHOICE(0x1079c, B_BUILDLEARNSTRING2(PRINT_LEARNSTR5, B_GETLEARNCOSTATTRIBUTE(OTHER, ATR_STRENGTH, 5), (WINSTAN_GOLDCOST) * (5)), 0x107a7);
    if ((((OTHER.AIVAR[84]) >= (80)) && ((OTHER.AIVAR[85]) >= (80))) && ((OTHER.AIVAR[81]) >= (120))) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_NoMore_03_01");
        WINSTAN_NOMORE = TRUE;
    };
}

var int DIA_WINSTAN_TEACH_CHOICES.WINSTAN_GOLDCOST = 0;
func void DIA_WINSTAN_TEACH_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_Teach_15_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Teach_03_01");
    DIA_WINSTAN_TEACH_CHOICES();
}

func void DIA_WINSTAN_TEACH_BACK() {
    INFO_CLEARCHOICES(0x1079c);
}

func void DIA_WINSTAN_TEACH_1H1() {
    if ((OTHER.AIVAR[84]) < (40)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Teach_1H1_03_00");
        WINSTAN_PRINTS = CONCATSTRINGS(PRINT_MINSKILL, INTTOSTRING(WINSTAN_RLEVEL));
    };
    if ((WINSTAN_CURRENT1HLEVEL) < (OTHER.AIVAR[84])) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Teach_1H1_03_01");
    };
    B_TEACHFIGHTTALENTPERCENT(SELF, OTHER, NPC_TALENT_1H, 1, 80);
    DIA_WINSTAN_TEACH_CHOICES();
}

func void DIA_WINSTAN_TEACH_1H5() {
    if ((OTHER.AIVAR[84]) < (40)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Teach_1H5_03_02");
        WINSTAN_PRINTS = CONCATSTRINGS(PRINT_MINSKILL, INTTOSTRING(WINSTAN_RLEVEL));
    };
    if ((WINSTAN_CURRENT1HLEVEL) < (OTHER.AIVAR[84])) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Teach_1H5_03_03");
    };
    B_TEACHFIGHTTALENTPERCENT(SELF, OTHER, NPC_TALENT_1H, 5, 80);
    DIA_WINSTAN_TEACH_CHOICES();
}

func void DIA_WINSTAN_TEACH_2H1() {
    if ((OTHER.AIVAR[85]) < (40)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Teach_2H1_03_00");
        WINSTAN_PRINTS = CONCATSTRINGS(PRINT_MINSKILL, INTTOSTRING(WINSTAN_RLEVEL));
    };
    if ((WINSTAN_CURRENT2HLEVEL) < (OTHER.AIVAR[85])) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Teach_2H1_03_01");
    };
    B_TEACHFIGHTTALENTPERCENT(SELF, OTHER, NPC_TALENT_2H, 1, 80);
    DIA_WINSTAN_TEACH_CHOICES();
}

func void DIA_WINSTAN_TEACH_2H5() {
    if ((OTHER.AIVAR[85]) < (40)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Teach_2H5_03_00");
        WINSTAN_PRINTS = CONCATSTRINGS(PRINT_MINSKILL, INTTOSTRING(WINSTAN_RLEVEL));
    };
    if ((WINSTAN_CURRENT2HLEVEL) < (OTHER.AIVAR[85])) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Teach_2H5_03_01");
    };
    B_TEACHFIGHTTALENTPERCENT(SELF, OTHER, NPC_TALENT_2H, 5, 80);
    DIA_WINSTAN_TEACH_CHOICES();
}

func void DIA_WINSTAN_TEACHSTR1() {
    if ((OTHER.AIVAR[81]) < (80)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_TeachSTR1_03_00");
        WINSTAN_PRINTS = CONCATSTRINGS(PRINT_MINATR, INTTOSTRING(WINSTAN_RLEVELSTR));
    };
    if ((WINSTAN_CURRENTSTRLEVEL) < (OTHER.AIVAR[81])) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_TeachSTR1_03_01");
    };
    B_TEACHATTRIBUTEPOINTS(SELF, OTHER, ATR_STRENGTH, 1, 120);
    DIA_WINSTAN_TEACH_CHOICES();
}

func void DIA_WINSTAN_TEACHSTR5() {
    if ((OTHER.AIVAR[81]) < (80)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_TeachSTR5_03_00");
        WINSTAN_PRINTS = CONCATSTRINGS(PRINT_MINATR, INTTOSTRING(WINSTAN_RLEVELSTR));
    };
    if ((WINSTAN_CURRENTSTRLEVEL) < (OTHER.AIVAR[81])) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_TeachSTR5_03_01");
    };
    B_TEACHATTRIBUTEPOINTS(SELF, OTHER, ATR_STRENGTH, 5, 120);
    DIA_WINSTAN_TEACH_CHOICES();
}

instance DIA_WINSTAN_FMQ001_START(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_FMQ001_START_CONDITION;
    INFORMATION = DIA_WINSTAN_FMQ001_START_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_WINSTAN_FMQ001_START_CONDITION() {
    if ((LOG_GETSTATUS(MIS_FMQ001)) == (LOG_RUNNING)) {
        if ((((FMQ001_RODEIRCHSENTTOTRAINING) == (TRUE)) && ((FMQ001_RODEIRCHSENTTOTRAINING_DAY) <= ((WLD_GETDAY()) - (1)))) && (WLD_ISTIME(8, 0, 16, 0))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void FMQ001_SWORDTRAINING() {
    FMQ001_STARTEDTRAINING = TRUE;
    FMQ001_TRAININGFIRSTFIGHTRESULT = 1;
    AI_FUNCTION(SELF, 0xf53f);
    AI_TURNTONPC(OTHER, SELF);
    AI_TURNTONPC(SELF, OTHER);
    AI_PLAYANI(OTHER, "T_STAND_2_MILSTAND_HERO");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTraining_11_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTraining_11_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTraining_11_04");
    if ((FMQ001_MARVINLATEFORTRAINING) == (FALSE)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTraining_11_05");
        AI_OUTPUT(OTHER, SELF, "DIA_Winstan_FMQ001_SwordTraining_15_06");
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTraining_11_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTraining_11_08");
    NPC_EXCHANGEROUTINE(SELF, "FightClub");
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0xf540);
    AI_FUNCTION(SELF, 0xf532);
    AI_WAITTILLEND(OTHER, SELF);
    AI_PLAYANI(OTHER, "T_REMOVE_MILSTAND");
}

func void DIA_WINSTAN_FMQ001_START_INFO() {
    if (WLD_ISTIME(8, 0, 11, 0)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_START_11_00");
        FMQ001_MEETUP();
        AI_LOGENTRY(TOPIC_FMQ001, LOG_FMQ001_WINSTAN_MEETUP_V1);
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_START_11_01");
    FMQ001_MARVINLATEFORTRAINING = TRUE;
    AI_LOGENTRY(TOPIC_FMQ001, LOG_FMQ001_WINSTAN_MEETUP_V2);
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_START_11_02");
    INFO_CLEARCHOICES(0x107a8);
    INFO_ADDCHOICE(0x107a8, "Marvin.", 0x107ad);
    INFO_ADDCHOICE(0x107a8, "Recruit Marvin reporting for duty!", 0x107ae);
}

func void DIA_WINSTAN_FMQ001_NEXT() {
    AI_WAITTILLEND(SELF, OTHER);
    B_USEFAKESCROLL();
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_START_11_04");
    FMQ001_SWORDTRAINING();
}

func void DIA_WINSTAN_FMQ001_START_NAME() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_FMQ001_START_15_03");
    DIA_WINSTAN_FMQ001_NEXT();
}

func void DIA_WINSTAN_FMQ001_START_NAMESIR() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_FMQ001_START_NameSir_15_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_START_11_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_START_11_08");
    DIA_WINSTAN_FMQ001_NEXT();
}

func void DIA_WINSTAN_AFTERFMQ001_SWORDTRAINING() {
    HERO.AIVAR[95] = FALSE;
    FMQ001_BLOCKDIALOGUE = TRUE;
    PLAYERLOCKINVENTORY = FALSE;
    FMQ001_FAKEWALL();
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_AfterFMQ001_SwordTraining_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_AfterFMQ001_SwordTraining_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_AfterFMQ001_SwordTraining_03_03");
    AI_LOGENTRY(TOPIC_FMQ001, LOG_FMQ001_WINSTAN_AFTERFIGHT_V2);
    FMQ001_MARVINFIGHTINGWITHRECRUITS = FALSE;
    AI_FUNCTION(SELF, 0xf543);
    AI_FUNCTION(SELF, 0xf538);
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT(C_INFO) {
    NPC = 0xccd7;
    NR = 5;
    CONDITION = DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT_CONDITION;
    INFORMATION = DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT_INFO;
    PERMANENT = TRUE;
    IMPORTANT = TRUE;
}

func int DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT_CONDITION() {
    if (((LOG_GETSTATUS(MIS_FMQ001)) == (LOG_RUNNING)) && (NPC_ISINSTATE(SELF, 0xf09f))) {
        if (((FMQ001_TRAININGFIRSTFIGHTRESULT) == (3)) || ((FMQ001_TRAININGFIRSTFIGHTRESULT) == (4))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT_INFO() {
    if ((FMQ001_TRAININGFIRSTFIGHTRESULT) == (4)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult_11_01");
        FMQ001_TRAININGREMATCHFIGHTRESULT = 1;
        FMQ001_TRAININGFIRSTFIGHTRESULT = 5;
        PLAYERLOCKINVENTORY = FALSE;
        AI_STOPPROCESSINFOS(SELF);
    };
    if ((FMQ001_TRAININGFIRSTFIGHTRESULT) == (3)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult_11_02");
        AI_TURNTONPC(SELF, MIL_4041_RECRUIT);
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult_11_03");
        FMQ001_TRAININGFIRSTFIGHTRESULT = 5;
        FMQ001_TRAINING2VS1FIGHTRESULT = 1;
        AI_STOPPROCESSINFOS(SELF);
    };
    HERO.AIVAR[95] = TRUE;
    HERO.AIVAR[94] = FALSE;
    FMQ001_CHECKRECRUITHP();
    FMQ001_REMOVEPARTYMEMBER();
}

instance DIA_WINSTAN_FMQ001_SWORDREMATCH(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_FMQ001_SWORDREMATCH_CONDITION;
    INFORMATION = DIA_WINSTAN_FMQ001_SWORDREMATCH_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_WINSTAN_FMQ001_SWORDREMATCH_CONDITION() {
    if (((LOG_GETSTATUS(MIS_FMQ001)) == (LOG_RUNNING)) && (NPC_ISINSTATE(SELF, 0xf09f))) {
        if (((FMQ001_TRAININGREMATCHFIGHTRESULT) == (3)) || ((FMQ001_TRAININGREMATCHFIGHTRESULT) == (4))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_FMQ001_SWORDREMATCH_INFO() {
    if ((FMQ001_TRAININGREMATCHFIGHTRESULT) == (4)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordRematch_03_01");
        DIA_WINSTAN_AFTERFMQ001_SWORDTRAINING();
    };
    if ((FMQ001_TRAININGREMATCHFIGHTRESULT) == (3)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordRematch_03_02");
        DIA_WINSTAN_AFTERFMQ001_SWORDTRAINING();
    };
    FMQ001_CHECKRECRUITHP();
    FMQ001_REMOVEPARTYMEMBER();
    FMQ001_TRAININGREMATCHFIGHTRESULT = 5;
    HERO.AIVAR[95] = TRUE;
    HERO.AIVAR[94] = FALSE;
}

instance DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT2VS1(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT2VS1_CONDITION;
    INFORMATION = DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT2VS1_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT2VS1_CONDITION() {
    if (((LOG_GETSTATUS(MIS_FMQ001)) == (LOG_RUNNING)) && (NPC_ISINSTATE(SELF, 0xf09f))) {
        if (((FMQ001_TRAINING2VS1FIGHTRESULT) == (3)) || ((FMQ001_TRAINING2VS1FIGHTRESULT) == (4))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT2VS1_INFO() {
    if ((FMQ001_TRAINING2VS1FIGHTRESULT) == (4)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult2vs1_11_01");
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult2vs1_11_02");
        DIA_WINSTAN_AFTERFMQ001_SWORDTRAINING();
    };
    if ((FMQ001_TRAINING2VS1FIGHTRESULT) == (3)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult2vs1_11_03");
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult2vs1_11_04");
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult2vs1_11_05");
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult2vs1_11_06");
        INFO_CLEARCHOICES(0x107b6);
        INFO_ADDCHOICE(0x107b6, "I'd rather not risk it.", 0x107ba);
        INFO_ADDCHOICE(0x107b6, "I'd love to try.", 0x107b9);
    };
    FMQ001_CHECKRECRUITHP();
    FMQ001_REMOVEPARTYMEMBER();
    FMQ001_TRAINING2VS1FIGHTRESULT = 5;
    HERO.AIVAR[95] = TRUE;
    HERO.AIVAR[94] = FALSE;
}

func void DIA_WINSTAN_FMQ001_SWORDTRAININGRESULTGO3VS1() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_FMQ001_SwordTrainingResultGo3vs1_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResultGo3vs1_11_03");
    TRAINING3VS1FIGHTRESULT = 1;
    FMQ001_RECRUIT01DOWN = FALSE;
    FMQ001_RECRUIT02DOWN = FALSE;
    FMQ001_RECRUIT03DOWN = FALSE;
    INFO_CLEARCHOICES(0x107b6);
    AI_STOPPROCESSINFOS(SELF);
}

func void DIA_WINSTAN_FMQ001_SWORDTRAININGRESULTDONTGO3VS1() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_FMQ001_SwordTrainingResultDontGo3vs1_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResultDontGo3vs1_11_03");
    INFO_CLEARCHOICES(0x107b6);
    DIA_WINSTAN_AFTERFMQ001_SWORDTRAINING();
}

instance DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT3VS1(C_INFO) {
    NPC = 0xccd7;
    NR = 5;
    CONDITION = DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT3VS1_CONDITION;
    INFORMATION = DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT3VS1_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT3VS1_CONDITION() {
    if (((LOG_GETSTATUS(MIS_FMQ001)) == (LOG_RUNNING)) && (NPC_ISINSTATE(SELF, 0xf09f))) {
        if (((TRAINING3VS1FIGHTRESULT) == (3)) || ((TRAINING3VS1FIGHTRESULT) == (4))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT3VS1_INFO() {
    PLAYERLOCKINVENTORY = FALSE;
    if ((TRAINING3VS1FIGHTRESULT) == (4)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult3vs1_11_01");
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult3vs1_11_02");
        DIA_WINSTAN_AFTERFMQ001_SWORDTRAINING();
    };
    if ((TRAINING3VS1FIGHTRESULT) == (3)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult3vs1_11_03");
        AI_OUTPUT(OTHER, SELF, "DIA_Winstan_FMQ001_SwordTrainingResult3vs1_15_04");
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult3vs1_11_05");
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult3vs1_11_06");
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult3vs1_11_07");
        INFO_CLEARCHOICES(0x107bb);
        INFO_ADDCHOICE(0x107bb, "I'd love to stay.", 0x107be);
        INFO_ADDCHOICE(0x107bb, "I've shown what I can do. I'm going back to Roderich.", 0x107bf);
    };
    FMQ001_CHECKRECRUITHP();
    FMQ001_REMOVEPARTYMEMBER();
    TRAINING3VS1FIGHTRESULT = 5;
    HERO.AIVAR[95] = FALSE;
    HERO.AIVAR[94] = FALSE;
}

func void DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT3VS1_STAY() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_FMQ001_SwordTrainingResult3vs1_Stay_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult3vs1_Stay_03_02");
    AI_LOGENTRY(TOPIC_FMQ001, LOG_FMQ001_WINSTAN_AFTERFIGHT_V1);
    INFO_CLEARCHOICES(0x107bb);
    DIA_WINSTAN_AFTERFMQ001_SWORDTRAINING();
}

func void DIA_WINSTAN_FMQ001_SWORDTRAININGRESULT3VS1_BYE() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_FMQ001_SwordTrainingResult3vs1_Bye_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_SwordTrainingResult3vs1_Bye_03_02");
    PLAYERLOCKINVENTORY = FALSE;
    AI_LOGENTRY(TOPIC_FMQ001, LOG_FMQ001_WINSTAN_SPEEDRUN);
    FMQ001_MARVINFIGHTINGWITHRECRUITS = FALSE;
    FMQ001_FINISHTRAINING = 1;
    FMQ001_FAKEWALL();
    AI_FUNCTION(SELF, 0xf538);
    INFO_CLEARCHOICES(0x107bb);
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_WINSTAN_FMQ001_AFTERRACE(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_FMQ001_AFTERRACE_CONDITION;
    INFORMATION = DIA_WINSTAN_FMQ001_AFTERRACE_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_WINSTAN_FMQ001_AFTERRACE_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x10524)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_FMQ001_AFTERRACE_INFO() {
    FMQ001_BRINGBACKEVENTS();
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_AfterRace_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_AfterRace_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_AfterRace_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_FMQ001_AfterRace_03_05");
    B_SAY(SELF, OTHER, "$MILITIA_GOODBYE");
    AI_LOGENTRY(TOPIC_FMQ001, LOG_FMQ001_WINSTAN_AFTERRACE);
    if ((FMQ001_FINISHTRAINING) == (0)) {
        FMQ001_FINISHTRAINING = 2;
    };
    NPC_EXCHANGEROUTINE(MIL_924_WINSTAN, START);
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_WINSTAN_QM304_START(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_QM304_START_CONDITION;
    INFORMATION = DIA_WINSTAN_QM304_START_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_WINSTAN_QM304_START_CONDITION() {
    if (((KAPITEL) >= (3)) && ((HERO.GUILD) == (GIL_MIL))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_QM304_START_INFO() {
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM304_Start_03_01");
    AI_STARTFACEANI(OTHER, S_SMUG, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM304_Start_15_02");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM304_Start_03_03");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM304_Start_03_04");
    INFO_CLEARCHOICES(0x107c3);
    if ((QM_304_DETAIL) == (FALSE)) {
        INFO_ADDCHOICE(0x107c3, "Are they even found in the Archipelago?", 0x107c6);
    };
    INFO_ADDCHOICE(0x107c3, "Where did he get the nugget of ore?", 0x107c7);
}

func void DIA_WINSTAN_QM304_START_WHAT() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM304_Start_What_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM304_Start_What_03_02");
    INFO_CLEARCHOICES(0x107c3);
    INFO_ADDCHOICE(0x107c3, "Where did he get the nugget of ore?", 0x107c7);
}

func void DIA_WINSTAN_QM304_START_WHERE() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM304_Start_Where_15_01");
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM304_Start_Where_03_02");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM304_Start_Where_03_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM304_Start_Where_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM304_Start_Where_03_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM304_Start_Where_03_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM304_Start_Where_03_07");
    INFO_CLEARCHOICES(0x107c3);
    LOG_CREATETOPIC(TOPIC_QM304, LOG_MISSION);
    LOG_SETSTATUS(_@(MIS_QM304), TOPIC_QM304, LOG_RUNNING);
    AI_LOGENTRY(TOPIC_QM304, LOG_QM304_START);
    QM304_PREPARENPC();
}

instance DIA_WINSTAN_QM304_FINISH(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_QM304_FINISH_CONDITION;
    INFORMATION = DIA_WINSTAN_QM304_FINISH_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I dealt with the issue of magic ore.";
}

func int DIA_WINSTAN_QM304_FINISH_CONDITION() {
    if (((LOG_GETSTATUS(MIS_QM304)) == (LOG_RUNNING)) && ((QM304_ALLTASKDONE) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_QM304_FINISH_LEAVE() {
    INFO_CLEARCHOICES(0x107c8);
    AI_LOGENTRY(TOPIC_QM304, LOG_QM304_FINISH);
    AI_RESETFACEANI(SELF);
    QM304_FINISHQUEST();
}

func void DIA_WINSTAN_QM304_FINISH_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM304_Finish_15_01");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM304_Finish_03_02");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM304_Finish_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM304_Finish_03_04");
    if (((QM304_COUNTNUGGETS) == (0)) || ((NPC_HASITEMS(HERO, 0x859a)) == (0))) {
        DIA_WINSTAN_QM304_FINISH_LEAVE();
    };
    if (((QM304_COUNTNUGGETS) >= (1)) && ((NPC_HASITEMS(HERO, 0x859a)) >= (1))) {
        INFO_CLEARCHOICES(0x107c8);
        INFO_ADDCHOICE(0x107c8, "(Accept payment and leave)", 0x107ca);
        INFO_ADDCHOICE(0x107c8, "(Hand over found ore)", 0x107cc);
    };
}

func void DIA_WINSTAN_QM304_FINISH_NUGGET() {
    QM304_GIVENUGGETWINSTAN = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM304_Finish_Nugget_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM304_Finish_Nugget_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM304_Finish_Nugget_03_03");
    DIA_WINSTAN_QM304_FINISH_LEAVE();
}

instance DIA_WINSTAN_QM305_START(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_QM305_START_CONDITION;
    INFORMATION = DIA_WINSTAN_QM305_START_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Is there any work to be done?";
}

func int DIA_WINSTAN_QM305_START_CONDITION() {
    if (((HERO.GUILD) == (GIL_MIL)) && ((MARVIN_MILITIASPECIALIZATION) == (MILITIA_SPECIALIZATION_FIGHTER))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

var int WINSTAN_QM305_START_WHY = 0;
var int WINSTAN_QM305_START_ONLY = 0;
var int WINSTAN_QM305_START_WHERE = 0;
func void DIA_WINSTAN_QM305_START_NEXT() {
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Start_Next_03_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM305_Start_Next_15_02");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Start_Next_03_03");
    LOG_CREATETOPIC(TOPIC_QM305, LOG_MISSION);
    LOG_SETSTATUS(_@(MIS_QM305), TOPIC_QM305, LOG_RUNNING);
    AI_LOGENTRY(TOPIC_QM305, LOG_QM305_START);
    INFO_CLEARCHOICES(0x107cd);
}

func void DIA_WINSTAN_QM305_START_CHOICES() {
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    INFO_CLEARCHOICES(0x107cd);
    if ((((WINSTAN_QM305_START_WHY) == (FALSE)) || ((WINSTAN_QM305_START_ONLY) == (FALSE))) || ((WINSTAN_QM305_START_WHERE) == (FALSE))) {
        if ((WINSTAN_QM305_START_WHY) == (FALSE)) {
            INFO_ADDCHOICE(0x107cd, "Why does Odgar need 'Nordmarians' Mastery'?", 0x107d7);
        };
        if ((WINSTAN_QM305_START_ONLY) == (FALSE)) {
            INFO_ADDCHOICE(0x107cd, "Are you sure this is the only copy of this book?", 0x107d6);
        };
        if ((WINSTAN_QM305_START_WHERE) == (FALSE)) {
            INFO_ADDCHOICE(0x107cd, "Where can I find this Wolf Son?", 0x107d5);
        };
    };
    DIA_WINSTAN_QM305_START_NEXT();
}

func void DIA_WINSTAN_QM305_START_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM305_Start_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Start_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Start_03_03");
    AI_STARTFACEANI(OTHER, S_ANGRY, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM305_Start_15_04");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Start_03_05");
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
    DIA_WINSTAN_QM305_START_CHOICES();
}

func void DIA_WINSTAN_QM305_START_WHERE() {
    WINSTAN_QM305_START_WHERE = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM305_Start_Where_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Start_Where_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Start_Where_03_03");
    DIA_WINSTAN_QM305_START_CHOICES();
}

func void DIA_WINSTAN_QM305_START_ONLY() {
    WINSTAN_QM305_START_ONLY = TRUE;
    AI_STARTFACEANI(OTHER, S_THINK, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM305_Start_Only_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Start_Only_03_02");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Start_Only_03_03");
    DIA_WINSTAN_QM305_START_CHOICES();
}

func void DIA_WINSTAN_QM305_START_WHY() {
    WINSTAN_QM305_START_WHY = TRUE;
    AI_STARTFACEANI(OTHER, S_SURPRISE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM305_Start_Why_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Start_Why_03_02");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Start_Why_03_03");
    DIA_WINSTAN_QM305_START_CHOICES();
}

instance DIA_WINSTAN_QM305_FINISH(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_QM305_FINISH_CONDITION;
    INFORMATION = DIA_WINSTAN_QM305_FINISH_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I've got 'Nordmarians' Mastery'.";
}

func int DIA_WINSTAN_QM305_FINISH_CONDITION() {
    if ((LOG_GETSTATUS(MIS_QM305)) == (LOG_RUNNING)) {
        if (((NPC_HASITEMS(OTHER, 0x9172)) >= (1)) || ((NPC_HASITEMS(OTHER, 0x9173)) >= (1))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_QM305_FINISH_MONSTER() {
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Finish_03_06");
}

func void DIA_WINSTAN_QM305_FINISH_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM305_Finish_15_01");
    AI_STARTFACEANI(SELF, S_SURPRISE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Finish_03_02");
    if (((NPC_HASITEMS(OTHER, 0x9172)) >= (1)) && ((NPC_HASITEMS(OTHER, 0x9173)) >= (1))) {
        WINSTAN_QM305_FINISH = 3;
        B_GIVEINVITEMS(OTHER, SELF, 0x9172, 1);
        AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM305_Finish_15_03");
        B_GIVEINVITEMS(OTHER, SELF, 0x9173, 1);
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Finish_03_04");
        AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM305_Finish_15_05");
        DIA_WINSTAN_QM305_FINISH_MONSTER();
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Finish_03_07");
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Finish_03_08");
    };
    if ((NPC_HASITEMS(OTHER, 0x9173)) >= (1)) {
        WINSTAN_QM305_FINISH = 2;
        B_GIVEINVITEMS(OTHER, SELF, 0x9173, 1);
        AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM305_Finish_15_09");
        DIA_WINSTAN_QM305_FINISH_MONSTER();
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Finish_03_10");
    };
    if ((NPC_HASITEMS(OTHER, 0x9172)) >= (1)) {
        WINSTAN_QM305_FINISH = 1;
        B_GIVEINVITEMS(OTHER, SELF, 0x9172, 1);
        AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM305_Finish_15_11");
        AI_STARTFACEANI(SELF, S_DISGUST, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Finish_03_12");
        AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM305_Finish_15_13");
        AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Finish_03_14");
    };
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM305_Finish_03_15");
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM305_Finish_15_16");
    AI_PLAYANI(OTHER, T_GREETGRD);
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    if ((WINSTAN_QM305_FINISH) == (1)) {
        B_GIVEPLAYERXP(XP_QM305_FINISH_V1);
        CREATEINVITEMS(SELF, 0x859b, QM305_FINISH_V1);
        B_GIVEINVITEMS(SELF, OTHER, 0x859b, QM305_FINISH_V1);
        AI_LOGENTRY(TOPIC_QM305, LOG_QM305_FINISH_V1);
    };
    if ((WINSTAN_QM305_FINISH) == (2)) {
        B_GIVEPLAYERXP(XP_QM305_FINISH_V2);
        CREATEINVITEMS(SELF, 0x859b, QM305_FINISH_V2);
        B_GIVEINVITEMS(SELF, OTHER, 0x859b, QM305_FINISH_V2);
        AI_LOGENTRY(TOPIC_QM305, LOG_QM305_FINISH_V2);
    };
    if ((WINSTAN_QM305_FINISH) == (3)) {
        B_GIVEPLAYERXP(XP_QM305_FINISH_V3);
        CREATEINVITEMS(SELF, 0x859b, QM305_FINISH_V3);
        B_GIVEINVITEMS(SELF, OTHER, 0x859b, QM305_FINISH_V3);
        AI_LOGENTRY(TOPIC_QM305, LOG_QM305_FINISH_V3);
    };
    LOG_SETSTATUS(_@(MIS_QM305), TOPIC_QM305, LOG_SUCCESS);
    QM305_FINISH = TRUE;
    QM305_FINISH_DAY = WLD_GETDAY();
}

var int DIA_WINSTAN_QM305_FINISH_INFO.WINSTAN_QM305_FINISH = 0;
instance DIA_WINSTAN_KQ402_ARMOR(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_KQ402_ARMOR_CONDITION;
    INFORMATION = DIA_WINSTAN_KQ402_ARMOR_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "How would you rate our new equipment?";
}

func int DIA_WINSTAN_KQ402_ARMOR_CONDITION() {
    if (((LOG_GETSTATUS(MIS_KQ402)) == (LOG_RUNNING)) && ((KQ402_DECISION) == (1))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_KQ402_ARMOR_INFO() {
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_KQ402_Armor_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_KQ402_Armor_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_KQ402_Armor_03_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_KQ402_Armor_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_KQ402_Armor_03_05");
    AI_RESETFACEANI(SELF);
    AI_LOGENTRY(TOPIC_KQ402, LOG_KQ402_WINSTAN_ARMOR);
}

instance DIA_WINSTAN_QM401_PLAN(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_QM401_PLAN_CONDITION;
    INFORMATION = DIA_WINSTAN_QM401_PLAN_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_WINSTAN_QM401_PLAN_CONDITION() {
    if (((LOG_GETSTATUS(MIS_QM401)) == (LOG_RUNNING)) && ((QM401_BEATUPBERTO) == (2))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

var int WINSTAN_QM401_PLAN_CITY = 0;
var int WINSTAN_QM401_PLAN_ANYTIME = 0;
var int WINSTAN_QM401_PLAN_SALVI = 0;
func void DIA_WINSTAN_QM401_PLAN_NEXT() {
    MIL_6275_BERTO.AIVAR[96] = 1;
    B_STARTOTHERROUTINE(MIL_4001_OKTAV, "QM401_VIENYARD_PATROL");
    QM401_OKTAV_RTNCHECK = 8;
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_Plan_Next_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_Plan_Next_03_02");
    AI_RESETFACEANI(SELF);
    AI_TURNTONPC(SELF, MIL_4044_SALL);
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_Plan_Next_03_03");
    AI_FUNCTION(SELF, 0xf576);
    AI_TURNTONPC(SELF, HERO);
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_Plan_Next_03_04");
    INFO_CLEARCHOICES(0x107e0);
    AI_LOGENTRY(TOPIC_QM401, LOG_QM401_WINSTAN_PLAN);
}

func void DIA_WINSTAN_QM401_PLAN_CHOICES() {
    INFO_CLEARCHOICES(0x107e0);
    if ((((WINSTAN_QM401_PLAN_CITY) == (FALSE)) || ((WINSTAN_QM401_PLAN_ANYTIME) == (FALSE))) || ((WINSTAN_QM401_PLAN_SALVI) == (FALSE))) {
        if ((WINSTAN_QM401_PLAN_CITY) == (FALSE)) {
            INFO_ADDCHOICE(0x107e0, "The renegades will attack from the side of the city.", 0x107e8);
        };
        if ((WINSTAN_QM401_PLAN_ANYTIME) == (FALSE)) {
            INFO_ADDCHOICE(0x107e0, "An attack could happen at any time.", 0x107e9);
        };
        if ((WINSTAN_QM401_PLAN_SALVI) == (FALSE)) {
            INFO_ADDCHOICE(0x107e0, "Salvi has recruited a lot of new people.", 0x107ea);
        };
    };
    DIA_WINSTAN_QM401_PLAN_NEXT();
}

func void DIA_WINSTAN_QM401_PLAN_INFO() {
    B_STARTOTHERROUTINE(MIL_6275_BERTO, TOT);
    TELEPORTNPCTOWP(0xdbd5, MIL_6275_BERTO.WP);
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_Plan_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_Plan_03_02");
    DIA_WINSTAN_QM401_PLAN_CHOICES();
}

func void DIA_WINSTAN_QM401_PLAN_CITY() {
    WINSTAN_QM401_PLAN_CITY = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM401_Plan_City_15_01");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_Plan_City_03_02");
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_Plan_City_03_03");
    AI_RESETFACEANI(SELF);
    DIA_WINSTAN_QM401_PLAN_CHOICES();
}

func void DIA_WINSTAN_QM401_PLAN_ANYTIME() {
    WINSTAN_QM401_PLAN_ANYTIME = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM401_Plan_Anytime_15_01");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_Plan_Anytime_03_02");
    AI_RESETFACEANI(SELF);
    DIA_WINSTAN_QM401_PLAN_CHOICES();
}

func void DIA_WINSTAN_QM401_PLAN_SALVI() {
    WINSTAN_QM401_PLAN_SALVI = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM401_Plan_Salvi_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_Plan_Salvi_03_02");
    DIA_WINSTAN_QM401_PLAN_CHOICES();
}

instance DIA_WINSTAN_QM401_FARMERS(C_INFO) {
    NPC = 0xccd7;
    NR = 4;
    CONDITION = DIA_WINSTAN_QM401_FARMERS_CONDITION;
    INFORMATION = DIA_WINSTAN_QM401_FARMERS_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Why aren't the farmers helping us?";
}

func int DIA_WINSTAN_QM401_FARMERS_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_QM401)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x107e0))) && ((QM401_FIGHTWITHRENEGADESCHECK) == (0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_QM401_FARMERS_INFO() {
    AI_STARTFACEANI(OTHER, S_SURPRISE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM401_Farmers_15_01");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_Farmers_03_02");
    if (((SQ225_FINISHWAY) == (1)) || ((SQ225_FINISHWAY) == (2))) {
        AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_Farmers_03_03");
    };
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
}

instance DIA_WINSTAN_QM401_AFTERFIREPLACE(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_QM401_AFTERFIREPLACE_CONDITION;
    INFORMATION = DIA_WINSTAN_QM401_AFTERFIREPLACE_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_WINSTAN_QM401_AFTERFIREPLACE_CONDITION() {
    if (((LOG_GETSTATUS(MIS_QM401)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x105be))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_QM401_AFTERFIREPLACE_INFO() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_AfterFireplace_03_01");
    AI_RESETFACEANI(SELF);
}

instance DIA_WINSTAN_QM401_NEXTPLAN(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_QM401_NEXTPLAN_CONDITION;
    INFORMATION = DIA_WINSTAN_QM401_NEXTPLAN_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "What's your plan?";
}

func int DIA_WINSTAN_QM401_NEXTPLAN_CONDITION() {
    if (((LOG_GETSTATUS(MIS_QM401)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x107ee))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_QM401_NEXTPLAN_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM401_NextPlan_15_01");
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_NextPlan_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_NextPlan_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_NextPlan_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_NextPlan_03_05");
    INFO_CLEARCHOICES(0x107f1);
    INFO_ADDCHOICE(0x107f1, "I have to cut grass?", 0x107f5);
    INFO_ADDCHOICE(0x107f1, "Yes, sir!", 0x107f6);
}

func void DIA_WINSTAN_QM401_NEXTPLAN_NEXT() {
    AI_LOGENTRY(TOPIC_QM401, LOG_QM401_WINSTAN_FARN);
    INFO_CLEARCHOICES(0x107f1);
    AI_STOPPROCESSINFOS(SELF);
    CREATEINVITEMS(SELF, 0x8cd2, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x8cd2, 1);
    AI_FUNCTION(SELF, 0xf578);
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
}

func void DIA_WINSTAN_QM401_NEXTPLAN_GRASS() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM401_NextPlan_Grass_15_01");
    AI_STARTFACEANI(SELF, S_SURPRISE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_NextPlan_Grass_03_02");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_NextPlan_Grass_03_03");
    DIA_WINSTAN_QM401_NEXTPLAN_NEXT();
}

func void DIA_WINSTAN_QM401_NEXTPLAN_YESSIR() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM401_NextPlan_YesSir_15_01");
    AI_PLAYANI(OTHER, T_GREETGRD);
    AI_WAITTILLEND(SELF, OTHER);
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_NextPlan_YesSir_03_02");
    DIA_WINSTAN_QM401_NEXTPLAN_NEXT();
}

instance DIA_WINSTAN_QM401_AFTERWORK(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_QM401_AFTERWORK_CONDITION;
    INFORMATION = DIA_WINSTAN_QM401_AFTERWORK_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_WINSTAN_QM401_AFTERWORK_CONDITION() {
    if (((LOG_GETSTATUS(MIS_QM401)) == (LOG_RUNNING)) && ((QM401_FARN_COUNT) == (3))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_QM401_AFTERWORK_INFO() {
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_AfterWork_03_01");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_AfterWork_03_02");
    INFO_CLEARCHOICES(0x107f7);
    INFO_ADDCHOICE(0x107f7, "Which way was Duster supposed to go?", 0x107fa);
}

func void DIA_WINSTAN_QM401_AFTERWORK_DUSTER() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM401_AfterWork_Duster_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_AfterWork_Duster_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_AfterWork_Duster_03_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM401_AfterWork_Duster_15_04");
    AI_LOGENTRY(TOPIC_QM401, LOG_QM401_WINSTAN_AFTERWORK);
    INFO_CLEARCHOICES(0x107f7);
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0xf579);
}

instance DIA_WINSTAN_QM401_AFTERFIGHT(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_QM401_AFTERFIGHT_CONDITION;
    INFORMATION = DIA_WINSTAN_QM401_AFTERFIGHT_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_WINSTAN_QM401_AFTERFIGHT_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_QM401)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x13350))) && ((QM401_FIGHTWITHRENEGADESCHECK) == (2))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_QM401_AFTERFIGHT_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_AfterFight_03_01");
    if ((QM401_SOMEONEDIED()) == (TRUE)) {
        AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM401_AfterFight_15_02");
        AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_AfterFight_03_03");
    };
    B_GIVEPLAYERXP(XP_QM401_NOONEDIEDBONUS);
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_QM401_AfterFight_15_04");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_AfterFight_03_05");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_AfterFight_03_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_QM401_AfterFight_03_07");
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_QM401, LOG_QM401_WINSTAN_WONBATTLE);
}

instance DIA_WINSTAN_SQ503_FINALLY(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_SQ503_FINALLY_CONDITION;
    INFORMATION = DIA_WINSTAN_SQ503_FINALLY_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_WINSTAN_SQ503_FINALLY_CONDITION() {
    if ((LOG_GETSTATUS(MIS_SQ503)) == (LOG_RUNNING)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_SQ503_FINALLY_INFO() {
    if ((HERO.GUILD) == (GIL_SLD)) {
        AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_Finally_03_01");
    };
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_Finally_03_02");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_Finally_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_Finally_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_Finally_03_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_Finally_03_06");
    INFO_CLEARCHOICES(0x107fe);
    INFO_ADDCHOICE(0x107fe, "What am I supposed to do?", 0x10801);
}

func void DIA_WINSTAN_SQ503_FINALLY_WHAT() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_SQ503_Finally_What_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_Finally_What_03_02");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_Finally_What_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_Finally_What_03_04");
    CREATEINVITEMS(SELF, 0x9286, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x9286, 1);
    INFO_CLEARCHOICES(0x107fe);
    INFO_ADDCHOICE(0x107fe, "Let's not waste time. Let's go.", 0x10802);
    INFO_ADDCHOICE(0x107fe, "Cortez is to receive the terms of surrender?", 0x10803);
}

func void DIA_WINSTAN_SQ503_FINALLY_WHAT_GO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_SQ503_Finally_Go_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_Finally_Go_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_Finally_Go_03_03");
    INFO_CLEARCHOICES(0x107fe);
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_SQ503, LOG_SQ503_WINSTAN_PLAN);
}

func void DIA_WINSTAN_SQ503_FINALLY_WHAT_CORTEZ() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_SQ503_Finally_Cortez_15_01");
    AI_RESETFACEANI(OTHER);
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_Finally_Cortez_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_Finally_Cortez_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_Finally_Cortez_03_04");
    AI_RESETFACEANI(SELF);
}

instance DIA_WINSTAN_SQ503_AFTERCORTEZ(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_SQ503_AFTERCORTEZ_CONDITION;
    INFORMATION = DIA_WINSTAN_SQ503_AFTERCORTEZ_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_WINSTAN_SQ503_AFTERCORTEZ_CONDITION() {
    if ((LOG_GETSTATUS(MIS_SQ503)) == (LOG_RUNNING)) {
        if (((SQ503_HAVENDECISION) == (1)) || ((SQ503_FIGHTINARENA) == (2))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_SQ503_AFTERCORTEZ_NEXT() {
    AI_RESETFACEANI(OTHER);
    INFO_CLEARCHOICES(0x10804);
    INFO_ADDCHOICE(0x10804, "What's the next plan?", 0x1080a);
}

func void DIA_WINSTAN_SQ503_AFTERCORTEZ_INFO() {
    MUSIC_DISABLEOVERRIDE();
    if ((SQ503_HAVENDECISION) == (1)) {
        AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_AfterCortez_03_01");
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_AfterCortez_03_02");
        DIA_WINSTAN_SQ503_AFTERCORTEZ_NEXT();
    };
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_AfterCortez_03_03");
    INFO_CLEARCHOICES(0x10804);
    INFO_ADDCHOICE(0x10804, "It could have gone better...", 0x10808);
    INFO_ADDCHOICE(0x10804, "All according to plan.", 0x10809);
}

func void DIA_WINSTAN_SQ503_AFTERCORTEZ_BETTER() {
    AI_STARTFACEANI(OTHER, S_TIRED, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_SQ503_AfterCortez_Better_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_AfterCortez_Better_03_02");
    DIA_WINSTAN_SQ503_AFTERCORTEZ_NEXT();
}

func void DIA_WINSTAN_SQ503_AFTERCORTEZ_GOOD() {
    AI_STARTFACEANI(OTHER, S_SMUG, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_SQ503_AfterCortez_Good_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_AfterCortez_Good_03_02");
    DIA_WINSTAN_SQ503_AFTERCORTEZ_NEXT();
}

func void DIA_WINSTAN_SQ503_AFTERCORTEZ_GOOD_NEXTMOVE() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_SQ503_AfterCortez_NextMove_15_01");
    if ((SQ503_HAVENDECISION) == (1)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_AfterCortez_NextMove_03_02");
    };
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_AfterCortez_NextMove_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_AfterCortez_NextMove_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_SQ503_AfterCortez_NextMove_03_05");
    AI_LOGENTRY(TOPIC_SQ503, LOG_SQ503_WINSTANRAPORT);
    INFO_CLEARCHOICES(0x10804);
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_WINSTAN_PROMOTION_TIER1_QUESTION(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_PROMOTION_TIER1_QUESTION_CONDITION;
    INFORMATION = DIA_WINSTAN_PROMOTION_TIER1_QUESTION_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I hear you want me in your unit.";
}

func int DIA_WINSTAN_PROMOTION_TIER1_QUESTION_CONDITION() {
    if ((HERO.GUILD) == (GIL_MIL)) {
        if (((MARVIN_MILITIASPECIALIZATION) == (MILITIA_SPECIALIZATION_NONE)) && ((MARVIN_MILITIASPECIALIZATION_CANJOIN_FIGHTER) == (TRUE))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_PROMOTION_TIER1_QUESTION_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_Promotion_Tier1_Question_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Promotion_Tier1_Question_03_02");
}

instance DIA_WINSTAN_PROMOTION_TIER1_READY(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_PROMOTION_TIER1_READY_CONDITION;
    INFORMATION = DIA_WINSTAN_PROMOTION_TIER1_READY_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "I'm ready to join your unit.";
}

func int DIA_WINSTAN_PROMOTION_TIER1_READY_CONDITION() {
    if ((HERO.GUILD) == (GIL_MIL)) {
        if (NPC_KNOWSINFO(OTHER, 0x1080b)) {
            if (((MARVIN_MILITIASPECIALIZATION) == (MILITIA_SPECIALIZATION_NONE)) && ((MARVIN_MILITIASPECIALIZATION_CANJOIN_FIGHTER) == (TRUE))) {
                return TRUE;
            };
        };
    };
    return 0 /* !broken stack! */;
}

func void WINSTAN_ARWIDSPECIALIZATION_TIER1() {
    if ((ARWID_TIERARMOR) == (1)) {
        ARWID_TIERARMOR = 2;
        NPC_CHANGEARMOR(MIL_4017_ARWID, 0x8ab2);
        NPC_REMOVEINVITEMS(MIL_4017_ARWID, 0x8aad, 1);
        CREATEINVITEMS(MIL_4017_ARWID, 0x851a, 1);
    };
    ARWID_TIERARMOR = 1;
    NPC_CHANGEARMOR(MIL_4017_ARWID, 0x8aad);
    NPC_REMOVEINVITEMS(MIL_4017_ARWID, 0x8aa0, 1);
    CREATEINVITEMS(MIL_4017_ARWID, 0x8512, 1);
}

func void DIA_WINSTAN_PROMOTION_TIER1_READY_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_Promotion_Tier1_Ready_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Promotion_Tier1_Ready_03_02");
    if (((OTHER.HITCHANCE[1]) >= (40)) || ((OTHER.HITCHANCE[2]) >= (40))) {
        MARVIN_MILITIA_WHEREJOINED = 1;
        MARVIN_MILITIASPECIALIZATION = MILITIA_SPECIALIZATION_FIGHTER;
        SND_PLAY("LEVELUP");
        B_GIVEPLAYERXP(XP_MILITIA_PROMOTION_TIER2);
        AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Promotion_Tier1_Ready_03_03");
        B_STANDUP();
        B_USEFAKESCROLL();
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Promotion_Tier1_Ready_03_04");
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Promotion_Tier1_Ready_03_05");
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Promotion_Tier1_Ready_03_06");
        AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
        AI_OUTPUT(OTHER, SELF, "DIA_Winstan_Promotion_Tier1_Ready_15_07");
        AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Promotion_Tier1_Ready_03_08");
        AI_FUNCTION(SELF, 0x10810);
    };
    if ((OTHER.HITCHANCE[1]) > (OTHER.HITCHANCE[2])) {
        MARVIN_CURRENT1HLEVEL_WINSTAN = INTTOSTRING((40) - (HERO.HITCHANCE[1]));
        MARVIN_CURRENT1HLEVEL_WINSTAN = CONCATSTRINGS(MARVIN_CURRENT1HLEVEL_WINSTAN, PRINT_NEEDED1HLEVEL);
    };
    MARVIN_CURRENT2HLEVEL_WINSTAN = INTTOSTRING((40) - (HERO.HITCHANCE[2]));
    WINSTAN_CHECKSMARVIN2HLEVEL = CONCATSTRINGS(MARVIN_CURRENT2HLEVEL_WINSTAN, PRINT_NEEDED2HLEVEL);
    AI_PRINTSCREEN(WINSTAN_CHECKSMARVIN2HLEVEL, -(1), -(1), FONT_SCREEN, 3);
    AI_STARTFACEANI(SELF, S_DOUBT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Promotion_Tier1_Ready_03_09");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Promotion_Tier1_Ready_03_10");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
}

var string DIA_WINSTAN_PROMOTION_TIER1_READY_INFO.WINSTAN_CHECKSMARVIN1HLEVEL = "";
var string DIA_WINSTAN_PROMOTION_TIER1_READY_INFO.WINSTAN_CHECKSMARVIN2HLEVEL = "";
var string DIA_WINSTAN_PROMOTION_TIER1_READY_INFO.MARVIN_CURRENT1HLEVEL_WINSTAN = "";
var string DIA_WINSTAN_PROMOTION_TIER1_READY_INFO.MARVIN_CURRENT2HLEVEL_WINSTAN = "";
instance DIA_WINSTAN_PROMOTION_FINALTIER(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_PROMOTION_FINALTIER_CONDITION;
    INFORMATION = DIA_WINSTAN_PROMOTION_FINALTIER_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_WINSTAN_PROMOTION_FINALTIER_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x102f9)) && ((MARVIN_MILITIASPECIALIZATION) == (MILITIA_SPECIALIZATION_MASTERFIGHTER))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_PROMOTION_FINALTIER_INFO() {
    CREATEINVITEMS(SELF, 0x8ab2, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x8ab2, 1);
    AI_EQUIPARMOR(SELF, 0x8ab2);
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Promotion_FinalTier_03_01");
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_Promotion_FinalTier_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Promotion_FinalTier_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Promotion_FinalTier_03_04");
    AI_WAITTILLEND(OTHER, SELF);
    AI_EQUIPARMOR(OTHER, 0x8ab2);
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Promotion_FinalTier_03_05");
    AI_OUTPUT(OTHER, SELF, "DIA_Winstan_Promotion_FinalTier_15_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Promotion_FinalTier_03_07");
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, START);
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
}

instance DIA_WINSTAN_HELLO(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_HELLO_CONDITION;
    INFORMATION = DIA_WINSTAN_HELLO_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Who are you?";
}

func int DIA_WINSTAN_HELLO_CONDITION() {
    if (!(NPC_KNOWSINFO(OTHER, 0x107a8))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_HELLO_INFO() {
    B_SAY(OTHER, SELF, "$MARVIN_WhoAreYou");
    AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Hello_09_01");
}

instance DIA_WINSTAN_AMBIENT(C_INFO) {
    NPC = 0xccd7;
    NR = 1;
    CONDITION = DIA_WINSTAN_AMBIENT_CONDITION;
    INFORMATION = DIA_WINSTAN_AMBIENT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "How are you doing?";
}

func int DIA_WINSTAN_AMBIENT_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x10819)) || (NPC_KNOWSINFO(OTHER, 0x107a8))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_AMBIENT_INFO() {
    B_SAY(OTHER, SELF, "$MARVIN_WhatNew2");
    if ((OTHER.GUILD) == (GIL_MIL)) {
        if ((KAPITEL) == (2)) {
            AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Ambient_03_02");
        } else if ((KAPITEL) == (3)) {
            AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Ambient_03_03");
        } else if ((KAPITEL) == (4)) {
            AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Ambient_03_04");
        } else if ((KAPITEL) == (5)) {
            AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Ambient_03_05");
        };
    };
    if ((OTHER.GUILD) != (GIL_MIL)) {
        if ((KAPITEL) == (2)) {
            AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Ambient_03_06");
        } else if ((KAPITEL) == (3)) {
            AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Ambient_03_07");
        } else if ((KAPITEL) == (4)) {
            AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Ambient_03_08");
        } else if ((KAPITEL) == (5)) {
            AI_OUTPUT(SELF, OTHER, "DIA_Winstan_Ambient_03_09");
        };
    };
}

instance DIA_WINSTAN_PICKPOCKET(C_INFO) {
    NPC = 0xccd7;
    NR = 900;
    CONDITION = DIA_WINSTAN_PICKPOCKET_CONDITION;
    INFORMATION = DIA_WINSTAN_PICKPOCKET_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = PICKPOCKET_120;
}

func int DIA_WINSTAN_PICKPOCKET_CONDITION() {
    if (((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (1)) && ((SELF.AIVAR[6]) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_WINSTAN_PICKPOCKET_INFO() {
    INFO_CLEARCHOICES(0x1081f);
    INFO_ADDCHOICE(0x1081f, DIALOG_BACK, 0x10823);
    INFO_ADDCHOICE(0x1081f, DIALOG_PICKPOCKET, 0x10822);
}

func void DIA_WINSTAN_PICKPOCKET_DOIT() {
    if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (3)) {
        B_PICKPOCKET_AMBIENT_TIER_3();
        SELF.AIVAR[6] = TRUE;
        INFO_CLEARCHOICES(0x1081f);
    };
    AI_PLAYANI(HERO, T_CANNOTTAKE);
    PRINTSCREEN(PRINT_CANTPICKPOCKETTHISPERSON, -(1), -(1), FONT_SCREEN, 4);
    INFO_CLEARCHOICES(0x1081f);
}

func void DIA_WINSTAN_PICKPOCKET_BACK() {
    INFO_CLEARCHOICES(0x1081f);
}

