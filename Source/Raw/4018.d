instance DIA_KYLE_EXIT(C_INFO) {
    NPC = 0xdb76;
    NR = 999;
    CONDITION = DIA_KYLE_EXIT_CONDITION;
    INFORMATION = DIA_KYLE_EXIT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_ENDE;
}

func int DIA_KYLE_EXIT_CONDITION() {
    return TRUE;
}

func void DIA_KYLE_EXIT_INFO() {
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_KYLE_KQ407_WHATHAPPEND(C_INFO) {
    NPC = 0xdb76;
    NR = 1;
    CONDITION = DIA_KYLE_KQ407_WHATHAPPEND_CONDITION;
    INFORMATION = DIA_KYLE_KQ407_WHATHAPPEND_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Will you tell me what happened?";
}

func int DIA_KYLE_KQ407_WHATHAPPEND_CONDITION() {
    if (((LOG_GETSTATUS(MIS_KQ407)) == (LOG_RUNNING)) && ((KQ407_FARMERSATMEDIC) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_KQ407_WHATHAPPEND_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_KQ407_WhatHappend_15_01");
    AI_STARTFACEANI(SELF, S_FRIGHTENED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_KQ407_WhatHappend_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_KQ407_WhatHappend_03_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_KQ407_WhatHappend_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_KQ407_WhatHappend_03_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_KQ407_WhatHappend_03_06");
    AI_RESETFACEANI(OTHER);
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_KQ407_WhatHappend_15_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_KQ407_WhatHappend_03_08");
    AI_RESETFACEANI(SELF);
    AI_STOPPROCESSINFOS(SELF);
    if ((LOG_GETSTATUS(MIS_SQ125)) == (LOG_RUNNING)) {
        LOG_SETSTATUS(_@(MIS_SQ125), TOPIC_SQ125, LOG_FAILED);
        AI_LOGENTRY(TOPIC_SQ125, LOG_SQ125_FAILED);
    };
}

instance DIA_KYLE_SQ125_HELLO(C_INFO) {
    NPC = 0xdb76;
    NR = 1;
    CONDITION = DIA_KYLE_SQ125_HELLO_CONDITION;
    INFORMATION = DIA_KYLE_SQ125_HELLO_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Hey, what are you building here?";
}

func int DIA_KYLE_SQ125_HELLO_CONDITION() {
    if ((LOG_GETSTATUS(MIS_SQ125)) == (LOG_RUNNING)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_SQ125_HELLO_INFO() {
    ACH_6_KYLE = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_Hello_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Hello_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_Hello_15_03");
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Hello_03_04");
    AI_PLAYANI(SELF, R_SCRATCHHEAD);
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Hello_03_05");
    INFO_CLEARCHOICES(0x13174);
    INFO_ADDCHOICE(0x13174, "I'm new here, could you show me the farm?", 0x13179);
    INFO_ADDCHOICE(0x13174, "Your father sent me to find you something to do.", 0x13178);
}

func void DIA_KYLE_SQ125_HELLO_NEXT() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Hello_Next_03_01");
    INFO_CLEARCHOICES(0x13174);
    INFO_ADDCHOICE(0x13174, "I can't think of anything.", 0x1317f);
    if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_ALCHEMY)) >= (1)) {
        INFO_ADDCHOICE(0x13174, "Have you ever brewed a potion?", 0x1317d);
    };
    if ((C_CANIHUNTANYTHING(OTHER)) == (TRUE)) {
        INFO_ADDCHOICE(0x13174, "Would you like to go hunting together?", 0x1317b);
    };
    if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_SMITH)) >= (1)) {
        INFO_ADDCHOICE(0x13174, "I can teach you a little about blacksmithing.", 0x1317a);
    };
}

func void DIA_KYLE_SQ125_HELLO_FATHER() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_Hello_Father_15_01");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Hello_Father_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Hello_Father_03_03");
    DIA_KYLE_SQ125_HELLO_NEXT();
}

func void DIA_KYLE_SQ125_HELLO_FARM() {
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_Hello_Farm_15_01");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Hello_Farm_03_02");
    DIA_KYLE_SQ125_HELLO_NEXT();
}

func void DIA_KYLE_SQ125_HELLO_FARM_NEXT_SMITH() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_Hello_Smith_15_01");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Hello_Smith_03_02");
}

func void DIA_KYLE_SQ125_HELLO_FARM_NEXT_HUNT() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_Hello_Hunt_15_01");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Hello_Hunt_03_02");
}

var int KYLE_SQ125_WANTSALCHEMY = 0;
func void DIA_KYLE_SQ125_HELLO_FARM_NEXT_POTION() {
    SELF.AIVAR[15] = TRUE;
    KYLE_SQ125_WANTSALCHEMY = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_Hello_Potion_15_01");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Hello_Potion_03_02");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Hello_Potion_03_03");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    AI_LOGENTRY(TOPIC_SQ125, LOG_SQ125_KYLE_ALCHEMY);
    INFO_CLEARCHOICES(0x13174);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "SQ125_GUIDE_ALCHEMY");
}

var int KYLE_SQ125_WANTSMILL = 0;
func void DIA_KYLE_SQ125_HELLO_FARM_NEXT_NOIDEA() {
    SELF.AIVAR[15] = TRUE;
    KYLE_SQ125_WANTSMILL = TRUE;
    B_STARTOTHERROUTINE(BAU_6324_JORIS, "SQ125_WORK_WAIT");
    NPC_REFRESH(BAU_6324_JORIS);
    TELEPORTNPCTOWP(0xdb70, BAU_6324_JORIS.WP);
    AI_STARTFACEANI(OTHER, S_NOPE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_Hello_NoIdea_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Hello_NoIdea_03_02");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    AI_LOGENTRY(TOPIC_SQ125, LOG_SQ125_KYLE_MILL);
    INFO_CLEARCHOICES(0x13174);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "SQ125_GUIDE_MILL");
}

instance DIA_KYLE_SQ125_ALCHEMYTEACH(C_INFO) {
    NPC = 0xdb76;
    NR = 1;
    CONDITION = DIA_KYLE_SQ125_ALCHEMYTEACH_CONDITION;
    INFORMATION = DIA_KYLE_SQ125_ALCHEMYTEACH_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KYLE_SQ125_ALCHEMYTEACH_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_SQ125)) == (LOG_RUNNING)) && ((KYLE_SQ125_WANTSALCHEMY) == (TRUE))) && ((NPC_GETDISTTOWP(SELF, "PART6_HOUSE_LAB")) <= (300))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_SQ125_ALCHEMYTEACH_INFO() {
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AlchemyTeach_03_01");
    INFO_CLEARCHOICES(0x13180);
    INFO_ADDCHOICE(0x13180, "Try making an essence of magic.", 0x13185);
    INFO_ADDCHOICE(0x13180, "Try making an essence of healing.", 0x13184);
}

func void DIA_KYLE_SQ125_ALCHEMYTEACH_NEXT() {
    WLD_SENDTRIGGER("SQ125_MOVER_ALCHEMYSCRIPT");
    B_USEFAKESCROLL_MARVIN();
    AI_WAITTILLEND(SELF, OTHER);
    B_USEFAKESCROLL();
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AlchemyTeach_Next_03_01");
    AI_RESETFACEANI(SELF);
    INFO_CLEARCHOICES(0x13180);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "SQ125_ALCHEMY");
    AI_LOGENTRY(TOPIC_SQ125, LOG_SQ125_KYLE_READYALCHEMY);
}

func void DIA_KYLE_SQ125_ALCHEMYTEACH_HP() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_AlchemyTeach_HP_15_01");
    DIA_KYLE_SQ125_ALCHEMYTEACH_NEXT();
}

func void DIA_KYLE_SQ125_ALCHEMYTEACH_MANA() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_AlchemyTeach_Mana_15_01");
    DIA_KYLE_SQ125_ALCHEMYTEACH_NEXT();
}

instance DIA_KYLE_SQ125_AFTERALCHEMY(C_INFO) {
    NPC = 0xdb76;
    NR = 1;
    CONDITION = DIA_KYLE_SQ125_AFTERALCHEMY_CONDITION;
    INFORMATION = DIA_KYLE_SQ125_AFTERALCHEMY_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KYLE_SQ125_AFTERALCHEMY_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ125)) == (LOG_RUNNING)) && ((SQ125_ALCHEMYBOOM) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_SQ125_AFTERALCHEMY_INFO() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterAlchemy_03_01");
    INFO_CLEARCHOICES(0x13186);
    INFO_ADDCHOICE(0x13186, "Are you all right?", 0x13189);
}

func void DIA_KYLE_SQ125_AFTERALCHEMY_ALLRIGHT() {
    AI_STARTFACEANI(OTHER, S_TIRED, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_AfterAlchemy_Allright_15_01");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterAlchemy_Allright_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterAlchemy_Allright_03_03");
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterAlchemy_Allright_03_04");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    B_GIVEPLAYERXP(XP_SQ125_ALCHEMYBONUS);
    INFO_CLEARCHOICES(0x13186);
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0x1318a);
}

func void KYLE_SQ125_WASHYOURSELF() {
    FADESCREENTOBLACKF(1, 0x1318c, 1000);
}

var int KYLE_SQ125_FINISHWASH = 0;
func void KYLE_SQ125_WASHYOURSELF_FADESCREEN() {
    KYLE_SQ125_FINISHWASH = TRUE;
    B_STARTOTHERROUTINE(BAU_6342_KYLE, "SQ125_WASH");
    NPC_REFRESH(BAU_6342_KYLE);
    TELEPORTNPCTOWP(0xdb76, BAU_6342_KYLE.WP);
    TELEPORTNPCTOWP(0x71b, "PART6_PATH_90");
    SQ125_REFRESHKYLEFACE = FALSE;
    NPC_CHANGEFACE(BAU_6342_KYLE, FACE_N_KYLE);
    B_PASSTIME(1);
    HERO.AIVAR[4] = FALSE;
    FADESCREENFROMBLACK(1);
}

instance DIA_KYLE_SQ125_BORING(C_INFO) {
    NPC = 0xdb76;
    NR = 1;
    CONDITION = DIA_KYLE_SQ125_BORING_CONDITION;
    INFORMATION = DIA_KYLE_SQ125_BORING_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KYLE_SQ125_BORING_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_SQ125)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x13186))) && ((KYLE_SQ125_FINISHWASH) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_SQ125_BORING_INFO() {
    KYLE_SQ125_WANTSMILL = TRUE;
    B_STARTOTHERROUTINE(BAU_6324_JORIS, "SQ125_WORK_WAIT");
    NPC_REFRESH(BAU_6324_JORIS);
    TELEPORTNPCTOWP(0xdb70, BAU_6324_JORIS.WP);
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Boring_03_01");
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_SQ125, LOG_SQ125_KYLE_AFTERALCHEMY);
    NPC_EXCHANGEROUTINE(SELF, "SQ125_GUIDE_MILL");
}

instance DIA_KYLE_SQ125_MILL(C_INFO) {
    NPC = 0xdb76;
    NR = 1;
    CONDITION = DIA_KYLE_SQ125_MILL_CONDITION;
    INFORMATION = DIA_KYLE_SQ125_MILL_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KYLE_SQ125_MILL_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_SQ125)) == (LOG_RUNNING)) && ((KYLE_SQ125_WANTSMILL) == (TRUE))) && ((NPC_GETDISTTOWP(SELF, "PART6_PATH_55")) <= (500))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_SQ125_MILL_INFO() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Mill_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Mill_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Mill_03_03");
    INFO_CLEARCHOICES(0x13190);
    INFO_ADDCHOICE(0x13190, "Go ahead, I'll be right behind you.", 0x13195);
    INFO_ADDCHOICE(0x13190, "I won't stop you from trying, but I won't be the one picking you up later.", 0x13194);
}

func void DIA_KYLE_SQ125_MILL_NEXT() {
    AI_WAITTILLEND(SELF, OTHER);
    AI_LOGENTRY(TOPIC_SQ125, LOG_SQ125_KYLE_MILLIDEA);
    INFO_CLEARCHOICES(0x13190);
    AI_STOPPROCESSINFOS(SELF);
    AI_RESETFACEANI(SELF);
    NPC_EXCHANGEROUTINE(SELF, "SQ125_MILL");
}

func void DIA_KYLE_SQ125_MILL_TRY() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_Mill_Try_15_01");
    AI_STOPLOOKAT(SELF);
    AI_STARTFACEANI(SELF, S_FRIGHTENED, 1, -(1));
    AI_PLAYANI(SELF, T_SEARCH_SCARED);
    DIA_KYLE_SQ125_MILL_NEXT();
}

func void DIA_KYLE_SQ125_MILL_DOIT() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_Mill_DoIt_15_01");
    DIA_KYLE_SQ125_MILL_NEXT();
}

instance DIA_KYLE_SQ125_AFTERMILL(C_INFO) {
    NPC = 0xdb76;
    NR = 1;
    CONDITION = DIA_KYLE_SQ125_AFTERMILL_CONDITION;
    INFORMATION = DIA_KYLE_SQ125_AFTERMILL_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KYLE_SQ125_AFTERMILL_CONDITION() {
    if (((((LOG_GETSTATUS(MIS_SQ125)) == (LOG_RUNNING)) && ((NPC_GETDISTTOWP(SELF, "PART6_SQ125_MILL_04")) <= (500))) && (NPC_KNOWSINFO(OTHER, 0x13190))) && (NPC_ISINSTATE(SELF, 0xf09f))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_SQ125_AFTERMILL_INFO() {
    B_STARTOTHERROUTINE(BAU_6324_JORIS, START);
    NPC_REFRESH(BAU_6324_JORIS);
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterMill_03_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterMill_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterMill_03_03");
    if ((LOG_GETSTATUS(MIS_SQ125)) == (LOG_SUCCESS)) {
        AI_LOGENTRY(TOPIC_SQ125, LOG_SQ125_KYLE_FISHINGIDEA_V1);
    };
    AI_LOGENTRY(TOPIC_SQ125, LOG_SQ125_KYLE_FISHINGIDEA_V2);
    AI_STOPPROCESSINFOS(SELF);
    AI_RESETFACEANI(SELF);
    NPC_EXCHANGEROUTINE(SELF, "SQ125_GUIDE_RIVER");
    SQ125_REMOVEMONSTERS();
}

instance DIA_KYLE_SQ125_FISHING(C_INFO) {
    NPC = 0xdb76;
    NR = 1;
    CONDITION = DIA_KYLE_SQ125_FISHING_CONDITION;
    INFORMATION = DIA_KYLE_SQ125_FISHING_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KYLE_SQ125_FISHING_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_SQ125)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x13196))) && ((NPC_GETDISTTOWP(SELF, "PART6_SQ125_RIVER_KYLE")) <= (500))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_SQ125_FISHING_INFO() {
    WLD_SENDTRIGGER("SQ125_MOVER_FISHING");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Fishing_03_01");
    AI_SETWALKMODE(SELF, NPC_RUN);
    AI_GOTOWP(SELF, "PART6_SQ125_RIVER_KYLE_ROD");
    AI_WAITTILLEND(OTHER, SELF);
    AI_TURNTONPC(OTHER, SELF);
    AI_TAKEITEM(SELF, ITMI_FISHROD);
    AI_TURNTONPC(SELF, OTHER);
    AI_GOTONPC(SELF, OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Fishing_03_02");
    if ((NPC_HASITEMS(SELF, 0x905f)) == (0)) {
        CREATEINVITEMS(SELF, 0x905f, 1);
    };
    B_GIVEINVITEMS(SELF, OTHER, 0x905f, 1);
    AI_RESETFACEANI(SELF);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "SQ125_RIVER");
}

instance DIA_KYLE_SQ125_AFTERFISHING(C_INFO) {
    NPC = 0xdb76;
    NR = 1;
    CONDITION = DIA_KYLE_SQ125_AFTERFISHING_CONDITION;
    INFORMATION = DIA_KYLE_SQ125_AFTERFISHING_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KYLE_SQ125_AFTERFISHING_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ125)) == (LOG_RUNNING)) && ((SQ125_FINISHFISHING) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_SQ125_AFTERFISHING_INFO() {
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterFishing_03_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_AfterFishing_15_02");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterFishing_03_03");
    AI_RESETFACEANI(SELF);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "SQ125_GUIDE_TREE");
}

instance DIA_KYLE_SQ125_TREEIDEA(C_INFO) {
    NPC = 0xdb76;
    NR = 1;
    CONDITION = DIA_KYLE_SQ125_TREEIDEA_CONDITION;
    INFORMATION = DIA_KYLE_SQ125_TREEIDEA_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KYLE_SQ125_TREEIDEA_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_SQ125)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x1319c))) && ((NPC_GETDISTTOWP(SELF, "PART6_SQ125_TREE_WAIT")) <= (500))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_SQ125_TREEIDEA_INFO() {
    SELF.AIVAR[15] = FALSE;
    NPC_EXCHANGEROUTINE(SELF, "SQ125_TREE_WAIT");
    DIACAM_DISABLE();
    WLD_SENDTRIGGER("SQ125_TREE_01");
    TELEPORTNPCTOWP(0x71b, "PART6_PATH_41");
    TELEPORTNPCTOWP(0x717, "PART6_SQ125_TREE_WAIT");
    B_STANDUP();
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_TreeIdea_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_TreeIdea_03_02");
    INFO_CLEARCHOICES(0x1319f);
    INFO_ADDCHOICE(0x1319f, "Why do you care so much about climbing?", 0x131a3);
    INFO_ADDCHOICE(0x1319f, "You want me to show you how to climb a tree?", 0x131a2);
}

func void DIA_KYLE_SQ125_TREEIDEA_TREE() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_TreeIdea_Tree_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_TreeIdea_Tree_03_02");
    AI_STARTFACEANI(OTHER, S_SERIOUS, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_TreeIdea_Tree_15_03");
    INFO_CLEARCHOICES(0x1319f);
    INFO_ADDCHOICE(0x1319f, "Okay, watch how it's done.", 0x131a4);
}

func void DIA_KYLE_SQ125_TREEIDEA_WHY() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_TreeIdea_Why_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_TreeIdea_Why_03_02");
    AI_RESETFACEANI(OTHER);
    INFO_CLEARCHOICES(0x1319f);
    INFO_ADDCHOICE(0x1319f, "Okay, watch how it's done.", 0x131a4);
}

func void DIA_KYLE_SQ125_TREEIDEA_SURE() {
    SQ125_CLIMBINGTREE = 1;
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_TreeIdea_Sure_15_01");
    AI_WAITTILLEND(SELF, OTHER);
    AI_PLAYANI(OTHER, "R_STRETCH_RANDOM_01");
    INFO_CLEARCHOICES(0x1319f);
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_SQ125, LOG_SQ125_KYLE_TREEIDEA);
    AI_FUNCTION(SELF, 0xf2bc);
}

instance DIA_KYLE_SQ125_YOURTURN(C_INFO) {
    NPC = 0xdb76;
    NR = 1;
    CONDITION = DIA_KYLE_SQ125_YOURTURN_CONDITION;
    INFORMATION = DIA_KYLE_SQ125_YOURTURN_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Your turn.";
}

func int DIA_KYLE_SQ125_YOURTURN_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ125)) == (LOG_RUNNING)) && ((SQ125_CLIMBINGTREE) == (2))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_SQ125_YOURTURN_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_YourTurn_15_01");
    AI_WAITTILLEND(SELF, OTHER);
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0xf2bf);
}

instance DIA_KYLE_SQ125_TREE_CHOICE(C_INFO) {
    NPC = 0xdb76;
    NR = 1;
    CONDITION = DIA_KYLE_SQ125_TREE_CHOICE_CONDITION;
    INFORMATION = DIA_KYLE_SQ125_TREE_CHOICE_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KYLE_SQ125_TREE_CHOICE_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ125)) == (LOG_RUNNING)) && ((SQ125_CLIMBINGTREE) == (3))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_SQ125_TREE_CHOICE_INFO() {
    AI_PLAYANI(OTHER, "T_FACEPALM");
    AI_STARTFACEANI(OTHER, S_DISGUST, 1, -(1));
    INFO_CLEARCHOICES(0x131a8);
    INFO_ADDCHOICE(0x131a8, "I've had enough of you. You're on your own.", 0x131ab);
    INFO_ADDCHOICE(0x131a8, "Don't go anywhere, I'll look for something.", 0x131ac);
}

func void DIA_KYLE_SQ125_TREE_CHOICE_ENOUGH() {
    SQ125_HELPINGKYLE_WAY = 3;
    AI_STARTFACEANI(OTHER, S_ANGRY, 1, -(1));
    AI_SETWALKMODE(OTHER, NPC_RUN);
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_Tree_Choice_Enough_15_01");
    AI_WAITTILLEND(SELF, OTHER);
    AI_TURNAWAY(OTHER, SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_Tree_Choice_Enough_03_02");
    AI_WAITTILLEND(OTHER, SELF);
    AI_GOTOWP(OTHER, "PART6_PATH_42");
    INFO_CLEARCHOICES(0x131a8);
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_SQ125, LOG_SQ125_KYLE_DECISION_V1);
    AI_FUNCTION(SELF, 0xf2c3);
    AI_RESETFACEANI(OTHER);
}

func void DIA_KYLE_SQ125_TREE_CHOICE_SEARCH() {
    SQ125_TRYTOHELPKYLE();
    AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_Tree_Choice_Search_15_01");
    INFO_CLEARCHOICES(0x131a8);
    AI_WAITTILLEND(SELF, OTHER);
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_SQ125, LOG_SQ125_KYLE_DECISION_V2);
    AI_FUNCTION(SELF, 0xf2c3);
    AI_RESETFACEANI(OTHER);
}

instance DIA_KYLE_SQ125_AFTERTREE(C_INFO) {
    NPC = 0xdb76;
    NR = 1;
    CONDITION = DIA_KYLE_SQ125_AFTERTREE_CONDITION;
    INFORMATION = DIA_KYLE_SQ125_AFTERTREE_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KYLE_SQ125_AFTERTREE_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ125)) == (LOG_RUNNING)) && ((SQ125_HELPINGKYLE) == (2))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_SQ125_AFTERTREE_INFO() {
    AI_RESETFACEANI(OTHER);
    if ((SQ125_HELPINGKYLE_WAY) == (2)) {
        AI_STARTFACEANI(SELF, S_SAD, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterTree_03_01");
        AI_OUTPUT(OTHER, SELF, "DIA_Kyle_SQ125_AfterTree_15_02");
        AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterTree_03_03");
        AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterTree_03_04");
        AI_LOGENTRY(TOPIC_SQ125, LOG_SQ125_KYLE_AFTERTREE_V1);
        NPC_EXCHANGEROUTINE(SELF, "SQ125_TIRED");
    };
    if ((SQ125_HELPINGKYLE_WAY) == (1)) {
        AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterTree_03_05");
        AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterTree_03_06");
        AI_OUTPUT(SELF, OTHER, "DIA_Kyle_SQ125_AfterTree_03_07");
        AI_LOGENTRY(TOPIC_SQ125, LOG_SQ125_KYLE_AFTERTREE_V2);
        NPC_EXCHANGEROUTINE(SELF, "SQ125_AFTERQUEST");
    };
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_KYLE_SQ125_MAD(C_INFO) {
    NPC = 0xdb76;
    NR = 1;
    CONDITION = DIA_KYLE_SQ125_MAD_CONDITION;
    INFORMATION = DIA_KYLE_SQ125_MAD_INFO;
    PERMANENT = TRUE;
    IMPORTANT = TRUE;
}

func int DIA_KYLE_SQ125_MAD_CONDITION() {
    if (((((LOG_GETSTATUS(MIS_SQ125)) == (LOG_SUCCESS)) && ((SQ125_HELPINGKYLE_WAY) == (3))) && (NPC_ISINSTATE(SELF, 0xf09f))) && ((KAPITEL) < (5))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_SQ125_MAD_INFO() {
    DIA_IMBUSY_ANGRY();
}

instance DIA_KYLE_PICKPOCKET(C_INFO) {
    NPC = 0xdb76;
    NR = 900;
    CONDITION = DIA_KYLE_PICKPOCKET_CONDITION;
    INFORMATION = DIA_KYLE_PICKPOCKET_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = PICKPOCKET_40;
}

func int DIA_KYLE_PICKPOCKET_CONDITION() {
    if (((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (1)) && ((SELF.AIVAR[6]) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KYLE_PICKPOCKET_INFO() {
    INFO_CLEARCHOICES(0x131b3);
    INFO_ADDCHOICE(0x131b3, DIALOG_BACK, 0x131b7);
    INFO_ADDCHOICE(0x131b3, DIALOG_PICKPOCKET, 0x131b6);
}

func void DIA_KYLE_PICKPOCKET_DOIT() {
    if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (1)) {
        B_PICKPOCKET_AMBIENT_TIER_1();
        SELF.AIVAR[6] = TRUE;
        INFO_CLEARCHOICES(0x131b3);
    };
    AI_PLAYANI(HERO, T_CANNOTTAKE);
    PRINTSCREEN(PRINT_CANTPICKPOCKETTHISPERSON, -(1), -(1), FONT_SCREEN, 4);
    INFO_CLEARCHOICES(0x131b3);
}

func void DIA_KYLE_PICKPOCKET_BACK() {
    INFO_CLEARCHOICES(0x131b3);
}

