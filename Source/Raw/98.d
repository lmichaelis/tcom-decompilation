func void CATINV_DELETELISTSORTFROMPOOL(var int LIST, var int PURGE) {
    if (CALL_BEGIN(CALL)) {
        CALL_PTRPARAM(_@(ONE));
        CALL__THISCALL(_@(LIST), ZCLISTSORT_OCITEM____SCALAR_DELETING_DESTRUCTOR);
        CALL = CALL_END();
    };
    if (PURGE) {
        LIST_DESTROYS(LIST);
    };
    L = _^(LIST);
    L.NEXT = 0;
}

const int CATINV_DELETELISTSORTFROMPOOL.CALL = 0;
const int CATINV_DELETELISTSORTFROMPOOL.ONE = -1;
instance CATINV_DELETELISTSORTFROMPOOL.L(ZCLISTSORT)
func int CATINV_GETCATID(var int OFFSET) {
    if (!(OFFSET)) {
        return 0;
    };
    OFFSET += (OFFSET) > (MEM_READINT(INVCATORDER));
    REPEAT(I, (INV_CAT_MAX) + (1));
    if ((MEM_READINTARRAY(INVCATORDER, I)) == ((OFFSET) - (1))) {
        return I;
    };
    END;
    return 0;
}

var int CATINV_GETCATID.I = 0;
func int CATINV_SUPPORTCAT(var int CONTAINER) {
    if (!(CATINV_G1MODE)) {
        return TRUE;
    };
    CON = _^(CONTAINER);
    return CON.RIGHT;
}

instance CATINV_SUPPORTCAT.CON(OCITEMCONTAINER)
func int CATINV_RESET(var int CONTAINER) {
    CONTAINER_VTBL = MEM_READINT(CONTAINER);
    if ((CONTAINER_VTBL) == (OCNPCINVENTORY___VFTABLE)) {
        NPCINV = _^(CONTAINER);
        if ((NPCINV._OCITEMCONTAINER_CONTENTS) != (_@(NPCINV.INVENTORY_COMPARE))) {
            CATINV_DELETELISTSORTFROMPOOL(NPCINV._OCITEMCONTAINER_CONTENTS, 1);
            NPCINV._OCITEMCONTAINER_CONTENTS = _@(NPCINV.INVENTORY_COMPARE);
        };
    };
    if ((CONTAINER_VTBL) == (OCSTEALCONTAINER___VFTABLE)) {
        if (CALL_BEGIN(CALL)) {
            CALL__THISCALL(_@(CONTAINER), OCSTEALCONTAINER__CREATELIST);
            CALL = CALL_END();
        };
    };
    if ((CONTAINER_VTBL) == (OCNPCCONTAINER___VFTABLE)) {
        NPCCON = _^(CONTAINER);
        L = _^(NPCCON.CONTENTS);
        if (L.NEXT) {
            CATINV_DELETELISTSORTFROMPOOL(L.NEXT, 1);
            L.NEXT = 0;
        };
        if (CALL_BEGIN(CALL2)) {
            CALL__THISCALL(_@(CONTAINER), OCNPCCONTAINER__CREATELIST);
            CALL2 = CALL_END();
        };
    };
    if ((CONTAINER_VTBL) == (OCITEMCONTAINER___VFTABLE)) {
        if (_CATINV_BACKUPLIST) {
            ITMCON = _^(CONTAINER);
            CATINV_DELETELISTSORTFROMPOOL(ITMCON.CONTENTS, 1);
            ITMCON.CONTENTS = _CATINV_BACKUPLIST;
            _CATINV_BACKUPLIST = 0;
        };
    };
    return CONTAINER_VTBL;
}

var int CATINV_RESET.CONTAINER_VTBL = 0;
instance CATINV_RESET.NPCINV(OCNPCINVENTORY)
const int CATINV_RESET.CALL = 0;
instance CATINV_RESET.NPCCON(OCITEMCONTAINER)
instance CATINV_RESET.L(ZCLISTSORT)
const int CATINV_RESET.CALL2 = 0;
instance CATINV_RESET.ITMCON(OCITEMCONTAINER)
func void CATINV_MANIPULATECREATELIST() {
    ITM = _^(ECX);
    if (((ITM.MAINFLAG) == (ITEM_KAT_ARMOR)) && (!(CATINV_SP18ARMOR))) {
        EAX = 1;
    };
    if (CATINV_G1MODE) {
        EAX = 0;
    };
    if (!(CATINV_ACTIVECATEGORY)) {
        EAX = 0;
    };
    if ((ITM.MAINFLAG) & (MEM_READSTATARR(INV_CAT_GROUPS[0], CATINV_GETCATID(CATINV_ACTIVECATEGORY)))) {
        EAX = 0;
    };
    EAX = 1;
}

instance CATINV_MANIPULATECREATELIST.ITM(C_ITEM)
func void CATINV_RESETOFFSET(var int CONTAINER) {
    CON = _^(CONTAINER);
    CON.SELECTEDITEM -= CON.OFFSET;
    CON.OFFSET = 0;
}

instance CATINV_RESETOFFSET.CON(OCITEMCONTAINER)
func void CATINV_SETSELECTIONFIRST(var int CONTAINER) {
    CATINV_RESETOFFSET(CONTAINER);
    CON = _^(CONTAINER);
    CON.SELECTEDITEM = 0;
}

instance CATINV_SETSELECTIONFIRST.CON(OCITEMCONTAINER)
func void CATINV_SETMAXOFFSET(var int CONTAINER, var int SELLASTITEM) {
    CON = _^(CONTAINER);
    CONTENTS = CON.CONTENTS;
    if (CALL_BEGIN(CALL)) {
        CALL_PUTRETVALTO(_@(NUMITEMS));
        CALL__THISCALL(_@(CONTENTS), ZCLISTSORT_OCITEM___GETNUMINLIST);
        CALL = CALL_END();
    };
    NUMROWS = (((NUMITEMS) - (1)) / (CON.MAXSLOTSCOL)) + (1);
    CON.OFFSET = ((NUMROWS) - (CON.MAXSLOTSROW)) * (CON.MAXSLOTSCOL);
    if ((CON.OFFSET) < (0)) {
        CON.OFFSET = 0;
    };
    if (SELLASTITEM) {
        CON.SELECTEDITEM = (NUMITEMS) - (1);
    };
    CON.SELECTEDITEM += CON.OFFSET;
}

instance CATINV_SETMAXOFFSET.CON(OCITEMCONTAINER)
var int CATINV_SETMAXOFFSET.NUMITEMS = 0;
var int CATINV_SETMAXOFFSET.CONTENTS = 0;
const int CATINV_SETMAXOFFSET.CALL = 0;
var int CATINV_SETMAXOFFSET.NUMROWS = 0;
func void CATINV_SETSELECTIONLAST(var int CONTAINER) {
    CATINV_SETMAXOFFSET(CONTAINER, TRUE);
}

func void CATINV_UPDATE(var int CONTAINER) {
    CONTAINER_VTBL = CATINV_RESET(CONTAINER);
    if (!(CATINV_ACTIVECATEGORY)) {
        return;
    };
    if ((CONTAINER_VTBL) == (OCNPCINVENTORY___VFTABLE)) {
        NPCINV = _^(CONTAINER);
        NPCINV._OCITEMCONTAINER_CONTENTS = LIST_CREATES(0);
        LIST0 = _^(NPCINV._OCITEMCONTAINER_CONTENTS);
        LIST0.COMPAREFUNC = NPCINV.INVENTORY_COMPARE;
        _CATINV_CURRENTLIST = NPCINV._OCITEMCONTAINER_CONTENTS;
        if (NPCINV.INVENTORY_NEXT) {
            LIST_FORFS(NPCINV.INVENTORY_NEXT, 0x51a9);
        };
    };
    if ((CONTAINER_VTBL) == (OCITEMCONTAINER___VFTABLE)) {
        if (CATINV_G1MODE) {
            return;
        };
        ITMCON = _^(CONTAINER);
        if (_CATINV_BACKUPLIST) {
            CATINV_DELETELISTSORTFROMPOOL(_CATINV_BACKUPLIST, 1);
        };
        _CATINV_BACKUPLIST = ITMCON.CONTENTS;
        BACKUPLIST = _^(_CATINV_BACKUPLIST);
        ITMCON.CONTENTS = LIST_CREATES(0);
        LIST = _^(ITMCON.CONTENTS);
        LIST.COMPAREFUNC = BACKUPLIST.COMPAREFUNC;
        _CATINV_CURRENTLIST = ITMCON.CONTENTS;
        if (BACKUPLIST.NEXT) {
            LIST_FORFS(BACKUPLIST.NEXT, 0x51a9);
        };
    };
}

var int CATINV_UPDATE.CONTAINER_VTBL = 0;
instance CATINV_UPDATE.NPCINV(OCNPCINVENTORY)
instance CATINV_UPDATE.LIST0(ZCLISTSORT)
instance CATINV_UPDATE.ITMCON(OCITEMCONTAINER)
instance CATINV_UPDATE.BACKUPLIST(ZCLISTSORT)
instance CATINV_UPDATE.LIST(ZCLISTSORT)
func void CATINV_ADDITEM(var int LISTPTR) {
    L = _^(LISTPTR);
    ITM = _^(L.DATA);
    if ((ITM.MAINFLAG) & (MEM_READSTATARR(INV_CAT_GROUPS[0], CATINV_GETCATID(CATINV_ACTIVECATEGORY)))) {
        LIST_ADDS(_CATINV_CURRENTLIST, L.DATA);
    };
}

instance CATINV_ADDITEM.L(ZCLISTSORT)
instance CATINV_ADDITEM.ITM(C_ITEM)
func void CATINV_UPDATEALL() {
    LIST = MEM_READINT(S_OPENCONTAINERS_NEXT);
    WHILE(LIST);
    L = _^(LIST);
    CATINV_UPDATE(L.DATA);
    if (CATINV_SUPPORTCAT(L.DATA)) {
        CATINV_RESETOFFSET(L.DATA);
    };
    LIST = L.NEXT;
    END;
}

var int CATINV_UPDATEALL.LIST = 0;
instance CATINV_UPDATEALL.L(ZCLIST)
func int CATINV_SETCATEGORY(var int POS) {
    INVNEWCATEGORY = POS;
    if ((INVNEWCATEGORY) < (CATINV_G1MODE)) {
        INVNEWCATEGORY = CATINV_G1MODE;
    };
    if ((INVNEWCATEGORY) >= (INV_CAT_MAX)) {
        INVNEWCATEGORY = (INV_CAT_MAX) - (1);
    };
    if ((INVNEWCATEGORY) == (CATINV_ACTIVECATEGORY)) {
        return FALSE;
    };
    CATINV_ACTIVECATEGORY = INVNEWCATEGORY;
    CATINV_UPDATEALL();
    return TRUE;
}

var int CATINV_SETCATEGORY.INVNEWCATEGORY = 0;
func int CATINV_SHIFTCATEGORY(var int OFFSET) {
    return CATINV_SETCATEGORY((CATINV_ACTIVECATEGORY) + (OFFSET));
}

func int CATINV_SETCATEGORYFIRST() {
    return CATINV_SETCATEGORY(CATINV_G1MODE);
}

func int CATINV_SETCATEGORYLAST() {
    return CATINV_SETCATEGORY((INV_CAT_MAX) - (1));
}

func void CATINV_OPEN() {
    CONTAINER = _^(ECX);
    if ((CONTAINER.VTBL) != (OCNPCINVENTORY___VFTABLE)) {
        if (!(CATINV_G1MODE)) {
            CATINV_SETCATEGORYFIRST();
        };
        CATINV_SETSELECTIONFIRST(ECX);
        HER = HLP_GETNPC(0x71b);
        CATINV_SETSELECTIONFIRST(_@(HER.INVENTORY2_VTBL));
    };
    CATINV_UPDATE(ECX);
}

instance CATINV_OPEN.CONTAINER(OCITEMCONTAINER)
instance CATINV_OPEN.HER(OCNPC)
func void CATINV_CLOSE() {
    if (HLP_ISVALIDNPC(HERO)) {
        I = CATINV_RESET(ESI);
    };
}

var int CATINV_CLOSE.I = 0;
