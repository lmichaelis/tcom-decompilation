var int OLDDOG_POINTS = 0;
var int OLDDOG_CANEATTODAY = 0;
var int OLDDOG_COUNTER = 0;
var int OLDDOG_COUNTERLOG = 0;
var int OLDDOG_HAPPYDOGLOG = 0;
var int OLDDOG_QUESTFINISHLOG = 0;
var int OLDDOG_GOBBOBONE = 0;
var int OLDDOG_FISH = 0;
var int OLDDOG_BACON = 0;
var int OLDDOG_SAUSAGE = 0;
var int OLDDOG_ROASTEDRATMEAT = 0;
var int OLDDOG_SKELETONBONE = 0;
var int OLDDOG_ROTTENFISH = 0;
var int OLDDOG_RATMEATRAW = 0;
var int OLDDOG_MEATBUG = 0;
var int OLDDOG_CRABRAWMEAT = 0;
var int OLDDOG_SHADOWRAWMEAT = 0;
var int OLDDOG_WOLFRAWMEAT = 0;
var int OLDDOG_WOLFMEAT = 0;
var int OLDDOG_MEATBUG_FRIED = 0;
instance DIA_OLDDOG_EXIT(C_INFO) {
    NPC = 0xcf48;
    NR = 999;
    CONDITION = DIA_OLDDOG_EXIT_CONDITION;
    INFORMATION = DIA_OLDDOG_EXIT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_ENDE;
}

func int DIA_OLDDOG_EXIT_CONDITION() {
    return TRUE;
}

func void DIA_OLDDOG_EXIT_INFO() {
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_OLDDOG_WOOF(C_INFO) {
    NPC = 0xcf48;
    NR = 1;
    CONDITION = DIA_OLDDOG_WOOF_CONDITION;
    INFORMATION = DIA_OLDDOG_WOOF_INFO;
    PERMANENT = TRUE;
    IMPORTANT = TRUE;
}

func int DIA_OLDDOG_WOOF_CONDITION() {
    if (NPC_ISINSTATE(SELF, 0xf09f)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OLDDOG_WOOF_DIALOGUE() {
    AI_OUTPUT(SELF, OTHER, "DIA_OldDog_Woof_03_01");
}

func void DIA_OLDDOG_WOOF_INFO() {
    DIA_OLDDOG_WOOF_DIALOGUE();
    if ((LOG_GETSTATUS(MIS_SQ231)) == (LOG_RUNNING)) {
        if ((OLDDOG_CANEATTODAY) != (WLD_GETDAY())) {
            OLDDOG_CANEATTODAY = WLD_GETDAY();
            OLDDOG_COUNTER = 0;
            PRINTD("Punty psa wyzerowane");
        };
    };
}

instance DIA_OLDDOG_TRYPET(C_INFO) {
    NPC = 0xcf48;
    NR = 1;
    CONDITION = DIA_OLDDOG_TRYPET_CONDITION;
    INFORMATION = DIA_OLDDOG_TRYPET_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "(Try to pet)";
}

func int DIA_OLDDOG_TRYPET_CONDITION() {
    return TRUE;
}

func void DIA_OLDDOG_TRYPET_INFO() {
    AI_STOPLOOKAT(SELF);
    AI_STOPLOOKAT(OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_WAITTILLEND(SELF, OTHER);
    AI_STANDUP(SELF);
    AI_PLAYANIBS(SELF, T_SIT_2_STAND, BS_STAND);
    AI_TURNTONPC(SELF, OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_TURNTONPC(OTHER, SELF);
    AI_SETWALKMODE(SELF, NPC_WALK);
    AI_GOTONPC(SELF, OTHER);
    AI_WAIT(SELF, 0x3dcccccd);
    AI_PLAYANIBS(SELF, T_WARN, BS_STAND);
    OLDDOG_CANEATTODAY = WLD_GETDAY();
    LOG_CREATETOPIC(TOPIC_SQ231, LOG_MISSION);
    LOG_SETSTATUS(_@(MIS_SQ231), TOPIC_SQ231, LOG_RUNNING);
    AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_START);
}

func void DIA_OLDDOG_DOGISFULL() {
    AI_OUTPUT(OTHER, SELF, "DIA_OldDog_ChooseFood_15_00");
    AI_OUTPUT(OTHER, SELF, "DIA_OldDog_ChooseFood_15_01");
    if ((OLDDOG_COUNTERLOG) == (FALSE)) {
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_STOPH);
        OLDDOG_COUNTERLOG = TRUE;
    };
    AI_WAITTILLEND(SELF, OTHER);
    AI_STOPPROCESSINFOS(SELF);
}

func void DIA_OLDDOG_CHOOSEFOOD_CHOICES() {
    INFO_CLEARCHOICES(0x11db6);
    INFO_ADDCHOICE(0x11db6, "I don't have any idea.", 0x11dba);
    if ((NPC_HASITEMS(OTHER, 0x8452)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give goblin bone)", 0x11dbc);
    };
    if ((NPC_HASITEMS(OTHER, 0x84b4)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give raw fish)", 0x11dbd);
    };
    if ((NPC_HASITEMS(OTHER, 0x84b0)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give ham)", 0x11dbe);
    };
    if ((NPC_HASITEMS(OTHER, 0x84ba)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give sausage)", 0x11dbf);
    };
    if (((NPC_HASITEMS(OTHER, 0x8453)) >= (1)) && ((OLDDOG_SKELETONBONE) == (FALSE))) {
        INFO_ADDCHOICE(0x11db6, "(Give skeleton bone)", 0x11dc1);
    };
    if (((NPC_HASITEMS(OTHER, 0x8e31)) >= (1)) && ((OLDDOG_ROTTENFISH) == (FALSE))) {
        INFO_ADDCHOICE(0x11db6, "(Give rotten fish)", 0x11dc2);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e39)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give fried boar meat)", 0x11de4);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e37)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give raw boar meat)", 0x11de2);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e3d)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give fried sheep meet)", 0x11de0);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e3b)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give raw sheep meat)", 0x11dde);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e41)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give fried molerat meat)", 0x11ddc);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e3f)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give raw molerat meat)", 0x11dda);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e49)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give fried shadowbeast meat)", 0x11dd8);
    };
    if (((NPC_HASITEMS(OTHER, 0x8e47)) >= (1)) && ((OLDDOG_SHADOWRAWMEAT) == (FALSE))) {
        INFO_ADDCHOICE(0x11db6, "(Give raw shadowbeast meat)", 0x11dd7);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e4d)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give fried scavenger meat)", 0x11dd5);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e4b)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give raw scavenger meat)", 0x11dd3);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e51)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give fried troll meat)", 0x11dd1);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e4f)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give raw troll meat)", 0x11dcf);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e55)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give fried bear meat)", 0x11dcd);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e53)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give raw bear meat)", 0x11dcb);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e59)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give fried crab pincers)", 0x11dc9);
    };
    if (((NPC_HASITEMS(OTHER, 0x8e57)) >= (1)) && ((OLDDOG_CRABRAWMEAT) == (FALSE))) {
        INFO_ADDCHOICE(0x11db6, "(Give crab pincers)", 0x11dc8);
    };
    if (((NPC_HASITEMS(OTHER, 0x8e45)) >= (1)) && ((OLDDOG_WOLFMEAT) == (FALSE))) {
        INFO_ADDCHOICE(0x11db6, "(Give fried wolf meat)", 0x11dc7);
    };
    if (((NPC_HASITEMS(OTHER, 0x8e43)) >= (1)) && ((OLDDOG_WOLFRAWMEAT) == (FALSE))) {
        INFO_ADDCHOICE(0x11db6, "(Give raw wolf meat)", 0x11dc6);
    };
    if ((NPC_HASITEMS(OTHER, 0x8e35)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give fried rat meat)", 0x11dc0);
    };
    if (((NPC_HASITEMS(OTHER, 0x8e33)) >= (1)) && ((OLDDOG_RATMEATRAW) == (FALSE))) {
        INFO_ADDCHOICE(0x11db6, "(Give raw rat meat)", 0x11dc3);
    };
    if ((NPC_HASITEMS(OTHER, 0x8435)) >= (1)) {
        INFO_ADDCHOICE(0x11db6, "(Give fried insect meat)", 0x11dc5);
    };
    if (((NPC_HASITEMS(OTHER, 0x8433)) >= (1)) && ((OLDDOG_MEATBUG) == (FALSE))) {
        INFO_ADDCHOICE(0x11db6, "(Give insect meat)", 0x11dc4);
    };
}

func int DIA_OLDDOG_CHOOSEFOOD_FULLPOINTS() {
    if ((OLDDOG_POINTS) >= (6)) {
        if ((OLDDOG_HAPPYDOGLOG) == (FALSE)) {
            AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_HAPPYDOG);
            OLDDOG_HAPPYDOGLOG = TRUE;
            INFO_CLEARCHOICES(0x11db6);
        };
    };
    if ((OLDDOG_COUNTER) == (2)) {
        DIA_OLDDOG_DOGISFULL();
    };
    DIA_OLDDOG_CHOOSEFOOD_CHOICES();
    return 0 /* !broken stack! */;
}

instance DIA_OLDDOG_CHOOSEFOOD(C_INFO) {
    NPC = 0xcf48;
    NR = 1;
    CONDITION = DIA_OLDDOG_CHOOSEFOOD_CONDITION;
    INFORMATION = DIA_OLDDOG_CHOOSEFOOD_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Let's think, what will you like? (Give food)";
}

func int DIA_OLDDOG_CHOOSEFOOD_CONDITION() {
    if ((LOG_GETSTATUS(MIS_SQ231)) == (LOG_RUNNING)) {
        if ((OLDDOG_POINTS) < (6)) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func int DIA_OLDDOG_CHOOSEFOOD_EATING() {
    AI_PLAYANI(SELF, "R_ROAM2");
    return 0 /* !broken stack! */;
}

func void DIA_OLDDOG_CHOOSEFOOD_INFO() {
    if ((OLDDOG_COUNTER) == (2)) {
        DIA_OLDDOG_DOGISFULL();
        INFO_CLEARCHOICES(0x11db6);
        AI_STOPPROCESSINFOS(OTHER);
    };
    AI_OUTPUT(OTHER, SELF, "DIA_OldDog_ChooseFood_15_02");
    DIA_OLDDOG_CHOOSEFOOD_CHOICES();
}

func void DIA_OLDDOG_CHOOSEFOOD_BACK() {
    AI_OUTPUT(OTHER, SELF, "DIA_OldDog_ChooseFood_Back_15_01");
    AI_WAITTILLEND(SELF, OTHER);
    INFO_CLEARCHOICES(0x11db6);
    AI_STOPPROCESSINFOS(SELF);
}

func void DIA_OLDDOG_ADDPOINTS() {
    B_STANDUP();
    DIA_OLDDOG_WOOF_DIALOGUE();
    OLDDOG_POINTS = (OLDDOG_POINTS) + (1);
    OLDDOG_COUNTER = (OLDDOG_COUNTER) + (1);
    DIA_OLDDOG_CHOOSEFOOD_FULLPOINTS();
}

func void DIA_OLDDOG_GOBBOBONE() {
    if ((OLDDOG_GOBBOBONE) == (FALSE)) {
        OLDDOG_GOBBOBONE = TRUE;
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_GOBBOBONE);
    };
    NPC_REMOVEINVITEM(SELF, 0x8452);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8452, 1);
}

func void DIA_OLDDOG_FISH() {
    if ((OLDDOG_FISH) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_FISH = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_FISH);
    };
    NPC_REMOVEINVITEM(SELF, 0x84b4);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x84b4, 1);
}

func void DIA_OLDDOG_BACON() {
    if ((OLDDOG_BACON) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_BACON = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_BACON);
    };
    NPC_REMOVEINVITEM(SELF, 0x84b0);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x84b0, 1);
}

func void DIA_OLDDOG_SAUSAGE() {
    OLDDOG_POINTS = (OLDDOG_POINTS) + (1);
    if ((OLDDOG_SAUSAGE) == (FALSE)) {
        B_GIVEPLAYERXP((2) * (XP_SQ231_NEWFOOD));
        OLDDOG_SAUSAGE = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_SAUSAGE);
    };
    NPC_REMOVEINVITEM(SELF, 0x84ba);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x84ba, 1);
}

func void DIA_OLDDOG_ROASTEDRATMEAT() {
    if ((OLDDOG_ROASTEDRATMEAT) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_ROASTEDRATMEAT = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_ROASTEDRATMEAT);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e35);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e35, 1);
}

func void DIA_OLDDOG_SKELETONBONE() {
    AI_PLAYANIBS(SELF, T_WARN, BS_STAND);
    if ((OLDDOG_SKELETONBONE) == (FALSE)) {
        OLDDOG_SKELETONBONE = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_SKELETONBONE);
    };
}

func void DIA_OLDDOG_ROTTENFISH() {
    AI_PLAYANIBS(SELF, T_WARN, BS_STAND);
    if ((OLDDOG_ROTTENFISH) == (FALSE)) {
        OLDDOG_ROTTENFISH = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_ROTTENFISH);
    };
}

func void DIA_OLDDOG_RATMEATRAW() {
    AI_PLAYANIBS(SELF, T_WARN, BS_STAND);
    if ((OLDDOG_RATMEATRAW) == (FALSE)) {
        OLDDOG_RATMEATRAW = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_RATMEATRAW);
    };
}

func void DIA_OLDDOG_MEATBUG() {
    AI_PLAYANIBS(SELF, T_WARN, BS_STAND);
    if ((OLDDOG_MEATBUG) == (FALSE)) {
        OLDDOG_MEATBUG = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_MEATBUG);
    };
}

func void DIA_OLDDOG_MEATBUG_FRIED() {
    AI_PLAYANIBS(SELF, T_WARN, BS_STAND);
    if ((OLDDOG_MEATBUG_FRIED) == (FALSE)) {
        OLDDOG_MEATBUG_FRIED = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_MEATBUG_FRIED);
    };
}

func void DIA_OLDDOG_WOLF_RAW() {
    AI_PLAYANIBS(SELF, T_WARN, BS_STAND);
    if ((OLDDOG_WOLFRAWMEAT) == (FALSE)) {
        OLDDOG_WOLFRAWMEAT = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_WOLFMEAT_RAW);
    };
}

func void DIA_OLDDOG_WOLF() {
    AI_PLAYANIBS(SELF, T_WARN, BS_STAND);
    if ((OLDDOG_WOLFMEAT) == (FALSE)) {
        OLDDOG_WOLFMEAT = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_WOLFMEAT);
    };
}

func void DIA_OLDDOG_CRAB_RAW() {
    AI_PLAYANIBS(SELF, T_WARN, BS_STAND);
    if ((OLDDOG_CRABRAWMEAT) == (FALSE)) {
        OLDDOG_CRABRAWMEAT = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_CRABMEAT_RAW);
    };
}

func void DIA_OLDDOG_CRAB() {
    if ((OLDDOG_CRABMEAT) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_CRABMEAT = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_CRABMEAT);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e59);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e59, 1);
}

var int DIA_OLDDOG_CRAB.OLDDOG_CRABMEAT = 0;
func void DIA_OLDDOG_BEAR_RAW() {
    if ((OLDDOG_BEARMEAT_RAW) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_BEARMEAT_RAW = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_BEARMEAT_RAW);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e53);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e53, 1);
}

var int DIA_OLDDOG_BEAR_RAW.OLDDOG_BEARMEAT_RAW = 0;
func void DIA_OLDDOG_BEAR() {
    OLDDOG_POINTS = (OLDDOG_POINTS) + (1);
    if ((OLDDOG_BEARMEAT) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_BEARMEAT = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_BEARMEAT);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e55);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e55, 1);
}

var int DIA_OLDDOG_BEAR.OLDDOG_BEARMEAT = 0;
func void DIA_OLDDOG_TROLLMEAT_RAW() {
    if ((OLDDOG_TROLLMEAT_RAW) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_TROLLMEAT_RAW = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_TROLLMEAT_RAW);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e4f);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e4f, 1);
}

var int DIA_OLDDOG_TROLLMEAT_RAW.OLDDOG_TROLLMEAT_RAW = 0;
func void DIA_OLDDOG_TROLLMEAT() {
    OLDDOG_POINTS = (OLDDOG_POINTS) + (1);
    if ((OLDDOG_TROLLMEAT) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_TROLLMEAT = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_TROLLMEAT);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e51);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e51, 1);
}

var int DIA_OLDDOG_TROLLMEAT.OLDDOG_TROLLMEAT = 0;
func void DIA_OLDDOG_SCAVENGERMEAT_RAW() {
    if ((OLDDOG_SCAVENGERMEAT_RAW) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_SCAVENGERMEAT_RAW = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_SCAVENGERMEAT_RAW);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e4b);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e4b, 1);
}

var int DIA_OLDDOG_SCAVENGERMEAT_RAW.OLDDOG_SCAVENGERMEAT_RAW = 0;
func void DIA_OLDDOG_SCAVENGERMEAT() {
    if ((OLDDOG_SCAVENGERMEAT) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_SCAVENGERMEAT = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_SCAVENGERMEAT);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e4d);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e4d, 1);
}

var int DIA_OLDDOG_SCAVENGERMEAT.OLDDOG_SCAVENGERMEAT = 0;
func void DIA_OLDDOG_SHADOWMEAT_RAW() {
    AI_PLAYANIBS(SELF, T_WARN, BS_STAND);
    if ((OLDDOG_SHADOWRAWMEAT) == (FALSE)) {
        OLDDOG_SHADOWRAWMEAT = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_SHADOWMEAT_RAW);
    };
}

func void DIA_OLDDOG_SHADOWMEAT() {
    if ((OLDDOG_SHADOWMEAT) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_SHADOWMEAT = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_SHADOWMEAT);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e49);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e49, 1);
}

var int DIA_OLDDOG_SHADOWMEAT.OLDDOG_SHADOWMEAT = 0;
func void DIA_OLDDOG_MOLERATMEAT_RAW() {
    if ((OLDDOG_MOLERATMEAT_RAW) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_MOLERATMEAT_RAW = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_MOLERATMEAT_RAW);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e3f);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e3f, 1);
}

var int DIA_OLDDOG_MOLERATMEAT_RAW.OLDDOG_MOLERATMEAT_RAW = 0;
func void DIA_OLDDOG_MOLERATMEAT() {
    if ((OLDDOG_MOLERATMEAT) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_MOLERATMEAT = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_MOLERATMEAT);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e41);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e41, 1);
}

var int DIA_OLDDOG_MOLERATMEAT.OLDDOG_MOLERATMEAT = 0;
func void DIA_OLDDOG_SHEEP_RAW() {
    if ((OLDDOG_SHEEP_RAW) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_SHEEP_RAW = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_SHEEP_RAW);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e3b);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e3b, 1);
}

var int DIA_OLDDOG_SHEEP_RAW.OLDDOG_SHEEP_RAW = 0;
func void DIA_OLDDOG_SHEEPFRIED() {
    OLDDOG_POINTS = (OLDDOG_POINTS) + (1);
    if ((OLDDOG_SHEEPFRIED) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_SHEEPFRIED = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_SHEEP);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e3d);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e3d, 1);
}

var int DIA_OLDDOG_SHEEPFRIED.OLDDOG_SHEEPFRIED = 0;
func void DIA_OLDDOG_BOAR_RAW() {
    if ((OLDDOG_BOARMEAT_RAW) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_BOARMEAT_RAW = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_BOARMEAT_RAW);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e37);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e37, 1);
}

var int DIA_OLDDOG_BOAR_RAW.OLDDOG_BOARMEAT_RAW = 0;
func void DIA_OLDDOG_BOAR() {
    OLDDOG_POINTS = (OLDDOG_POINTS) + (1);
    if ((OLDDOG_BOARMEAT) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_NEWFOOD);
        OLDDOG_BOARMEAT = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_BOARMEAT);
    };
    NPC_REMOVEINVITEM(SELF, 0x8e39);
    DIA_OLDDOG_ADDPOINTS();
    B_GIVEINVITEMS(OTHER, SELF, 0x8e39, 1);
}

var int DIA_OLDDOG_BOAR.OLDDOG_BOARMEAT = 0;
instance DIA_OLDDOG_PET(C_INFO) {
    NPC = 0xcf48;
    NR = 1;
    CONDITION = DIA_OLDDOG_PET_CONDITION;
    INFORMATION = DIA_OLDDOG_PET_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_PET;
}

func int DIA_OLDDOG_PET_CONDITION() {
    if ((OLDDOG_HAPPYDOGLOG) == (TRUE)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OLDDOG_PET_INFO() {
    GAMESERVICES_UNLOCKACHIEVEMENT(ACH_30);
    if ((OLDDOG_QUESTFINISHLOG) == (FALSE)) {
        B_GIVEPLAYERXP(XP_SQ231_FINISH);
        OLDDOG_QUESTFINISHLOG = TRUE;
        AI_LOGENTRY(TOPIC_SQ231, LOG_SQ231_FINISH);
        LOG_SETSTATUS(_@(MIS_SQ231), TOPIC_SQ231, LOG_SUCCESS);
    };
    AI_STOPLOOKAT(SELF);
    AI_STOPLOOKAT(OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_WAITTILLEND(SELF, OTHER);
    AI_STANDUP(SELF);
    AI_PLAYANIBS(SELF, T_SIT_2_STAND, BS_STAND);
    AI_TURNTONPC(SELF, OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_TURNTONPC(OTHER, SELF);
    AI_SETWALKMODE(SELF, NPC_WALK);
    AI_GOTONPC(SELF, OTHER);
    AI_WAIT(SELF, 0x3dcccccd);
    AI_PLAYANIBS(SELF, "T_READYTOPET", BS_SIT);
    AI_WAITTILLEND(SELF, OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_PLAYANI(SELF, "T_PET_START");
    AI_SETWALKMODE(OTHER, NPC_WALK);
    AI_GOTONPC(OTHER, SELF);
    AI_PLAYANI(OTHER, "T_PET_START");
    AI_FUNCTION(SELF, 0x11de9);
    INFO_CLEARCHOICES(0x11de6);
    INFO_ADDCHOICE(0x11de6, DIALOG_FINISH, 0x11dea);
}

func void OLDDOG_APPLYMDS() {
    MDL_APPLYOVERLAYMDS(HERO, "Humans_PetDog.mds");
}

func void DIA_OLDDOG_PET_STOP() {
    AI_PLAYANI(OTHER, "T_PET_REMVOE");
    AI_FUNCTION(OTHER, 0x11deb);
    INFO_CLEARCHOICES(0x11de6);
    AI_WAITTILLEND(SELF, OTHER);
    AI_PLAYANIBS(SELF, "T_UNREADYTOPET", BS_STAND);
    AI_WAIT(OTHER, 0x3e4ccccd);
    AI_STOPPROCESSINFOS(OTHER);
}

func void OLDDOG_REMOVEMDS() {
    MDL_REMOVEOVERLAYMDS(HERO, "Humans_PetDog.mds");
}

