instance DIA_NOVIZE_EXIT(C_INFO) {
    NPC = 0xdd13;
    NR = 999;
    CONDITION = DIA_NOVIZE_EXIT_CONDITION;
    INFORMATION = DIA_NOVIZE_EXIT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_ENDE;
}

func int DIA_NOVIZE_EXIT_CONDITION() {
    return TRUE;
}

func void DIA_NOVIZE_EXIT_INFO() {
    AI_STOPPROCESSINFOS(SELF);
}

instance TRIA_NOVIZE_SQ508_NEWS(C_INFO) {
    NPC = 0xdd13;
    NR = 1;
    CONDITION = TRIA_NOVIZE_SQ508_NEWS_CONDITION;
    INFORMATION = TRIA_NOVIZE_SQ508_NEWS_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int TRIA_NOVIZE_SQ508_NEWS_CONDITION() {
    if (((SQ508_NOVIZESMALLTALKCUTSCENE_STATUS) == (3)) && ((LOG_GETSTATUS(MIS_SQ508)) == (LOG_RUNNING))) {
        if (((NPC_GETDISTTOWP(NOV_205_NOVIZE, NOV_205_NOVIZE.WP)) <= (500)) && ((NPC_GETDISTTOWP(NOV_208_NOVIZE, NOV_208_NOVIZE.WP)) <= (500))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void TRIA_NOVIZE_SQ508_NEWS_INFO() {
    WLD_SENDUNTRIGGER("SQ508_NOVIZESMALLTALK_02");
    DIACAM_ENABLE();
    TRIA_INVITE(NOV_208_NOVIZE);
    TRIA_START();
    AI_LOOKATNPC(OTHER, SELF);
    AI_STOPLOOKAT(NOV_205_NOVIZE);
    AI_STOPLOOKAT(NOV_208_NOVIZE);
    INFO_CLEARCHOICES(0x13a4d);
    INFO_ADDCHOICE(0x13a4d, "Do you have a problem?", 0x13a52);
    INFO_ADDCHOICE(0x13a4d, "Please, continue.", 0x13a51);
}

func void TRIA_NOVIZE_SQ508_NEWS_NEXT() {
    TRIA_WAIT();
    TRIA_NEXT(NOV_205_NOVIZE);
    AI_OUTPUT(SELF, OTHER, "Tria_Novize_02_SQ508_News_Next_03_01");
    INFO_CLEARCHOICES(0x13a4d);
    INFO_ADDCHOICE(0x13a4d, "Are you going to tell me what's going on here or not?", 0x13a53);
}

func void TRIA_NOVIZE_SQ508_NEWS_BOTHER() {
    AI_OUTPUT(OTHER, SELF, "Tria_Marvin_SQ508_News_Bother_15_01");
    TRIA_WAIT();
    TRIA_NEXT(NOV_208_NOVIZE);
    AI_OUTPUT(SELF, OTHER, "Tria_Novize_01_SQ508_News_Bother_03_02");
    TRIA_NOVIZE_SQ508_NEWS_NEXT();
}

func void TRIA_NOVIZE_SQ508_NEWS_PROBLEM() {
    AI_OUTPUT(OTHER, SELF, "Tria_Marvin_SQ508_News_Problem_15_01");
    TRIA_WAIT();
    TRIA_NEXT(NOV_208_NOVIZE);
    AI_OUTPUT(SELF, OTHER, "Tria_Novize_01_SQ508_News_Problem_03_02");
    TRIA_NOVIZE_SQ508_NEWS_NEXT();
}

func void TRIA_NOVIZE_SQ508_NEWS_PROBLEM_NEXT_TELL() {
    TRIA_WAIT();
    TRIA_NEXT(NOV_208_NOVIZE);
    AI_OUTPUT(OTHER, SELF, "Tria_Marvin_SQ508_News_Tell_15_01");
    AI_OUTPUT(SELF, OTHER, "Tria_Novize_01_SQ508_News_Tell_03_02");
    AI_OUTPUT(SELF, OTHER, "Tria_Novize_01_SQ508_News_Tell_03_03");
    AI_OUTPUT(SELF, OTHER, "Tria_Novize_01_SQ508_News_Tell_03_04");
    AI_OUTPUT(SELF, OTHER, "Tria_Novize_01_SQ508_News_Tell_03_05");
    TRIA_WAIT();
    TRIA_NEXT(NOV_205_NOVIZE);
    AI_OUTPUT(SELF, OTHER, "Tria_Novize_02_SQ508_News_Tell_03_06");
    TRIA_WAIT();
    TRIA_NEXT(NOV_208_NOVIZE);
    AI_OUTPUT(SELF, OTHER, "Tria_Novize_01_SQ508_News_Tell_03_07");
    TRIA_WAIT();
    TRIA_NEXT(NOV_205_NOVIZE);
    AI_OUTPUT(SELF, OTHER, "Tria_Novize_02_SQ508_News_Tell_03_08");
    INFO_CLEARCHOICES(0x13a4d);
    INFO_ADDCHOICE(0x13a4d, "I don't have time right now.", 0x13a58);
    INFO_ADDCHOICE(0x13a4d, "I'll check out that cemetery.", 0x13a57);
}

func void TRIA_NOVIZE_SQ508_NEWS_END() {
    AI_WAITTILLEND(SELF, OTHER);
    INFO_CLEARCHOICES(0x13a4d);
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0xf75d);
    TRIA_FINISH();
    AI_STOPLOOKAT(SELF);
    AI_STOPLOOKAT(OTHER);
}

func void TRIA_NOVIZE_SQ508_NEWS_CHECK_MARVINDIALOGUE() {
    AI_OUTPUT(OTHER, SELF, "Tria_Marvin_SQ508_News_Check_15_01");
}

func void TRIA_NOVIZE_SQ508_NEWS_CHECK_NOVIZEDIALOGUE() {
    AI_OUTPUT(SELF, OTHER, "Tria_Novize_02_SQ508_News_Check_03_02");
    AI_LOGENTRY(TOPIC_SQ508, LOG_SQ508_NOVIZE_HELPTHEM);
    SQ508_HELPNOVIZE_PREPARE();
}

func void TRIA_NOVIZE_SQ508_NEWS_PROBLEM_NEXT_TELL_CHECK() {
    SQ508_HELPNOVIZE = TRUE;
    TRIA_NOVIZE_SQ508_NEWS_CHECK_MARVINDIALOGUE();
    TRIA_WAIT();
    TRIA_NEXT(NOV_205_NOVIZE);
    TRIA_NOVIZE_SQ508_NEWS_CHECK_NOVIZEDIALOGUE();
    TRIA_NOVIZE_SQ508_NEWS_END();
}

func void TRIA_NOVIZE_SQ508_NEWS_PROBLEM_NEXT_TELL_LATER() {
    AI_OUTPUT(OTHER, SELF, "Tria_Marvin_SQ508_News_Later_15_01");
    TRIA_NOVIZE_SQ508_NEWS_END();
}

instance DIA_NOVIZE_SQ508_CHECK(C_INFO) {
    NPC = 0xdd13;
    NR = 1;
    CONDITION = DIA_NOVIZE_SQ508_CHECK_CONDITION;
    INFORMATION = DIA_NOVIZE_SQ508_CHECK_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I'll check out that cemetery.";
}

func int DIA_NOVIZE_SQ508_CHECK_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_SQ508)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x13a4d))) && ((SQ508_HELPNOVIZE) == (0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_NOVIZE_SQ508_CHECK_INFO() {
    SQ508_HELPNOVIZE = TRUE;
    TRIA_NOVIZE_SQ508_NEWS_CHECK_MARVINDIALOGUE();
    TRIA_NOVIZE_SQ508_NEWS_CHECK_NOVIZEDIALOGUE();
}

instance DIA_NOVIZE_SQ508_WARANS(C_INFO) {
    NPC = 0xdd13;
    NR = 1;
    CONDITION = DIA_NOVIZE_SQ508_WARANS_CONDITION;
    INFORMATION = DIA_NOVIZE_SQ508_WARANS_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Do you know anything about the lizards behind the cemetery?";
}

func int DIA_NOVIZE_SQ508_WARANS_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ508)) == (LOG_RUNNING)) && ((SQ508_CHECKWARANS_LOGENTRY) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_NOVIZE_SQ508_WARANS_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Novize_SQ508_Warans_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Novize_SQ508_Warans_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Novize_SQ508_Warans_03_03");
    AI_RESETFACEANI(OTHER);
}

instance DIA_NOVIZE_SQ508_AFTERQUEST(C_INFO) {
    NPC = 0xdd13;
    NR = 1;
    CONDITION = DIA_NOVIZE_SQ508_AFTERQUEST_CONDITION;
    INFORMATION = DIA_NOVIZE_SQ508_AFTERQUEST_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_NOVIZE_SQ508_AFTERQUEST_CONDITION() {
    if ((LOG_GETSTATUS(MIS_SQ508)) == (LOG_SUCCESS)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_NOVIZE_SQ508_AFTERQUEST_INFO() {
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Novize_SQ508_AfterQuest_03_01");
    INFO_CLEARCHOICES(0x13a5f);
    INFO_ADDCHOICE(0x13a5f, "It's a long story, but the cemetery is now safe.", 0x13a62);
}

func void DIA_NOVIZE_SQ508_AFTERQUEST_SAFE() {
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Novize_SQ508_AfterQuest_Safe_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Novize_SQ508_AfterQuest_Safe_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Novize_SQ508_AfterQuest_Safe_03_03");
    CREATEINVITEMS(SELF, 0x8793, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x8793, 1);
    CREATEINVITEMS(SELF, 0x86e1, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x86e1, 1);
    INFO_CLEARCHOICES(0x13a5f);
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0xf780);
}

