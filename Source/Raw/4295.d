instance DIA_KURT_EXIT(C_INFO) {
    NPC = 0xe0a6;
    NR = 999;
    CONDITION = DIA_KURT_EXIT_CONDITION;
    INFORMATION = DIA_KURT_EXIT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_ENDE;
}

func int DIA_KURT_EXIT_CONDITION() {
    return TRUE;
}

func void DIA_KURT_EXIT_INFO() {
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_KURT_Q103_HELLO(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_Q103_HELLO_CONDITION;
    INFORMATION = DIA_KURT_Q103_HELLO_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_Q103_HELLO_CONDITION() {
    if ((LOG_GETSTATUS(MIS_Q103)) == (LOG_RUNNING)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_Q103_HELLO_INFO() {
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q103_Hello_701_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q103_Hello_701_02");
    INFO_CLEARCHOICES(0x156ee);
    INFO_ADDCHOICE(0x156ee, "Don't you recognize me? Because I do you.", 0x156f1);
    INFO_ADDCHOICE(0x156ee, "I am not in the habit of stealing from those who have helped me.", 0x156f2);
}

func void DIA_KURT_Q103_HELLO_UDONTRECOGNISEME() {
    SELF.AIVAR[15] = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q103_Hello_udontrecogniseme_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q103_Hello_udontrecogniseme_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q103_Hello_udontrecogniseme_701_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q103_Hello_udontrecogniseme_701_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q103_Hello_udontrecogniseme_15_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q103_Hello_udontrecogniseme_701_06");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q103_Hello_udontrecogniseme_15_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q103_Hello_udontrecogniseme_701_08");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q103_Hello_udontrecogniseme_15_09");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q103_Hello_udontrecogniseme_701_10");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q103_Hello_udontrecogniseme_701_11");
    INFO_CLEARCHOICES(0x156ee);
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_Q103, LOG_Q103_FINISH);
    LOG_SETSTATUS(_@(MIS_Q103), TOPIC_Q103, LOG_SUCCESS);
    LOG_CREATETOPIC(TOPIC_Q108, LOG_MISSION);
    LOG_SETSTATUS(_@(MIS_Q108), TOPIC_Q108, LOG_RUNNING);
    AI_LOGENTRY(TOPIC_Q108, LOG_Q108_START);
    Q108_PREPARENPC();
}

func void DIA_KURT_Q103_HELLO_STEAL() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q103_Hello_steal_15_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q103_Hello_steal_701_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q103_Hello_steal_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q103_Hello_steal_701_03");
}

instance DIA_KURT_Q108_MEETING(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_Q108_MEETING_CONDITION;
    INFORMATION = DIA_KURT_Q108_MEETING_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_Q108_MEETING_CONDITION() {
    if (((Q108_STARTDIALOGUE_KURT) == (TRUE)) && ((LOG_GETSTATUS(MIS_Q108)) == (LOG_RUNNING))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void Q108_MEETING_CAMERA_03() {
    WLD_SENDTRIGGER("Q108_MEETING_04");
    WLD_SENDUNTRIGGER("Q108_MEETING_03");
}

func void Q108_MEETING_CAMERA_04() {
    WLD_SENDTRIGGER("Q108_MEETING_05");
    WLD_SENDUNTRIGGER("Q108_MEETING_04");
}

func void Q108_MEETING_WAIT2() {
    AI_WAITTILLEND(NONE_1_JORN, BAU_701_KURT);
    AI_WAITTILLEND(NONE_1_JORN, HERO);
    AI_WAITTILLEND(BAU_701_KURT, NONE_1_JORN);
    AI_WAITTILLEND(BAU_701_KURT, HERO);
}

func void Q108_MEETING_CAMERA_JORN_01() {
    WLD_SENDTRIGGER("Q108_MEETING_JORN_01");
    WLD_SENDUNTRIGGER("Q108_MEETING_04");
    AI_LOOKATNPC(BAU_701_KURT, NONE_1_JORN);
    NPC_CLEARAIQUEUE(NONE_1_JORN);
    Q108_MEETING_WAIT2();
    AI_OUTPUT(NONE_1_JORN, HERO, "Tria_Jorn_Q108_Tired_City_01_02");
    Q108_MEETING_WAIT2();
    AI_FUNCTION(BAU_701_KURT, 0x156fb);
    AI_TURNTONPC(NONE_1_JORN, BAU_701_KURT);
    AI_TURNTONPC(BAU_701_KURT, NONE_1_JORN);
    AI_OUTPUT(BAU_701_KURT, HERO, "Tria_Kurt_Q108_Tired_Next2_701_01");
    Q108_MEETING_WAIT2();
    AI_OUTPUT(NONE_1_JORN, HERO, "Tria_Jorn_Q108_Tired_Next2_01_02");
    AI_FUNCTION(NONE_1_JORN, 0x156f9);
}

func void Q108_MEETING_CONTINUEDIALOG_01() {
    PRINTD("Dialog 2");
    Q108_STARTDIALOGUE_KURT = 2;
    HERO.AIVAR[4] = FALSE;
    AI_TURNTONPC(BAU_701_KURT, HERO);
}

func void Q108_MEETING_CAMERA_JORN_02() {
    WLD_SENDTRIGGER("Q108_MEETING_05");
    WLD_SENDUNTRIGGER("Q108_MEETING_04");
}

func void Q108_MEETING_CAMERA_05() {
    WLD_SENDTRIGGER("Q108_MEETING_06");
    WLD_SENDUNTRIGGER("Q108_MEETING_05");
    WLD_SENDUNTRIGGER("Q108_MEETING_JORN_01");
}

func void Q108_MEETING_FINISH() {
    FF_APPLYONCEEXT(0x156fd, 75, 4);
}

func void Q108_MEETING_FINISH_APPLY() {
    Q108_MEETING_FINISH_COUNT = (Q108_MEETING_FINISH_COUNT) + (1);
    if ((Q108_MEETING_FINISH_COUNT) == (4)) {
        Q108_MEETING_FINISH_COUNT = 0;
        WLD_SENDUNTRIGGER("Q108_MEETING_01");
        WLD_SENDUNTRIGGER("Q108_MEETING_02");
        WLD_SENDUNTRIGGER("Q108_MEETING_03");
        WLD_SENDUNTRIGGER("Q108_MEETING_04");
        WLD_SENDUNTRIGGER("Q108_MEETING_05");
        WLD_SENDUNTRIGGER("Q108_MEETING_06");
        WLD_SENDUNTRIGGER("Q108_MEETING_JORN_01");
        DIACAM_ENABLE();
        Q108_ENDKURTJORNTRIALOG();
    };
}

var int Q108_MEETING_FINISH_APPLY.Q108_MEETING_FINISH_COUNT = 0;
func void DIA_KURT_Q108_MEETING_INFO() {
    NPC_EXCHANGEROUTINE(SELF, "Q108_WAIT");
    AI_LOOKATNPC(OTHER, SELF);
    AI_TURNTONPC(SELF, OTHER);
    AI_TURNTONPC(NONE_1_JORN, OTHER);
    INFO_CLEARCHOICES(0x156f3);
    INFO_ADDCHOICE(0x156f3, "Our father recently passed away...", 0x15701);
    INFO_ADDCHOICE(0x156f3, DIALOG_BESILENT, 0x15702);
}

func void DIA_KURT_Q108_MEETING_FATHER_NEXT() {
    AI_WAITTILLEND(SELF, OTHER);
    AI_FUNCTION(SELF, 0x156f5);
    AI_OUTPUT(SELF, OTHER, "Tria_Kurt_Q108_Tired_Next_701_01");
    AI_OUTPUT(SELF, OTHER, "Tria_Kurt_Q108_Tired_Next_701_02");
    AI_OUTPUT(SELF, OTHER, "Tria_Kurt_Q108_Tired_Next_701_03");
    AI_OUTPUT(SELF, OTHER, "Tria_Kurt_Q108_Tired_Next_701_04");
    INFO_CLEARCHOICES(0x156f3);
    INFO_ADDCHOICE(0x156f3, "It's not rumours, the orcs really are approaching Londram.", 0x15704);
    INFO_ADDCHOICE(0x156f3, "I don't believe in all those orc attacks either...", 0x15705);
}

func void DIA_KURT_Q108_MEETING_FATHER() {
    AI_OUTPUT(OTHER, SELF, "Tria_Jorn_Q108_Tired_Father_15_01");
    DIA_KURT_Q108_MEETING_FATHER_NEXT();
}

func void DIA_KURT_Q108_MEETING_SILENCE() {
    AI_WAIT(OTHER, 0x3f000000);
    AI_WAITTILLEND(SELF, OTHER);
    DIA_KURT_Q108_MEETING_FATHER_NEXT();
}

func void DIA_KURT_Q108_MEETING_VILLAGE() {
    AI_OUTPUT(SELF, OTHER, "Tria_Kurt_Q108_Tired_Village_701_01");
    AI_OUTPUT(SELF, OTHER, "Tria_Kurt_Q108_Tired_Village_701_02");
    AI_OUTPUT(SELF, OTHER, "Tria_Kurt_Q108_Tired_Village_701_03");
    INFO_CLEARCHOICES(0x156f3);
    INFO_ADDCHOICE(0x156f3, "Going to the city was our plan...", 0x15706);
    INFO_ADDCHOICE(0x156f3, "Not exactly in one piece...", 0x15707);
}

func void DIA_KURT_Q108_MEETING_FATHER_FATHER_NEXT_ORCS() {
    AI_WAITTILLEND(SELF, OTHER);
    AI_FUNCTION(SELF, 0x156f6);
    AI_OUTPUT(OTHER, SELF, "Tria_Jorn_Q108_Tired_Orcs_15_01");
    AI_OUTPUT(OTHER, SELF, "Tria_Jorn_Q108_Tired_Orcs_15_02");
    AI_OUTPUT(SELF, OTHER, "Tria_Kurt_Q108_Tired_Orcs_701_03");
    DIA_KURT_Q108_MEETING_VILLAGE();
}

func void DIA_KURT_Q108_MEETING_FATHER_FATHER_NEXT_LIE() {
    AI_WAITTILLEND(SELF, OTHER);
    AI_FUNCTION(SELF, 0x156f6);
    AI_OUTPUT(OTHER, SELF, "Tria_Jorn_Q108_Tired_Lie_15_01");
    AI_OUTPUT(OTHER, SELF, "Tria_Jorn_Q108_Tired_Lie_15_02");
    DIA_KURT_Q108_MEETING_VILLAGE();
}

func void DIA_KURT_Q108_MEETING_FATHER_FATHER_NEXT_LIE_VILLAGE_CITY() {
    AI_OUTPUT(OTHER, SELF, "Tria_Jorn_Q108_Tired_City_15_01");
    AI_WAITTILLEND(SELF, OTHER);
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0x156f8);
}

func void DIA_KURT_Q108_MEETING_FATHER_FATHER_NEXT_LIE_VILLAGE_ONEPIECE() {
    AI_OUTPUT(OTHER, SELF, "Tria_Jorn_Q108_Tired_OnePiece_15_01");
    AI_OUTPUT(OTHER, SELF, "Tria_Jorn_Q108_Tired_OnePiece_15_02");
    AI_WAITTILLEND(SELF, OTHER);
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0x156f8);
}

instance DIA_KURT_Q108_CONTINUEMEETING(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_Q108_CONTINUEMEETING_CONDITION;
    INFORMATION = DIA_KURT_Q108_CONTINUEMEETING_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_Q108_CONTINUEMEETING_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q108)) == (LOG_RUNNING)) && ((Q108_STARTDIALOGUE_KURT) == (2))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_Q108_CONTINUEMEETING_INFO() {
    AI_OUTPUT(BAU_701_KURT, HERO, "Tria_Kurt_Q108_Tired_Next2_701_03");
    AI_OUTPUT(BAU_701_KURT, HERO, "Tria_Kurt_Q108_Tired_Next2_701_04");
    AI_TURNTONPC(BAU_701_KURT, HERO);
    AI_OUTPUT(BAU_701_KURT, HERO, "Tria_Kurt_Q108_Tired_Next2_701_05");
    AI_OUTPUT(BAU_701_KURT, HERO, "Tria_Kurt_Q108_Tired_Next2_701_06");
    Q108_MEETING_WAIT2();
    B_SAY(HERO, BAU_701_KURT, "$MARVIN_SureThing");
    B_SAY(HERO, BAU_701_KURT, "$MARVIN_Bye2");
    AI_STOPPROCESSINFOS(BAU_701_KURT);
    if (NPC_KNOWSINFO(OTHER, 0x15933)) {
        AI_LOGENTRY(TOPIC_Q108, LOG_Q108_KURT_SEARCHLOKVAR_WEKNOWHIM);
    };
    AI_LOGENTRY(TOPIC_Q108, LOG_Q108_KURT_SEARCHLOKVAR);
    B_STOPLOOKAT(HERO);
    AI_STOPPOINTAT(HERO);
    AI_STOPPOINTAT(SELF);
    AI_FUNCTION(BAU_701_KURT, 0x156fc);
}

instance DIA_KURT_Q108_AFTERPLANTS(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_Q108_AFTERPLANTS_CONDITION;
    INFORMATION = DIA_KURT_Q108_AFTERPLANTS_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_Q108_AFTERPLANTS_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q108)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x1594b))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_Q108_AFTERPLANTS_INFO() {
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_AfterPlants_701_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_AfterPlants_701_02");
    INFO_CLEARCHOICES(0x1570b);
    INFO_ADDCHOICE(0x1570b, "Under no circumstances should he scratch these wounds.", 0x1570e);
    INFO_ADDCHOICE(0x1570b, "The bandage won't be ready for another couple of hours.", 0x1570f);
}

func void DIA_KURT_Q108_AFTERPLANTS_WOUND() {
    B_GIVEPLAYERXP(XP_Q108_JORN);
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_AfterPlants_Wound_15_01");
    AI_STARTFACEANI(SELF, S_SURPRISE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_AfterPlants_Wound_701_02");
}

func void DIA_KURT_Q108_AFTERPLANTS_LATER() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_AfterPlants_Later_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_AfterPlants_Later_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_AfterPlants_Later_701_03");
    INFO_CLEARCHOICES(0x1570b);
    INFO_ADDCHOICE(0x1570b, "I don't think there's ever been an opportunity.", 0x15710);
}

func void DIA_KURT_Q108_AFTERPLANTS_LATER_CHANCE() {
    RESERVED_VAR_INT_11 = TRUE;
    SELF.AIVAR[15] = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_AfterPlants_Chance_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_AfterPlants_Chance_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_AfterPlants_Chance_701_03");
    NPC_EXCHANGEROUTINE(SELF, "Q108_GUIDE_FISH");
    INFO_CLEARCHOICES(0x1570b);
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_Q108, LOG_Q108_KURT_FISHINGTIME);
}

instance DIA_KURT_Q108_FISHINGTIME(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_Q108_FISHINGTIME_CONDITION;
    INFORMATION = DIA_KURT_Q108_FISHINGTIME_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_Q108_FISHINGTIME_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q108)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x1570b))) && ((NPC_GETDISTTOWP(SELF, "VILLAGE_PATH_209")) <= (500))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_Q108_FISHINGTIME_INFO() {
    SELF.AIVAR[15] = FALSE;
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_701_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_701_02");
    CREATEINVITEMS(SELF, 0x905f, 2);
    B_GIVEINVITEMS(SELF, OTHER, 0x905f, 1);
    AI_FUNCTION(SELF, 0x15733);
    AI_WAITTILLEND(OTHER, SELF);
    AI_TURNTONPC(OTHER, BAU_714_REMY);
    AI_TURNTONPC(SELF, BAU_714_REMY);
    AI_STOPLOOKAT(SELF);
    AI_STOPLOOKAT(OTHER);
    CREATEINVITEMS(OTHER, 0x8a2e, 1);
    AI_EQUIPARMOR(OTHER, 0x8a2e);
    AI_PLAYANI(OTHER, "T_FISHING_START");
    AI_USEITEMTOSTATE(SELF, 0x905f, 1);
    AI_WAITTILLEND(SELF, OTHER);
    AI_FUNCTION(OTHER, 0x15732);
    AI_FUNCTION(SELF, 0x15732);
    AI_WAIT(OTHER, 0x40200000);
    AI_FUNCTION(OTHER, 0x15734);
    AI_WAIT(OTHER, 0x40200000);
    AI_WAIT(SELF, 0x40400000);
    AI_PLAYANI(SELF, "R_FISHING_RANDOM_01");
    AI_WAITTILLEND(SELF, OTHER);
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_701_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_701_04");
    AI_WAITTILLEND(OTHER, SELF);
    INFO_CLEARCHOICES(0x15711);
    INFO_ADDCHOICE(0x15711, "I'd really rather not talk about it.", 0x1572e);
    INFO_ADDCHOICE(0x15711, "I made mistakes there on Londram, quite a few...", 0x1572f);
}

var int KURT_Q108_FISHINGTIME_YOUNGFATHER = 0;
var int KURT_Q108_FISHINGTIME_WHAT = 0;
var int KURT_Q108_FISHINGTIME_PARENTS = 0;
var int KURT_Q108_FISHINGTIME_TROUBLE = 0;
func void DIA_KURT_Q108_FISHINGTIME_QUESTIONS() {
    INFO_CLEARCHOICES(0x15711);
    INFO_ADDCHOICE(0x15711, "Why don't we check on the bandage for Jorn?", 0x15719);
    if ((KURT_Q108_FISHINGTIME_WHAT) == (FALSE)) {
        INFO_ADDCHOICE(0x15711, "What do you do here?", 0x1571a);
    };
    if ((KURT_Q108_FISHINGTIME_YOUNGFATHER) == (FALSE)) {
        INFO_ADDCHOICE(0x15711, "What was father like when you were young?", 0x1571d);
    };
    if ((KURT_Q108_FISHINGTIME_PARENTS) == (FALSE)) {
        INFO_ADDCHOICE(0x15711, "How did my parents meet?", 0x1571c);
    };
    if ((KURT_Q108_FISHINGTIME_TROUBLE) == (FALSE)) {
        INFO_ADDCHOICE(0x15711, "Was there an argument between you and my father?", 0x1571b);
    };
}

func void DIA_KURT_Q108_FISHINGTIME_JORN() {
    AI_FUNCTION(SELF, 0x1573d);
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_FishingTime_Jorn_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_Jorn_701_02");
    AI_RESETFACEANI(OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_PLAYANI(OTHER, "T_FISHING_REMOVE");
    AI_FUNCTION(OTHER, 0x15730);
    AI_USEITEMTOSTATE(SELF, 0x905f, -(1));
    AI_WAIT(OTHER, 0x3e4ccccd);
    AI_FUNCTION(SELF, 0x15731);
    B_STANDUP();
    AI_FUNCTION(SELF, 0x1573e);
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_Jorn_701_03");
    CREATEINVITEMS(SELF, 0x84b4, 5);
    B_GIVEINVITEMS(SELF, OTHER, 0x84b4, 5);
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_Jorn_701_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_Jorn_701_05");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_Jorn_701_06");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_Jorn_701_07");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_Jorn_701_08");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_Jorn_701_09");
    if ((Q108_RIORDIANWANTSTOMEETUP) == (FALSE)) {
        AI_LOGENTRY(TOPIC_Q108, LOG_Q108_FINISH_V1);
    };
    AI_LOGENTRY(TOPIC_Q108, LOG_Q108_FINISH_V2);
    LOG_SETSTATUS(_@(MIS_Q108), TOPIC_Q108, LOG_SUCCESS);
    B_GIVEPLAYERXP(XP_Q108_FINISH);
    LOG_CREATETOPIC(TOPIC_Q104, LOG_MISSION);
    LOG_SETSTATUS(_@(MIS_Q104), TOPIC_Q104, LOG_RUNNING);
    AI_LOGENTRY(TOPIC_Q104, LOG_Q104_START);
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0xf27d);
}

func void DIA_KURT_Q108_FISHINGTIME_WHAT() {
    KURT_Q108_FISHINGTIME_WHAT = TRUE;
    AI_FUNCTION(SELF, 0x1573b);
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_FishingTime_What_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_What_701_02");
    AI_FUNCTION(SELF, 0x1573c);
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_What_701_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_What_701_04");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    DIA_KURT_Q108_FISHINGTIME_QUESTIONS();
}

func void DIA_KURT_Q108_FISHINGTIME_TROUBLE() {
    KURT_Q108_FISHINGTIME_TROUBLE = TRUE;
    AI_FUNCTION(SELF, 0x1573a);
    AI_STARTFACEANI(OTHER, S_NOPE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_FishingTime_Trouble_15_01");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_Trouble_701_02");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_Trouble_701_03");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    DIA_KURT_Q108_FISHINGTIME_QUESTIONS();
}

func void DIA_KURT_Q108_FISHINGTIME_PARENTS() {
    KURT_Q108_FISHINGTIME_PARENTS = TRUE;
    AI_STARTFACEANI(OTHER, S_THINK, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_FishingTime_Parents_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_Parents_701_02");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    DIA_KURT_Q108_FISHINGTIME_QUESTIONS();
}

func void DIA_KURT_Q108_FISHINGTIME_YOUNGFATHER() {
    KURT_Q108_FISHINGTIME_YOUNGFATHER = TRUE;
    AI_FUNCTION(SELF, 0x15738);
    AI_STARTFACEANI(OTHER, S_THINK, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_FishingTime_YoungFather_15_01");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_YoungFather_701_02");
    AI_FUNCTION(SELF, 0x15739);
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_YoungFather_701_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_YoungFather_701_04");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    DIA_KURT_Q108_FISHINGTIME_QUESTIONS();
}

func void DIA_KURT_Q108_FISHINGTIME_NEXT2() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_701_06");
    AI_FUNCTION(SELF, 0x15737);
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_701_07");
    DIA_KURT_Q108_FISHINGTIME_QUESTIONS();
}

var int KURT_Q108_FISHINGTIME_MANA = 0;
var int KURT_Q108_FISHINGTIME_HP = 0;
var int KURT_Q108_FISHINGTIME_SWD = 0;
var int KURT_Q108_FISHINGTIME_BOW = 0;
var int KURT_Q108_FISHINGTIME_STR = 0;
var int KURT_Q108_FISHINGTIME_DEX = 0;
var int KURT_Q108_FISHINGTIME_COUNTRAISE = 0;
func void DIA_KURT_Q108_FISHINGTIME_CHOICES() {
    INFO_CLEARCHOICES(0x15711);
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    if ((KURT_Q108_FISHINGTIME_COUNTRAISE) == (2)) {
        DIA_KURT_Q108_FISHINGTIME_NEXT2();
    };
    if ((KURT_Q108_FISHINGTIME_MANA) == (FALSE)) {
        INFO_ADDCHOICE(0x15711, "Maybe I can find a moment here to do some reading? (+5 mana points)", 0x1572c);
    };
    if ((KURT_Q108_FISHINGTIME_HP) == (FALSE)) {
        INFO_ADDCHOICE(0x15711, "I wanted to stop spending every evening at the inn... (+20 health points)", 0x1572b);
    };
    if ((KURT_Q108_FISHINGTIME_BOW) == (FALSE)) {
        INFO_ADDCHOICE(0x15711, "I was thinking of living off what I hunt... (+2% bow and crossbow skill)", 0x1572a);
    };
    if ((KURT_Q108_FISHINGTIME_SWD) == (FALSE)) {
        INFO_ADDCHOICE(0x15711, "I will learn proper sword fighting... (+2% one-handed and two-handed weapons skill)", 0x15729);
    };
    if ((KURT_Q108_FISHINGTIME_STR) == (FALSE)) {
        INFO_ADDCHOICE(0x15711, "I will be stronger than I was on Londram... (+5 strength points)", 0x15728);
    };
    if ((KURT_Q108_FISHINGTIME_DEX) == (FALSE)) {
        INFO_ADDCHOICE(0x15711, "I will slim the pouches of the city's rich... (+5 dexterity points)", 0x15727);
    };
}

func void DIA_KURT_Q108_FISHINGTIME_DEX() {
    KURT_Q108_FISHINGTIME_DEX = TRUE;
    KURT_Q108_FISHINGTIME_COUNTRAISE = (KURT_Q108_FISHINGTIME_COUNTRAISE) + (1);
    B_RAISEATTRIBUTE(OTHER, ATR_DEXTERITY, 5);
    AI_STARTFACEANI(OTHER, S_SMUG, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_FishingTime_RaiseAttribute_15_01");
    DIA_KURT_Q108_FISHINGTIME_CHOICES();
}

func void DIA_KURT_Q108_FISHINGTIME_STR() {
    KURT_Q108_FISHINGTIME_STR = TRUE;
    KURT_Q108_FISHINGTIME_COUNTRAISE = (KURT_Q108_FISHINGTIME_COUNTRAISE) + (1);
    B_RAISEATTRIBUTE(OTHER, ATR_STRENGTH, 5);
    AI_STARTFACEANI(OTHER, S_SERIOUS, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_FishingTime_RaiseAttribute_15_02");
    DIA_KURT_Q108_FISHINGTIME_CHOICES();
}

func void DIA_KURT_Q108_FISHINGTIME_SWD() {
    KURT_Q108_FISHINGTIME_SWD = TRUE;
    KURT_Q108_FISHINGTIME_COUNTRAISE = (KURT_Q108_FISHINGTIME_COUNTRAISE) + (1);
    B_RAISEFIGHTTALENT(OTHER, NPC_TALENT_1H, 2);
    B_RAISEFIGHTTALENT(OTHER, NPC_TALENT_2H, 2);
    PRINTSCREEN(PRINT_LEARN2H2, -(1), YPOS_LEVELUP, FONT_SCREEN, 2);
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    PRINTSCREEN(PRINT_LEARN1H2, -(1), -(1), FONT_SCREEN, 2);
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_FishingTime_RaiseAttribute_15_03");
    DIA_KURT_Q108_FISHINGTIME_CHOICES();
}

func void DIA_KURT_Q108_FISHINGTIME_BOW() {
    KURT_Q108_FISHINGTIME_BOW = TRUE;
    KURT_Q108_FISHINGTIME_COUNTRAISE = (KURT_Q108_FISHINGTIME_COUNTRAISE) + (1);
    B_RAISEFIGHTTALENT(OTHER, NPC_TALENT_BOW, 2);
    B_RAISEFIGHTTALENT(OTHER, NPC_TALENT_CROSSBOW, 2);
    PRINTSCREEN(PRINT_LEARNCROSSBOW2, -(1), YPOS_LEVELUP, FONT_SCREEN, 2);
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    PRINTSCREEN(PRINT_LEARNBOW2, -(1), -(1), FONT_SCREEN, 2);
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_FishingTime_RaiseAttribute_15_04");
    DIA_KURT_Q108_FISHINGTIME_CHOICES();
}

func void DIA_KURT_Q108_FISHINGTIME_HP() {
    KURT_Q108_FISHINGTIME_HP = TRUE;
    KURT_Q108_FISHINGTIME_COUNTRAISE = (KURT_Q108_FISHINGTIME_COUNTRAISE) + (1);
    B_RAISEATTRIBUTE(OTHER, ATR_HITPOINTS_MAX, 20);
    NPC_CHANGEATTRIBUTE(OTHER, ATR_HITPOINTS, 20);
    MARVINTRANSFORMHP = (MARVINTRANSFORMHP) + (20);
    AI_STARTFACEANI(OTHER, S_TIRED, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_FishingTime_RaiseAttribute_15_05");
    DIA_KURT_Q108_FISHINGTIME_CHOICES();
}

func void DIA_KURT_Q108_FISHINGTIME_MANA() {
    KURT_Q108_FISHINGTIME_MANA = TRUE;
    KURT_Q108_FISHINGTIME_COUNTRAISE = (KURT_Q108_FISHINGTIME_COUNTRAISE) + (1);
    B_RAISEATTRIBUTE(OTHER, ATR_MANA_MAX, 5);
    NPC_CHANGEATTRIBUTE(OTHER, ATR_MANA, 5);
    AI_STARTFACEANI(OTHER, S_THINK, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_FishingTime_RaiseAttribute_15_06");
    DIA_KURT_Q108_FISHINGTIME_CHOICES();
}

func void DIA_KURT_Q108_FISHINGTIME_NEXT() {
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    AI_FUNCTION(SELF, 0x15736);
    AI_WAIT(OTHER, 0x40000000);
    AI_WAITTILLEND(SELF, OTHER);
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_701_05");
    DIA_KURT_Q108_FISHINGTIME_CHOICES();
}

func void DIA_KURT_Q108_FISHINGTIME_DONTTALK() {
    AI_FUNCTION(SELF, 0x15735);
    AI_STARTFACEANI(OTHER, S_SERIOUS, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_FishingTime_DontTalk_15_01");
    AI_STARTFACEANI(SELF, S_SAD, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_DontTalk_701_02");
    DIA_KURT_Q108_FISHINGTIME_NEXT();
}

func void DIA_KURT_Q108_FISHINGTIME_MISTAKES() {
    AI_FUNCTION(SELF, 0x15735);
    AI_STARTFACEANI(OTHER, S_SAD, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_FishingTime_Mistakes_15_01");
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q108_FishingTime_Mistakes_15_02");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q108_FishingTime_Mistakes_701_03");
    DIA_KURT_Q108_FISHINGTIME_NEXT();
}

func void KURT_Q108_FISHING_HEROUNWEARROD() {
    NPC_REMOVEINVITEMS(HERO, 0x8a2e, 1);
}

func void KURT_Q108_FISHING_REMOVEMDS() {
    MDL_REMOVEOVERLAYMDS(BAU_701_KURT, "HumanS_Fishing_Dialogue.MDS");
    MDL_REMOVEOVERLAYMDS(HERO, "HumanS_Fishing_Dialogue.MDS");
}

func void KURT_Q108_FISHING_APPLYMDS() {
    MDL_APPLYOVERLAYMDS(BAU_701_KURT, "HumanS_Fishing_Dialogue.MDS");
    MDL_APPLYOVERLAYMDS(HERO, "HumanS_Fishing_Dialogue.MDS");
}

func void KURT_Q108_FISHINGCAMERA_01() {
    NPC_CLEARAIQUEUE(BAU_714_REMY);
    DIACAM_DISABLE();
    WLD_SENDTRIGGER("Q108_FISHING_01");
    TELEPORTNPCTOWP(0xe0a6, "VILLAGE_Q108_FISH_KURT");
    TELEPORTNPCTOWP(0x71b, "VILLAGE_Q108_FISH_HERO");
    TELEPORTNPCTOWP(0xe0f2, "VILLAGE_FIREPLACE_04");
}

func void KURT_Q108_FISHINGCAMERA_02() {
    NPC_CLEARAIQUEUE(BAU_714_REMY);
    TELEPORTNPCTOWP(0xe0f2, BAU_714_REMY.WP);
    WLD_SENDTRIGGER("Q108_FISHING_02");
    WLD_SENDUNTRIGGER("Q108_FISHING_01");
}

func void KURT_Q108_FISHINGCAMERA_03() {
    WLD_SENDTRIGGER("Q108_FISHING_03");
    WLD_SENDUNTRIGGER("Q108_FISHING_02");
}

func void KURT_Q108_FISHINGCAMERA_04() {
    WLD_SENDTRIGGER("Q108_FISHING_04");
    WLD_SENDUNTRIGGER("Q108_FISHING_03");
}

func void KURT_Q108_FISHINGCAMERA_05() {
    WLD_SENDTRIGGER("Q108_FISHING_05");
    WLD_SENDUNTRIGGER("Q108_FISHING_04");
}

func void KURT_Q108_FISHINGCAMERA_06() {
    WLD_SENDTRIGGER("Q108_FISHING_06");
    WLD_SENDUNTRIGGER("Q108_FISHING_05");
    WLD_SENDUNTRIGGER("Q108_FISHING_07");
    WLD_SENDUNTRIGGER("Q108_FISHING_08");
    WLD_SENDUNTRIGGER("Q108_FISHING_10");
}

func void KURT_Q108_FISHINGCAMERA_07() {
    WLD_SENDTRIGGER("Q108_FISHING_07");
    WLD_SENDUNTRIGGER("Q108_FISHING_06");
}

func void KURT_Q108_FISHINGCAMERA_08() {
    WLD_SENDTRIGGER("Q108_FISHING_08");
    WLD_SENDUNTRIGGER("Q108_FISHING_05");
    WLD_SENDUNTRIGGER("Q108_FISHING_07");
    WLD_SENDUNTRIGGER("Q108_FISHING_08");
    WLD_SENDUNTRIGGER("Q108_FISHING_10");
}

func void KURT_Q108_FISHINGCAMERA_09() {
    WLD_SENDTRIGGER("Q108_FISHING_09");
    WLD_SENDUNTRIGGER("Q108_FISHING_05");
    WLD_SENDUNTRIGGER("Q108_FISHING_07");
    WLD_SENDUNTRIGGER("Q108_FISHING_08");
    WLD_SENDUNTRIGGER("Q108_FISHING_10");
}

func void KURT_Q108_FISHINGCAMERA_10() {
    WLD_SENDTRIGGER("Q108_FISHING_10");
    WLD_SENDUNTRIGGER("Q108_FISHING_09");
}

func void KURT_Q108_FISHINGCAMERA_11() {
    WLD_SENDTRIGGER("Q108_FISHING_11");
    WLD_SENDUNTRIGGER("Q108_FISHING_05");
    WLD_SENDUNTRIGGER("Q108_FISHING_07");
    WLD_SENDUNTRIGGER("Q108_FISHING_08");
    WLD_SENDUNTRIGGER("Q108_FISHING_10");
}

func void KURT_Q108_FISHINGCAMERA_ENABLECAMERA() {
    DIACAM_ENABLE();
}

instance DIA_KURT_Q104_JORN(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_Q104_JORN_CONDITION;
    INFORMATION = DIA_KURT_Q104_JORN_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_Q104_JORN_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q104)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x1568f))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_Q104_JORN_INFO() {
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q104_Jorn_701_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q104_Jorn_15_02");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q104_Jorn_701_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q104_Jorn_701_04");
    AI_LOGENTRY(TOPIC_Q104, LOG_Q104_KURT_JORN);
    AI_FUNCTION(SELF, 0xf264);
}

instance DIA_KURT_Q104_BASTIAN(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_Q104_BASTIAN_CONDITION;
    INFORMATION = DIA_KURT_Q104_BASTIAN_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_Q104_BASTIAN_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q104)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x16336))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_Q104_BASTIAN_INFO() {
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q104_Bastian_701_01");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q104_Bastian_701_02");
    AI_LOGENTRY(TOPIC_Q104, LOG_Q104_KURT_BASTIAN);
    NPC_EXCHANGEROUTINE(SELF, "KurtGoesToJorn");
}

instance DIA_KURT_Q106_START(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_Q106_START_CONDITION;
    INFORMATION = DIA_KURT_Q106_START_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_Q106_START_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x16376)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_Q106_START_INFO() {
    Q105_JORNVINETRIP = FALSE;
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q106_Start_701_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q106_Start_701_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q106_Start_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q106_Start_701_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q106_Start_701_05");
    AI_RESETFACEANI(SELF);
    Q105_BRINGBACK_RANDOM_TRAPS();
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q106_Start_701_06");
    INFO_CLEARCHOICES(0x15745);
    INFO_ADDCHOICE(0x15745, "Why did I agree to this...", 0x15748);
}

func void DIA_KURT_Q106_START_WHY() {
    AI_STARTFACEANI(OTHER, S_TIRED, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q106_Start_Why_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q106_Start_Why_701_02");
    AI_RESETFACEANI(OTHER);
    INFO_CLEARCHOICES(0x15745);
    INFO_ADDCHOICE(0x15745, "Do you know where I should start my search?", 0x15749);
}

func void DIA_KURT_Q106_START_SEARCH() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q106_Start_Search_15_01");
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q106_Start_Search_701_02");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q106_Start_Search_701_03");
    INFO_CLEARCHOICES(0x15745);
    INFO_ADDCHOICE(0x15745, "Where can I find him?", 0x1574a);
}

func void DIA_KURT_Q106_START_WHERE() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q106_Start_Where_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q106_Start_Where_701_02");
    AI_RESETFACEANI(OTHER);
    LOG_CREATETOPIC(TOPIC_Q106, LOG_MISSION);
    LOG_SETSTATUS(_@(MIS_Q106), TOPIC_Q106, LOG_RUNNING);
    AI_LOGENTRY(TOPIC_Q106, LOG_Q106_START);
    Q106_SPAWNBODOWIN();
}

instance DIA_KURT_ARCHOLOS(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_ARCHOLOS_CONDITION;
    INFORMATION = DIA_KURT_ARCHOLOS_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Could you tell me something about the island?";
}

func int DIA_KURT_ARCHOLOS_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x156ee)) {
        if (((((KURT_ARCHOLOS_HISTORY) == (FALSE)) || ((KURT_ARCHOLOS_PLACES) == (FALSE))) || ((KURT_ARCHOLOS_IMPORTANTPEOPLE) == (FALSE))) || ((KURT_ARCHOLOS_PEOPLE) == (FALSE))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

var int KURT_ARCHOLOS_HISTORY = 0;
var int KURT_ARCHOLOS_PLACES = 0;
var int KURT_ARCHOLOS_IMPORTANTPEOPLE = 0;
var int KURT_ARCHOLOS_PEOPLE = 0;
func void DIA_KURT_ARCHOLOS_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Archolos_15_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_701_01");
    INFO_CLEARCHOICES(0x1574b);
    INFO_ADDCHOICE(0x1574b, DIALOG_BACK, 0x15756);
    if ((KURT_ARCHOLOS_HISTORY) == (FALSE)) {
        INFO_ADDCHOICE(0x1574b, "Could you tell me something about the history of the island?", 0x15752);
    };
    if ((KURT_ARCHOLOS_PLACES) == (FALSE)) {
        INFO_ADDCHOICE(0x1574b, "Are there places I should avoid?", 0x15753);
    };
    if ((KURT_ARCHOLOS_IMPORTANTPEOPLE) == (FALSE)) {
        INFO_ADDCHOICE(0x1574b, "Who are the most important people on the island?", 0x15754);
    };
    if ((KURT_ARCHOLOS_PEOPLE) == (FALSE)) {
        INFO_ADDCHOICE(0x1574b, "What do people do for a living here?", 0x15755);
    };
}

func void DIA_KURT_ARCHOLOS_HISTORY() {
    KURT_ARCHOLOS_HISTORY = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Archolos_history_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_history_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_history_701_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_history_701_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Archolos_history_15_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_history_701_06");
}

func void DIA_KURT_ARCHOLOS_PLACES() {
    KURT_ARCHOLOS_PLACES = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Archolos_places_15_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_places_701_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_places_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_places_701_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_places_701_04");
}

func void DIA_KURT_ARCHOLOS_IMPORTANTPEOPLE() {
    KURT_ARCHOLOS_IMPORTANTPEOPLE = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Archolos_importantpeople_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_importantpeople_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_importantpeople_701_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_importantpeople_701_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_importantpeople_701_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_importantpeople_701_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_importantpeople_701_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_importantpeople_701_08");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_importantpeople_701_09");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_importantpeople_701_10");
}

func void DIA_KURT_ARCHOLOS_PEOPLE() {
    KURT_ARCHOLOS_PEOPLE = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Archolos_people_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_people_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_people_701_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_people_701_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Archolos_people_701_05");
}

func void DIA_KURT_ARCHOLOS_BACK() {
    INFO_CLEARCHOICES(0x1574b);
}

instance DIA_KURT_SQ116_FINISH(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_SQ116_FINISH_CONDITION;
    INFORMATION = DIA_KURT_SQ116_FINISH_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I have your gold.";
}

func int DIA_KURT_SQ116_FINISH_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ116)) == (LOG_RUNNING)) && ((NPC_HASITEMS(OTHER, 0x9091)) >= (1))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_SQ116_FINISH_INFO() {
    B_GIVEINVITEMS(OTHER, SELF, 0x9091, 1);
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_SQ116_Finish_15_01");
    B_STANDUP();
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_SQ116_Finish_701_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_SQ116_Finish_15_03");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_SQ116_Finish_701_04");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_SQ116_Finish_701_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_SQ116_Finish_701_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_SQ116_Finish_701_07");
    AI_FUNCTION(SELF, 0xf368);
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_SQ116_Finish_701_08");
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_SQ116, LOG_SQ116_FINISH);
    LOG_SETSTATUS(_@(MIS_SQ116), TOPIC_SQ116, LOG_SUCCESS);
    CREATEINVITEMS(SELF, 0x859b, SQ116_REWARD);
    B_GIVEINVITEMS(SELF, OTHER, 0x859b, SQ116_REWARD);
    B_GIVEPLAYERXP(XP_SQ116_FINISH);
    NPC_REMOVEINVITEMS(HERO, 0x9091, 1);
    RESTOREROUTINE_GUMBERT();
}

instance DIA_KURT_GQ001_START(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_GQ001_START_CONDITION;
    INFORMATION = DIA_KURT_GQ001_START_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_GQ001_START_CONDITION() {
    if ((NPC_HASITEMS(OTHER, 0x90cc)) && ((LOG_GETSTATUS(MIS_Q106)) == (LOG_RUNNING))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_GQ001_BYE() {
    NPC_REMOVEINVITEM(OTHER, 0x90cc);
    CREATEINVITEMS(OTHER, 0x936e, 1);
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_WhereShouldIStart_15_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhereShouldIStart_701_06");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_WhereShouldIStart_15_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhereShouldIStart_701_08");
    INFO_CLEARCHOICES(0x1575a);
    AI_STOPPROCESSINFOS(SELF);
    LOG_CREATETOPIC(TOPIC_GQ001, LOG_MISSION);
    LOG_SETSTATUS(_@(MIS_GQ001), TOPIC_GQ001, LOG_RUNNING);
    AI_LOGENTRY(TOPIC_GQ001, LOG_GQ001_START);
    B_CHAPTERCHANGE(2, ARCHOLOS_ZEN, TRUE);
}

func void DIA_KURT_GQ001_CHOICE() {
    if ((GQ001_KURTOPTION1) == (TRUE)) {
        if ((GQ001_KURTOPTION2) == (FALSE)) {
            INFO_ADDCHOICE(0x1575a, "Why do you think my companions are behind the break-in?", 0x15760);
        };
        if ((GQ001_KURTOPTION3) == (FALSE)) {
            INFO_ADDCHOICE(0x1575a, "Why would someone destroy your hut?", 0x15761);
        };
    };
    INFO_ADDCHOICE(0x1575a, "No wonder. Your hut doesn't have a locked door.", 0x1575f);
    if ((GQ001_KURTOPTION4) == (TRUE)) {
        if ((GQ001_KURTOPTION5) == (FALSE)) {
            INFO_ADDCHOICE(0x1575a, "How do you know there were several?", 0x15763);
        };
        if ((GQ001_KURTOPTION6) == (FALSE)) {
            INFO_ADDCHOICE(0x1575a, "Where were you at the time of the break-in?", 0x15764);
        };
    };
    INFO_ADDCHOICE(0x1575a, "I told you I was going to Bodowin for the cure.", 0x15762);
}

func void DIA_KURT_GQ001_START_INFO() {
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_701_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_701_03");
    AI_RESETFACEANI(SELF);
    LOG_SETSTATUS(_@(MIS_Q106), TOPIC_Q106, LOG_SUCCESS);
    AI_LOGENTRY(TOPIC_Q106, LOG_Q106_FINISH);
    INFO_CLEARCHOICES(0x1575a);
    INFO_ADDCHOICE(0x1575a, "No wonder. Your hut doesn't have a locked door.", 0x1575f);
    INFO_ADDCHOICE(0x1575a, "I told you I was going to Bodowin for the cure.", 0x15762);
    INFO_ADDCHOICE(0x1575a, "Is Jorn all right?", 0x15765);
}

func void DIA_KURT_GQ001_START_NOKEY() {
    GQ001_KURTOPTION1 = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_NoKey_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_NoKey_701_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_NoKey_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_NoKey_701_04");
    INFO_ADDCHOICE(0x1575a, "Why do you think my companions are behind the break-in?", 0x15760);
    INFO_ADDCHOICE(0x1575a, "Why would someone destroy your hut?", 0x15761);
}

func void DIA_KURT_GQ001_START_NOKEY_WHYYOUTHINKTHAT() {
    GQ001_KURTOPTION2 = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_WhyYouThinkThat_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhyYouThinkThat_701_02");
    GQ001_KURTINFORMATIONJORNEND = (GQ001_KURTINFORMATIONJORNEND) + (1);
    if ((GQ001_KURTINFORMATIONJORNEND) >= (7)) {
        DIA_KURT_GQ001_BYE();
    };
}

func void DIA_KURT_GQ001_START_NOKEY_WHYTHEYWOULDDOTHAT() {
    GQ001_KURTOPTION3 = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_WhyTheyWouldDoThat_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhyTheyWouldDoThat_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhyTheyWouldDoThat_701_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_WhyTheyWouldDoThat_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhyTheyWouldDoThat_701_05");
    GQ001_KURTINFORMATIONJORNEND = (GQ001_KURTINFORMATIONJORNEND) + (1);
    if ((GQ001_KURTINFORMATIONJORNEND) >= (7)) {
        DIA_KURT_GQ001_BYE();
    };
}

func void DIA_KURT_GQ001_START_IWENTFORPOTION() {
    GQ001_KURTOPTION4 = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_IWentForPotion_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_IWentForPotion_701_02");
    INFO_ADDCHOICE(0x1575a, "How do you know there were several?", 0x15763);
    INFO_ADDCHOICE(0x1575a, "Where were you at the time of the break-in?", 0x15764);
}

func void DIA_KURT_GQ001_START_IWENTFORPOTION_HOWMANY() {
    GQ001_KURTOPTION5 = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_HowMany_15_01");
    AI_TURNAWAY(SELF, OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_HowMany_701_02");
    AI_TURNTONPC(SELF, OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_HowMany_701_03");
    GQ001_KURTINFORMATIONJORNEND = (GQ001_KURTINFORMATIONJORNEND) + (1);
    if ((GQ001_KURTINFORMATIONJORNEND) >= (7)) {
        DIA_KURT_GQ001_BYE();
    };
}

func void DIA_KURT_GQ001_START_IWENTFORPOTION_WHEREWEREYOUBEEN() {
    GQ001_KURTOPTION6 = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_WhereWereYouBeen_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhereWereYouBeen_701_02");
    GQ001_KURTINFORMATIONJORNEND = (GQ001_KURTINFORMATIONJORNEND) + (1);
    if ((GQ001_KURTINFORMATIONJORNEND) >= (7)) {
        DIA_KURT_GQ001_BYE();
    };
}

func void DIA_KURT_GQ001_START_WHEREISJORNISHESAFE() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_WhereIsJornIsHeSafe_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhereIsJornIsHeSafe_701_02");
    AI_STARTFACEANI(SELF, S_SAD, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhereIsJornIsHeSafe_701_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_WhereIsJornIsHeSafe_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhereIsJornIsHeSafe_701_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhereIsJornIsHeSafe_701_06");
    AI_RESETFACEANI(SELF);
    INFO_CLEARCHOICES(0x1575a);
    INFO_ADDCHOICE(0x1575a, "In that case, you need to report it to someone.", 0x15766);
    INFO_ADDCHOICE(0x1575a, "Did you find any trace?", 0x15767);
}

func void DIA_KURT_GQ001_JORN_LOST() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_ItsYourFault_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_ItsYourFault_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_ItsYourFault_701_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_ItsYourFault_701_04");
    INFO_CLEARCHOICES(0x1575a);
    INFO_ADDCHOICE(0x1575a, "I understand. You've done so much for us already.", 0x15769);
    INFO_ADDCHOICE(0x1575a, "You want to get rid of us already?", 0x1576a);
}

func void DIA_KURT_GQ001_START_WHEREISJORNISHESAFE_YOUFOUNDSOMETHING() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_YouFoundSomething_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_YouFoundSomething_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_YouFoundSomething_701_03");
    DIA_KURT_GQ001_JORN_LOST();
}

func void DIA_KURT_GQ001_UNDERSTANDABLEHAVEANICEDAY() {
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_Safe_701_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_Safe_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_Safe_701_03");
    INFO_CLEARCHOICES(0x1575a);
    INFO_ADDCHOICE(0x1575a, "Who should I ask about Jorn?", 0x1576b);
    INFO_ADDCHOICE(0x1575a, "Do you have any enemies in the village?", 0x1576c);
    INFO_ADDCHOICE(0x1575a, "What makes you think the city will be safer than the village?", 0x1576d);
}

func void DIA_KURT_GQ001_START_WHEREISJORNISHESAFE_ITSYOURFAULT_UNDERSTANDABLEHAVEANICEDAY() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_UnderstandableHaveANiceDay_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_UnderstandableHaveANiceDay_701_02");
    DIA_KURT_GQ001_UNDERSTANDABLEHAVEANICEDAY();
}

func void DIA_KURT_GQ001_START_WHEREISJORNISHESAFE_ITSYOURFAULT_TURNBACK() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_TurnBack_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_TurnBack_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_TurnBack_701_03");
    DIA_KURT_GQ001_UNDERSTANDABLEHAVEANICEDAY();
}

func void DIA_KURT_GQ001_START_WHEREISJORNISHESAFE_ITSYOURFAULT_UNDERSTANDABLEHAVEANICEDAY_WHERESHOULDISTART() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_WhereShouldIStart_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhereShouldIStart_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhereShouldIStart_701_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhereShouldIStart_701_04");
    GQ001_KURTINFORMATIONJORN = (GQ001_KURTINFORMATIONJORN) + (1);
    GQ001_KURTINFORMATIONJORNEND = (GQ001_KURTINFORMATIONJORNEND) + (1);
    if ((GQ001_KURTINFORMATIONJORN) >= (3)) {
        DIA_KURT_GQ001_CHOICE();
    };
    if ((GQ001_KURTINFORMATIONJORNEND) >= (7)) {
        DIA_KURT_GQ001_BYE();
    };
}

func void DIA_KURT_GQ001_START_WHEREISJORNISHESAFE_ITSYOURFAULT_UNDERSTANDABLEHAVEANICEDAY_YOUHAVEENEMIES() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_YouHaveEnemies_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_YouHaveEnemies_701_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_YouHaveEnemies_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_YouHaveEnemies_701_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_YouHaveEnemies_701_05");
    GQ001_KURTINFORMATIONJORN = (GQ001_KURTINFORMATIONJORN) + (1);
    GQ001_KURTINFORMATIONJORNEND = (GQ001_KURTINFORMATIONJORNEND) + (1);
    if ((GQ001_KURTINFORMATIONJORN) >= (3)) {
        DIA_KURT_GQ001_CHOICE();
    };
    if ((GQ001_KURTINFORMATIONJORNEND) >= (7)) {
        DIA_KURT_GQ001_BYE();
    };
}

func void DIA_KURT_GQ001_START_WHEREISJORNISHESAFE_ITSYOURFAULT_UNDERSTANDABLEHAVEANICEDAY_WHYCITY() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_Start_WhyCity_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhyCity_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_Start_WhyCity_701_03");
    GQ001_KURTINFORMATIONJORN = (GQ001_KURTINFORMATIONJORN) + (1);
    GQ001_KURTINFORMATIONJORNEND = (GQ001_KURTINFORMATIONJORNEND) + (1);
    if ((GQ001_KURTINFORMATIONJORN) >= (3)) {
        DIA_KURT_GQ001_CHOICE();
    };
    if ((GQ001_KURTINFORMATIONJORNEND) >= (7)) {
        DIA_KURT_GQ001_BYE();
    };
}

instance DIA_KURT_GQ001_FOUNDYOURGOLD(C_INFO) {
    NPC = 0xe0a6;
    NR = 15;
    CONDITION = DIA_KURT_GQ001_FOUNDYOURGOLD_CONDITION;
    INFORMATION = DIA_KURT_GQ001_FOUNDYOURGOLD_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Here, it looks like I found your gold.";
}

func int DIA_KURT_GQ001_FOUNDYOURGOLD_CONDITION() {
    if (((NPC_HASITEMS(OTHER, 0x9118)) >= (1)) || ((NPC_HASITEMS(OTHER, 0x9116)) >= (1))) {
        if ((LOG_GETSTATUS(MIS_GQ001)) == (LOG_RUNNING)) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_GQ001_FOUNDYOURGOLD_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundYourGold_15_01");
    if (((((GQ001_KURTFOUNDPOCKET01) == (TRUE)) && ((GQ001_KURTFOUNDPOCKET02) == (TRUE))) && ((NPC_HASITEMS(OTHER, 0x9116)) >= (1))) && ((NPC_HASITEMS(OTHER, 0x9118)) >= (1))) {
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_02");
    };
    if ((((GQ001_KURTFOUNDPOCKET01) == (TRUE)) && ((NPC_HASITEMS(OTHER, 0x9116)) >= (1))) || (((GQ001_KURTFOUNDPOCKET02) == (TRUE)) && ((NPC_HASITEMS(OTHER, 0x9118)) >= (1)))) {
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_03");
    };
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundYourGold_15_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundYourGold_15_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_06");
    if (((((GQ001_KURTFOUNDPOCKET01) == (TRUE)) && ((GQ001_KURTFOUNDPOCKET02) == (TRUE))) && ((NPC_HASITEMS(OTHER, 0x9116)) >= (1))) && ((NPC_HASITEMS(OTHER, 0x9118)) >= (1))) {
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_07");
        B_GIVEINVITEMS(OTHER, SELF, 0x9118, 1);
        B_USEFAKEBAG();
        B_GIVEINVITEMS(OTHER, SELF, 0x9116, 1);
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_08");
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_09");
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_10");
        INFO_CLEARCHOICES(0x1576e);
        INFO_ADDCHOICE(0x1576e, "Thanks. I'll put them to good use.", 0x15771);
        INFO_ADDCHOICE(0x1576e, "Keep them. You'll need them more.", 0x15772);
        INFO_ADDCHOICE(0x1576e, "As a reward, you could give me one pouch.", 0x15773);
    };
    if (((GQ001_KURTFOUNDPOCKET01) == (TRUE)) && ((NPC_HASITEMS(OTHER, 0x9116)) >= (1))) {
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_11");
        B_GIVEINVITEMS(OTHER, SELF, 0x9116, 1);
        B_USEFAKEBAG();
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_12");
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_13");
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_09");
        B_GIVEPLAYERXP(XP_FOUNDKURTPOCKET);
        GQ001_KURTTOOKHISPOCKET = TRUE;
    };
    if (((GQ001_KURTFOUNDPOCKET02) == (TRUE)) && ((NPC_HASITEMS(OTHER, 0x9118)) >= (1))) {
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_11");
        B_GIVEINVITEMS(OTHER, SELF, 0x9118, 1);
        B_USEFAKEBAG();
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_12");
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_13");
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_701_09");
        B_GIVEPLAYERXP(XP_FOUNDKURTPOCKET);
        GQ001_KURTTOOKHISPOCKET = TRUE;
    };
}

func void DIA_KURT_GQ001_FOUNDYOURGOLD_THANKSFORTHEGOLD() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundYourGold_ThanksForTheGold_15_01");
    AI_LOGENTRY(TOPIC_GQ001, LOG_GQ001_FOUNDYOURGOLDV3);
    CREATEINVITEMS(SELF, 0x859b, GQ001_KURTFROMGOLD);
    B_GIVEINVITEMS(SELF, OTHER, 0x859b, GQ001_KURTFROMGOLD);
    INFO_CLEARCHOICES(0x1576e);
    AI_STOPPROCESSINFOS(OTHER);
}

func void DIA_KURT_GQ001_FOUNDYOURGOLD_YOUNEEDTHISMORE() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundYourGold_YouNeedThisMore_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_YouNeedThisMore_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_YouNeedThisMore_701_03");
    AI_LOGENTRY(TOPIC_GQ001, LOG_GQ001_FOUNDYOURGOLDV1);
    B_GIVEPLAYERXP(XP_REFUSETAKEGOLDFROMKURT);
    INFO_CLEARCHOICES(0x1576e);
    AI_STOPPROCESSINFOS(SELF);
}

func void DIA_KURT_GQ001_FOUNDYOURGOLD_ONEPOCKET() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundYourGold_OnePocket_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_OnePocket_701_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundYourGold_OnePocket_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundYourGold_OnePocket_701_04");
    B_GIVEINVITEMS(SELF, OTHER, 0x9116, 1);
    AI_LOGENTRY(TOPIC_GQ001, LOG_GQ001_FOUNDYOURGOLDV2);
    INFO_CLEARCHOICES(0x1576e);
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_KURT_GQ001_WANTTHATGOLD(C_INFO) {
    NPC = 0xe0a6;
    NR = 16;
    CONDITION = DIA_KURT_GQ001_WANTTHATGOLD_CONDITION;
    INFORMATION = DIA_KURT_GQ001_WANTTHATGOLD_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "As a reward, you could give me some of that gold.";
}

func int DIA_KURT_GQ001_WANTTHATGOLD_CONDITION() {
    if ((GQ001_KURTTOOKHISPOCKET) == (TRUE)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_GQ001_WANTTHATGOLD_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_WantThatGold_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_WantThatGold_701_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundYourGold_OnePocket_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_WantThatGold_701_03");
    CREATEINVITEMS(SELF, 0x859b, GQ001_KURTFROMGOLD);
    B_GIVEINVITEMS(SELF, OTHER, 0x859b, GQ001_KURTFROMGOLD);
    AI_LOGENTRY(TOPIC_GQ001, LOG_GQ001_FOUNDYOURGOLDV4);
}

instance DIA_KURT_GQ001_FOUNDRING(C_INFO) {
    NPC = 0xe0a6;
    NR = 17;
    CONDITION = DIA_KURT_GQ001_FOUNDRING_CONDITION;
    INFORMATION = DIA_KURT_GQ001_FOUNDRING_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I found this strange ring by Jorn's bed.";
}

func int DIA_KURT_GQ001_FOUNDRING_CONDITION() {
    if ((NPC_HASITEMS(OTHER, 0x911a)) >= (1)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_GQ001_FOUNDRING_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundRing_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundRing_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundRing_701_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundRing_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundRing_701_05");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundRing_15_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundRing_701_07");
    GQ001_KURTINFORMATIONJORN = 0;
    INFO_CLEARCHOICES(0x15777);
    INFO_ADDCHOICE(0x15777, "What do we do with him?", 0x1577b);
    INFO_ADDCHOICE(0x15777, "Maybe that ring belonged to one of the kidnappers?", 0x1577c);
}

func void DIA_KURT_GQ001_FOUNDRING_WHATDOWEDO_WHATNEXT() {
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundRing_WhatDoWeDo_701_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundRing_WhatDoWeDo_701_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundRing_WhatDoWeDo_701_05");
    INFO_CLEARCHOICES(0x15777);
    INFO_ADDCHOICE(0x15777, "I think I'll keep that ring after all.", 0x1577d);
    INFO_ADDCHOICE(0x15777, "Okay, take it.", 0x1577e);
}

func void DIA_KURT_GQ001_FOUNDRING_WHATDOWEDO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundRing_WhatDoWeDo_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundRing_WhatDoWeDo_701_02");
    GQ001_KURTINFORMATIONJORN = (GQ001_KURTINFORMATIONJORN) + (1);
    if ((GQ001_KURTINFORMATIONJORN) >= (2)) {
        DIA_KURT_GQ001_FOUNDRING_WHATDOWEDO_WHATNEXT();
    };
}

func void DIA_KURT_GQ001_FOUNDRING_RINGNOTJORN() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundRing_RingNotJorn_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundRing_RingNotJorn_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundRing_RingNotJorn_701_03");
    GQ001_KURTINFORMATIONJORN = (GQ001_KURTINFORMATIONJORN) + (1);
    if ((GQ001_KURTINFORMATIONJORN) >= (2)) {
        DIA_KURT_GQ001_FOUNDRING_WHATDOWEDO_WHATNEXT();
    };
}

func void DIA_KURT_GQ001_FOUNDRING_WHATDOWEDO_IWILLTAKETHATRING() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundRing_IWillTakeThatRing_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundRing_IWillTakeThatRing_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundRing_IWillTakeThatRing_701_04");
    AI_LOGENTRY(TOPIC_GQ001, LOG_GQ001_RINGV1);
    INFO_CLEARCHOICES(0x15777);
    AI_STOPPROCESSINFOS(SELF);
}

func void DIA_KURT_GQ001_FOUNDRING_WHATDOWEDO_TAKETHATRING() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_FoundRing_TakeThatRing_15_01");
    B_GIVEINVITEMS(OTHER, SELF, 0x911a, 1);
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_FoundRing_TakeThatRing_701_02");
    AI_LOGENTRY(TOPIC_GQ001, LOG_GQ001_RINGV2);
    INFO_CLEARCHOICES(0x15777);
    GQ001_KURTHASSTRANGERING = TRUE;
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_KURT_GQ001_ANYINFORMATIONJORN(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_GQ001_ANYINFORMATIONJORN_CONDITION;
    INFORMATION = DIA_KURT_GQ001_ANYINFORMATIONJORN_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_GQ001_ANYINFORMATIONJORN_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q201)) == (LOG_RUNNING)) && (NPC_ISINSTATE(SELF, 0xf09f))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_GQ001_ANYINFORMATIONJORN_INFO() {
    GQ001_CANTRYENTERCITY = TRUE;
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_05");
    if ((GQ001_VILLAGEINFORMATIONJORNCOUNT) >= (1)) {
        AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_06");
        B_GIVEPLAYERXP((XP_VILLAGEINFORMATIONJORN) * (GQ001_VILLAGEINFORMATIONJORNCOUNT));
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_08");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_09");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_10");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_11");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_12");
    if (((GQ001_TALKEDWITHTERRYABOUTJORN) == (TRUE)) || ((GQ001_TALKEDWITHHUNTER) == (TRUE))) {
        AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_13");
        if ((GQ001_TALKEDWITHTERRYABOUTJORN) == (TRUE)) {
            AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_14");
            B_GIVEPLAYERXP(XP_THERRYINFORMATIONJORN);
        };
        if ((GQ001_TALKEDWITHHUNTER) == (TRUE)) {
            AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_15");
            B_GIVEPLAYERXP(XP_GQ001_HUNTERINFORMATIONJORN);
        };
        AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_16");
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_21");
    };
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_17");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_18");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_19");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_20");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_21");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_22");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_23");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_24");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_25");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_26");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_27");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_28");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_29");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_30");
    if (NPC_KNOWSINFO(OTHER, 0x12da0)) {
        AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_31");
        if ((GQ001_KURTHASSTRANGERING) == (TRUE)) {
            AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_32");
            AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_33");
            AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_34");
        } else {
            AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_35");
        };
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_36");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_37");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_38");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_39");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_40");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_41");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_42");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_43");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_44");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_45");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_46");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_47");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_48");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_50");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_AnyInformationJorn_701_51");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_AnyInformationJorn_15_52");
    AI_LOGENTRY(TOPIC_Q201, LOG_GQ001_ANYINFORMATIONJORN);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, START);
    FF_APPLYONCEEXTGT(0xf213, 0, -(1));
}

instance DIA_KURT_GQ001_NOINFORMATIONJORN(C_INFO) {
    NPC = 0xe0a6;
    NR = 2;
    CONDITION = DIA_KURT_GQ001_NOINFORMATIONJORN_CONDITION;
    INFORMATION = DIA_KURT_GQ001_NOINFORMATIONJORN_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_GQ001_NOINFORMATIONJORN_CONDITION() {
    if (((((((GQ001_INFOFROMDICKON) == (FALSE)) && ((KAPITEL) >= (2))) && (NPC_KNOWSINFO(OTHER, 0x1575a))) && ((GQ001_KURTGOTOALBYN) == (TRUE))) && (NPC_ISINSTATE(SELF, 0xf09f))) && ((NPC_GETDISTTOWP(SELF, "PART12_RAMSEYHOUSE_06")) < (500))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_GQ001_NOINFORMATIONJORN_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_NoInformationJorn_701_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_NoInformationJorn_701_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_GQ001_NoInformationJorn_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_NoInformationJorn_701_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GQ001_NoInformationJorn_701_05");
}

instance DIA_KURT_CITY(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_CITY_CONDITION;
    INFORMATION = DIA_KURT_CITY_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_CITY_CONDITION() {
    if (((SQ116_KURTLETTER_READ) == (TRUE)) && ((KAPITEL) >= (2))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_CITY_INFO() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_City_701_01");
    INFO_CLEARCHOICES(0x15785);
    INFO_ADDCHOICE(0x15785, "The city is even more hostile than the village.", 0x15788);
    INFO_ADDCHOICE(0x15785, "I like this place. I feel like it offers a lot of opportunities.", 0x15789);
}

func void DIA_KURT_CITY_BAD() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_City_Bad_15_01");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_City_Bad_701_02");
    INFO_CLEARCHOICES(0x15785);
    AI_RESETFACEANI(SELF);
}

func void DIA_KURT_CITY_GOOD() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_City_Good_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_City_Good_701_02");
    INFO_CLEARCHOICES(0x15785);
    AI_RESETFACEANI(SELF);
}

instance DIA_KURT_JORNNEXTMOVE(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_JORNNEXTMOVE_CONDITION;
    INFORMATION = DIA_KURT_JORNNEXTMOVE_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "What about Jorn? Did you manage to find out anything?";
}

func int DIA_KURT_JORNNEXTMOVE_CONDITION() {
    if (((NPC_KNOWSINFO(OTHER, 0x15785)) && ((HERO.GUILD) == (GIL_VLK))) && ((KAPITEL) != (3))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_JORNNEXTMOVE_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_JornNextMove_15_01");
    AI_RESETFACEANI(OTHER);
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_JornNextMove_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_JornNextMove_701_03");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_JornNextMove_701_04");
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_JornNextMove_701_05");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_JornNextMove_701_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_JornNextMove_701_07");
    INFO_CLEARCHOICES(0x1578a);
    INFO_ADDCHOICE(0x1578a, "Why would someone kidnap my brother?", 0x15791);
}

var int KURT_JORNNEXTMOVE_WHY_GOOD = 0;
var int KURT_JORNNEXTMOVE_WHY_FRIEND = 0;
var int KURT_JORNNEXTMOVE_WHY_SEARCH = 0;
func void DIA_KURT_JORNNEXTMOVE_CHOICES() {
    INFO_CLEARCHOICES(0x1578a);
    if (((KURT_JORNNEXTMOVE_WHY_GOOD) == (TRUE)) || ((KURT_JORNNEXTMOVE_WHY_FRIEND) == (TRUE))) {
        INFO_ADDCHOICE(0x1578a, DIALOG_BACK, 0x15795);
    };
    if (((KURT_JORNNEXTMOVE_WHY_GOOD) == (TRUE)) && ((KURT_JORNNEXTMOVE_WHY_FRIEND) == (TRUE))) {
        if ((KURT_JORNNEXTMOVE_WHY_SEARCH) == (FALSE)) {
            INFO_ADDCHOICE(0x1578a, "Shall we try to put up some notices about who we're looking for?", 0x15794);
        };
    };
    if ((KURT_JORNNEXTMOVE_WHY_GOOD) == (FALSE)) {
        INFO_ADDCHOICE(0x1578a, "No, Jorn wasn't an alcoholic.", 0x15792);
    };
    if ((KURT_JORNNEXTMOVE_WHY_FRIEND) == (FALSE)) {
        INFO_ADDCHOICE(0x1578a, "I don't recall him being at odds with anyone...", 0x15793);
    };
}

func void DIA_KURT_JORNNEXTMOVE_WHY() {
    AI_STARTFACEANI(OTHER, S_SURPRISE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_JornNextMove_Why_15_01");
    AI_RESETFACEANI(OTHER);
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_JornNextMove_Why_701_03");
    DIA_KURT_JORNNEXTMOVE_CHOICES();
}

func void DIA_KURT_JORNNEXTMOVE_WHY_GOOD() {
    KURT_JORNNEXTMOVE_WHY_GOOD = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_JornNextMove_Good_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_JornNextMove_Good_701_02");
    DIA_KURT_JORNNEXTMOVE_CHOICES();
}

func void DIA_KURT_JORNNEXTMOVE_WHY_FRIEND() {
    KURT_JORNNEXTMOVE_WHY_FRIEND = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_JornNextMove_Friend_15_01");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_JornNextMove_Friend_701_02");
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_JornNextMove_Friend_701_03");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_JornNextMove_Friend_701_04");
    DIA_KURT_JORNNEXTMOVE_CHOICES();
}

func void DIA_KURT_JORNNEXTMOVE_WHY_SEARCH() {
    KURT_JORNNEXTMOVE_WHY_SEARCH = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_JornPosterSearch_15_01");
    AI_RESETFACEANI(OTHER);
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_JornPosterSearch_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_JornPosterSearch_701_03");
    DIA_KURT_JORNNEXTMOVE_CHOICES();
}

func void DIA_KURT_JORNNEXTMOVE_WHY_BACK() {
    INFO_CLEARCHOICES(0x1578a);
    AI_RESETFACEANI(SELF);
}

instance DIA_KURT_SQ116_START(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_SQ116_START_CONDITION;
    INFORMATION = DIA_KURT_SQ116_START_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "You said something about a proposal.";
}

func int DIA_KURT_SQ116_START_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ116)) == (LOG_RUNNING)) && ((SQ116_KURTLETTER_READ) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_SQ116_START_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_SQ116_Start_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_SQ116_Start_701_02");
    INFO_CLEARCHOICES(0x15796);
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (10)) {
        INFO_ADDCHOICE(0x15796, "I can give you some of it.", 0x1579a);
    };
    INFO_ADDCHOICE(0x15796, "We all want gold.", 0x1579b);
}

func void DIA_KURT_SQ116_START_NEXT() {
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_SQ116_Start_Next_701_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_SQ116_Start_Next_701_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_SQ116_Start_Next_701_03");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_SQ116_Start_Next_701_04");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_SQ116_Start_Next_701_05");
    INFO_CLEARCHOICES(0x15796);
    INFO_ADDCHOICE(0x15796, "I don't have time right now.", 0x1579e);
    INFO_ADDCHOICE(0x15796, "I'll get your gold back.", 0x1579c);
}

func void DIA_KURT_SQ116_START_GIVE() {
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_SQ116_Start_Give_15_01");
    DIA_KURT_SQ116_START_NEXT();
}

func void DIA_KURT_SQ116_START_ALL() {
    AI_STARTFACEANI(OTHER, S_DOUBT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_SQ116_Start_All_15_01");
    DIA_KURT_SQ116_START_NEXT();
}

func void DIA_KURT_SQ116_START_ALL_NEXT_YES() {
    SQ116_TAKEKURTGOLD = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_SQ116_Start_Yes_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_SQ116_Start_Yes_701_02");
    AI_RESETFACEANI(SELF);
    INFO_CLEARCHOICES(0x15796);
    AI_LOGENTRY(TOPIC_SQ116, LOG_SQ116_KURT_VINEYARD);
}

var int KURT_SQ116_TAKEQUEST = 0;
func void DIA_KURT_SQ116_START_ALL_NEXT_NO() {
    KURT_SQ116_TAKEQUEST = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_SQ116_Start_No_15_01");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_SQ116_Start_No_701_02");
    AI_RESETFACEANI(SELF);
    INFO_CLEARCHOICES(0x15796);
}

instance DIA_KURT_SQ116_TAKEQUEST(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_SQ116_TAKEQUEST_CONDITION;
    INFORMATION = DIA_KURT_SQ116_TAKEQUEST_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I'll get your gold back.";
}

func int DIA_KURT_SQ116_TAKEQUEST_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_SQ116)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x15796))) && ((KURT_SQ116_TAKEQUEST) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_SQ116_TAKEQUEST_INFO() {
    DIA_KURT_SQ116_START_ALL_NEXT_YES();
}

instance DIA_KURT_Q308_WHATHAPPEND(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_Q308_WHATHAPPEND_CONDITION;
    INFORMATION = DIA_KURT_Q308_WHATHAPPEND_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_Q308_WHATHAPPEND_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q308)) == (LOG_RUNNING)) && ((Q308_LEONKUNOCUTSCENE) == (2))) && ((Q308_VOLKERHOUSECUTSCENE) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_Q308_WHATHAPPEND_INFO() {
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q308_WhatHappend_03_01");
    INFO_CLEARCHOICES(0x157a2);
    INFO_ADDCHOICE(0x157a2, "I was looking for Jorn.", 0x157a5);
}

func void DIA_KURT_Q308_WHATHAPPEND_JORN() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q308_WhatHappend_Jorn_15_01");
    AI_STARTFACEANI(SELF, "S_SAD", 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q308_WhatHappend_Jorn_03_02");
    INFO_CLEARCHOICES(0x157a2);
    INFO_ADDCHOICE(0x157a2, "What are you doing here?", 0x157a6);
}

func void DIA_KURT_Q308_WHATHAPPEND_JORN_WHAT() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q308_WhatHappend_What_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q308_WhatHappend_What_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q308_WhatHappend_What_03_03");
    INFO_CLEARCHOICES(0x157a2);
    INFO_ADDCHOICE(0x157a2, "Why would Volker help in the search?", 0x157a7);
}

func void DIA_KURT_Q308_WHATHAPPEND_JORN_WHAT_WHY() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q308_WhatHappend_Why_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q308_WhatHappend_Why_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q308_WhatHappend_Why_03_03");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q308_WhatHappend_Why_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q308_WhatHappend_Why_03_05");
    AI_RESETFACEANI(OTHER);
    INFO_CLEARCHOICES(0x157a2);
    INFO_ADDCHOICE(0x157a2, "I'm here to help close the investigation.", 0x157a8);
}

func void DIA_KURT_Q308_WHATHAPPEND_JORN_WHAT_WHY_HELP() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q308_WhatHappend_Help_15_01");
    AI_STARTFACEANI(SELF, "S_SURPRISE", 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q308_WhatHappend_Help_03_02");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q308_WhatHappend_Help_03_03");
    AI_RESETFACEANI(SELF);
    INFO_CLEARCHOICES(0x157a2);
    NPC_EXCHANGEROUTINE(SELF, "SQ116_HARBOUR");
}

instance DIA_KURT_Q308_WHATNEXT(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_Q308_WHATNEXT_CONDITION;
    INFORMATION = DIA_KURT_Q308_WHATNEXT_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "What are you gonna do now?";
}

func int DIA_KURT_Q308_WHATNEXT_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q308)) == (LOG_RUNNING)) && ((NPC_GETDISTTOWP(SELF, "PARTM4_PATH_98")) <= (0x1388))) && ((Q308_VOLKERHOUSECUTSCENE) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_Q308_WHATNEXT_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Q308_WhatNext_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Q308_WhatNext_03_02");
    AI_STOPPROCESSINFOS(SELF);
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
}

instance DIA_KURT_ANYTHINGNEW(C_INFO) {
    NPC = 0xe0a6;
    NR = 800;
    CONDITION = DIA_KURT_ANYTHINGNEW_CONDITION;
    INFORMATION = DIA_KURT_ANYTHINGNEW_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Did you find out anything?";
}

func int DIA_KURT_ANYTHINGNEW_CONDITION() {
    if (((NPC_GETDISTTOWP(SELF, "HARBOUR_TAVERN_77")) <= (0x7d0)) && ((KAPITEL) >= (3))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_ANYTHINGNEW_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_AnythingNew_15_01");
    AI_STARTFACEANI(SELF, "S_SAD", 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_AnythingNew_03_02");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_AnythingNew_03_03");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
}

instance DIA_KURT_GUILDREACTION(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_GUILDREACTION_CONDITION;
    INFORMATION = DIA_KURT_GUILDREACTION_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_GUILDREACTION_CONDITION() {
    if ((LOG_GETSTATUS(MIS_Q308)) == (0)) {
        if (((OTHER.GUILD) == (GIL_MIL)) || ((OTHER.GUILD) == (GIL_SLD))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_GUILDREACTION_INFO() {
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    if ((OTHER.GUILD) == (GIL_SLD)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GuildReaction_03_01");
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GuildReaction_03_02");
    };
    if ((OTHER.GUILD) == (GIL_MIL)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GuildReaction_03_03");
        AI_OUTPUT(SELF, OTHER, "DIA_Kurt_GuildReaction_03_04");
    };
    B_GIVEPLAYERXP(XP_KURT_GUILDREACTION);
    AI_RESETFACEANI(SELF);
}

instance DIA_KURT_HAVEN(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_HAVEN_CONDITION;
    INFORMATION = DIA_KURT_HAVEN_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I think I've found a trace...";
}

func int DIA_KURT_HAVEN_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q205)) == (LOG_SUCCESS)) || ((LOG_GETSTATUS(MIS_Q206)) == (LOG_SUCCESS))) {
        if ((LOG_GETSTATUS(MIS_Q312)) == (0)) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_HAVEN_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Haven_15_01");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Haven_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_Haven_15_03");
    AI_STARTFACEANI(SELF, "S_THINK", 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Haven_03_04");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_Haven_03_05");
    B_GIVEPLAYERXP(XP_KURT_HAVEN);
    AI_RESETFACEANI(SELF);
}

instance DIA_KURT_AFTERINVESTIGATION(C_INFO) {
    NPC = 0xe0a6;
    NR = 1;
    CONDITION = DIA_KURT_AFTERINVESTIGATION_CONDITION;
    INFORMATION = DIA_KURT_AFTERINVESTIGATION_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_KURT_AFTERINVESTIGATION_CONDITION() {
    if ((LOG_GETSTATUS(MIS_Q308)) == (LOG_SUCCESS)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_KURT_AFTERINVESTIGATION_INFO() {
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_AfterInvestigation_03_01");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_AfterInvestigation_03_02");
    INFO_CLEARCHOICES(0x157b5);
    INFO_ADDCHOICE(0x157b5, "It's a long story...", 0x157b8);
}

func void DIA_KURT_AFTERINVESTIGATION_LONGSTORY() {
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_AfterInvestigation_LongStory_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_AfterInvestigation_LongStory_15_02");
    AI_STARTFACEANI(SELF, "S_TIRED", 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_AfterInvestigation_LongStory_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_AfterInvestigation_LongStory_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_AfterInvestigation_LongStory_03_05");
    INFO_CLEARCHOICES(0x157b5);
    INFO_ADDCHOICE(0x157b5, "I'm sorry, uncle, I can barely support myself...", 0x157bc);
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (KURT_WANTSGOLD_V2)) {
        INFO_ADDCHOICE(0x157b5, DIALOG_GIVE250G, 0x157bb);
    };
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (KURT_WANTSGOLD_V1)) {
        INFO_ADDCHOICE(0x157b5, DIALOG_GIVE100G, 0x157ba);
    };
}

func void DIA_KURT_AFTERINVESTIGATION_LONGSTORY_NEXT() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_AfterInvestigation_Next_03_01");
    INFO_CLEARCHOICES(0x157b5);
    AI_RESETFACEANI(SELF);
}

func void DIA_KURT_AFTERINVESTIGATION_LONGSTORY_GIVE100() {
    KURT_GIVENGOLD = 2;
    NPC_REMOVEINVITEMS(SELF, 0x859b, KURT_WANTSGOLD_V1);
    B_GIVEPLAYERXP((XP_KURT_GIVEGOLD) + (KURT_WANTSGOLD_V1));
    B_GIVEINVITEMS(OTHER, SELF, 0x859b, KURT_WANTSGOLD_V1);
    DIA_KURT_AFTERINVESTIGATION_LONGSTORY_NEXT();
}

func void DIA_KURT_AFTERINVESTIGATION_LONGSTORY_GIVE250() {
    KURT_GIVENGOLD = 1;
    NPC_REMOVEINVITEMS(SELF, 0x859b, KURT_WANTSGOLD_V2);
    B_GIVEPLAYERXP((XP_KURT_GIVEGOLD) + (KURT_WANTSGOLD_V2));
    B_GIVEINVITEMS(OTHER, SELF, 0x859b, KURT_WANTSGOLD_V2);
    DIA_KURT_AFTERINVESTIGATION_LONGSTORY_NEXT();
}

func void DIA_KURT_AFTERINVESTIGATION_LONGSTORY_SORRY() {
    AI_STARTFACEANI(OTHER, "S_TIRED", 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Kurt_AfterInvestigation_Sorry_15_01");
    AI_STARTFACEANI(SELF, "S_SAD", 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Kurt_AfterInvestigation_Sorry_03_02");
    INFO_CLEARCHOICES(0x157b5);
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
}

