var int OKTAV_CHANGE1HSWORDQUESTION = 0;
var int OKTAV_ARMORQUESTION = 0;
var int OKTAV_HEALQUESTION = 0;
instance DIA_OKTAV_EXIT(C_INFO) {
    NPC = 0xce55;
    NR = 999;
    CONDITION = DIA_OKTAV_EXIT_CONDITION;
    INFORMATION = DIA_OKTAV_EXIT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_ENDE;
}

func int DIA_OKTAV_EXIT_CONDITION() {
    return TRUE;
}

func void DIA_OKTAV_EXIT_INFO() {
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_OKTAV_CANYOUTRAIN(C_INFO) {
    NPC = 0xce55;
    NR = 20;
    CONDITION = DIA_OKTAV_CANYOUTRAIN_CONDITION;
    INFORMATION = DIA_OKTAV_CANYOUTRAIN_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Could I train with you?";
}

func int DIA_OKTAV_CANYOUTRAIN_CONDITION() {
    if ((((OTHER.GUILD) == (GIL_MIL)) && ((LOG_GETSTATUS(MIS_Q203)) == (LOG_SUCCESS))) && (NPC_KNOWSINFO(OTHER, 0x10340))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_CANYOUTRAIN_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_Canyoutrain_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Canyoutrain_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Canyoutrain_03_03");
    LOG_CREATETOPIC(TOPIC_MILITIATEACHER, LOG_NOTE);
    AI_LOGENTRY(TOPIC_MILITIATEACHER, LOG_OKTAV_TEACH);
}

var int OKTAV_NOMORE = 0;
var int OKTAV_CURRENTCRLEVEL = 0;
var int OKTAV_CURRENT2HLEVEL = 0;
var int OKTAV_CURRENTSTRLEVEL = 0;
var string OKTAV_PRINTS = "";
instance DIA_OKTAV_TRAIN(C_INFO) {
    NPC = 0xce55;
    NR = 20;
    CONDITION = DIA_OKTAV_TRAIN_CONDITION;
    INFORMATION = DIA_OKTAV_TRAIN_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Let's train.";
}

func int DIA_OKTAV_TRAIN_CONDITION() {
    if (((NPC_KNOWSINFO(OTHER, 0x10325)) && ((OKTAV_NOMORE) == (FALSE))) && ((OTHER.GUILD) == (GIL_MIL))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_TRAIN_CHOICES() {
    OKTAV_CURRENTCRLEVEL = OTHER.AIVAR[87];
    OKTAV_CURRENT2HLEVEL = OTHER.AIVAR[85];
    OKTAV_CURRENTSTRLEVEL = OTHER.AIVAR[81];
    OKTAV_GOLDCOST = 0;
    INFO_CLEARCHOICES(0x1032d);
    INFO_ADDCHOICE(0x1032d, DIALOG_BACK, 0x10333);
    INFO_ADDCHOICE(0x1032d, B_BUILDLEARNSTRING2(PRINT_LEARNCROSSBOW1, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_CROSSBOW, 1), OKTAV_GOLDCOST), 0x1033d);
    INFO_ADDCHOICE(0x1032d, B_BUILDLEARNSTRING2(PRINT_LEARNCROSSBOW5, (B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_CROSSBOW, 1)) * (5), (OKTAV_GOLDCOST) * (5)), 0x1033f);
    INFO_ADDCHOICE(0x1032d, B_BUILDLEARNSTRING2(PRINT_LEARN2H1, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_2H, 1), OKTAV_GOLDCOST), 0x10335);
    INFO_ADDCHOICE(0x1032d, B_BUILDLEARNSTRING2(PRINT_LEARN2H5, (B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_2H, 1)) * (5), (OKTAV_GOLDCOST) * (5)), 0x10337);
    INFO_ADDCHOICE(0x1032d, B_BUILDLEARNSTRING2(PRINT_LEARNSTR1, B_GETLEARNCOSTATTRIBUTE(OTHER, ATR_STRENGTH, 1), OKTAV_GOLDCOST), 0x10339);
    INFO_ADDCHOICE(0x1032d, B_BUILDLEARNSTRING2(PRINT_LEARNSTR5, B_GETLEARNCOSTATTRIBUTE(OTHER, ATR_STRENGTH, 5), (OKTAV_GOLDCOST) * (5)), 0x1033b);
}

var int DIA_OKTAV_TRAIN_CHOICES.OKTAV_GOLDCOST = 0;
func void DIA_OKTAV_TRAIN_LETSGO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Train_03_02");
    DIA_OKTAV_TRAIN_CHOICES();
}

func void DIA_OKTAV_TRAIN_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_Train_15_00");
    if ((Q205_WEGOTARMOR) == (FALSE)) {
        if ((((OTHER.AIVAR[87]) >= (40)) && ((OTHER.AIVAR[85]) >= (40))) && ((OTHER.AIVAR[81]) >= (50))) {
            B_SAY(SELF, OTHER, "$NoLearnOverPersonalMAX");
            OKTAV_PRINTS = PRINT_MILPROMOTIONNEEDED;
        } else {
            DIA_OKTAV_TRAIN_LETSGO();
        } else {
            /* set_instance(0) */;
        };
    };
    if ((((OTHER.AIVAR[87]) >= (60)) && ((OTHER.AIVAR[85]) >= (60))) && ((OTHER.AIVAR[81]) >= (80))) {
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Train_03_01");
        OKTAV_NOMORE = TRUE;
    };
    DIA_OKTAV_TRAIN_LETSGO();
}

func void DIA_OKTAV_TRAIN_BACK() {
    INFO_CLEARCHOICES(0x1032d);
}

func void DIA_OKTAV_TRAIN_2H_1_GOODJOB() {
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Train_2H1_03_01");
    DIA_OKTAV_TRAIN_CHOICES();
}

func void DIA_OKTAV_TRAIN_2H_1() {
    if ((Q205_WEGOTARMOR) == (FALSE)) {
        if ((OKTAV_CURRENT2HLEVEL) < (OTHER.AIVAR[85])) {
            DIA_OKTAV_TRAIN_2H_1_GOODJOB();
        } else if (((OTHER.AIVAR[85]) >= (40)) && ((OKTAV_CURRENT2HLEVEL) == (OTHER.AIVAR[85]))) {
            B_SAY(SELF, OTHER, "$NoLearnOverPersonalMAX");
            OKTAV_PRINTS = PRINT_MILPROMOTIONNEEDED;
            PRINTSCREEN(OKTAV_PRINTS, -(1), YPOS_LEVELUP, FONT_SCREEN, 2);
            DIA_OKTAV_TRAIN_CHOICES();
        };
    };
    if ((Q205_WEGOTARMOR) == (TRUE)) {
        if ((OKTAV_CURRENT2HLEVEL) < (OTHER.AIVAR[85])) {
            DIA_OKTAV_TRAIN_2H_1_GOODJOB();
        };
    };
    DIA_OKTAV_TRAIN_CHOICES();
}

func void DIA_OKTAV_TRAIN_2H_5_GOODJOB() {
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Train_2H5_03_01");
    DIA_OKTAV_TRAIN_CHOICES();
}

func void DIA_OKTAV_TRAIN_2H_5() {
    if ((Q205_WEGOTARMOR) == (FALSE)) {
        if ((OKTAV_CURRENT2HLEVEL) < (OTHER.AIVAR[85])) {
            DIA_OKTAV_TRAIN_2H_5_GOODJOB();
        } else if (((OTHER.AIVAR[85]) >= (40)) && ((OKTAV_CURRENT2HLEVEL) == (OTHER.AIVAR[85]))) {
            B_SAY(SELF, OTHER, "$NoLearnOverPersonalMAX");
            OKTAV_PRINTS = PRINT_MILPROMOTIONNEEDED;
            PRINTSCREEN(OKTAV_PRINTS, -(1), YPOS_LEVELUP, FONT_SCREEN, 2);
            DIA_OKTAV_TRAIN_CHOICES();
        };
    };
    if ((Q205_WEGOTARMOR) == (TRUE)) {
        if ((OKTAV_CURRENT2HLEVEL) < (OTHER.AIVAR[85])) {
            DIA_OKTAV_TRAIN_2H_5_GOODJOB();
        };
    };
    DIA_OKTAV_TRAIN_CHOICES();
}

func void DIA_OKTAV_TRAIN_STR_1_GOODJOB() {
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Train_STR1_03_01");
    DIA_OKTAV_TRAIN_CHOICES();
}

func void DIA_OKTAV_TRAINSTR_1() {
    if ((Q205_WEGOTARMOR) == (FALSE)) {
        if ((OKTAV_CURRENTSTRLEVEL) < (OTHER.AIVAR[81])) {
            DIA_OKTAV_TRAIN_STR_1_GOODJOB();
        } else if (((OTHER.AIVAR[81]) >= (50)) && ((OKTAV_CURRENTSTRLEVEL) == (OTHER.AIVAR[81]))) {
            B_SAY(SELF, OTHER, "$NoLearnOverPersonalMAX");
            OKTAV_PRINTS = PRINT_MILPROMOTIONNEEDED;
            PRINTSCREEN(OKTAV_PRINTS, -(1), YPOS_LEVELUP, FONT_SCREEN, 2);
            DIA_OKTAV_TRAIN_CHOICES();
        };
    };
    if ((Q205_WEGOTARMOR) == (TRUE)) {
        if ((OKTAV_CURRENTSTRLEVEL) < (OTHER.AIVAR[81])) {
            DIA_OKTAV_TRAIN_STR_1_GOODJOB();
        };
    };
    DIA_OKTAV_TRAIN_CHOICES();
}

func void DIA_OKTAV_TRAIN_STR_5_GOODJOB() {
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Train_STR5_03_01");
    DIA_OKTAV_TRAIN_CHOICES();
}

func void DIA_OKTAV_TRAINSTR_5() {
    if ((Q205_WEGOTARMOR) == (FALSE)) {
        if ((OKTAV_CURRENTSTRLEVEL) < (OTHER.AIVAR[81])) {
            DIA_OKTAV_TRAIN_STR_5_GOODJOB();
        } else if (((OTHER.AIVAR[81]) >= (50)) && ((OKTAV_CURRENTSTRLEVEL) == (OTHER.AIVAR[81]))) {
            B_SAY(SELF, OTHER, "$NoLearnOverPersonalMAX");
            OKTAV_PRINTS = PRINT_MILPROMOTIONNEEDED;
            PRINTSCREEN(OKTAV_PRINTS, -(1), YPOS_LEVELUP, FONT_SCREEN, 2);
            DIA_OKTAV_TRAIN_CHOICES();
        };
    };
    if ((Q205_WEGOTARMOR) == (TRUE)) {
        if ((OKTAV_CURRENTSTRLEVEL) < (OTHER.AIVAR[81])) {
            DIA_OKTAV_TRAIN_STR_5_GOODJOB();
        };
    };
    DIA_OKTAV_TRAIN_CHOICES();
}

func void DIA_OKTAV_TRAIN_CR_1_GOODJOB() {
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Train_CR1_03_01");
    DIA_OKTAV_TRAIN_CHOICES();
}

func void DIA_OKTAV_TRAIN_CR_1() {
    if ((Q205_WEGOTARMOR) == (FALSE)) {
        if ((OKTAV_CURRENTCRLEVEL) < (OTHER.AIVAR[87])) {
            DIA_OKTAV_TRAIN_CR_1_GOODJOB();
        } else if (((OTHER.AIVAR[87]) >= (40)) && ((OKTAV_CURRENTCRLEVEL) == (OTHER.AIVAR[87]))) {
            B_SAY(SELF, OTHER, "$NoLearnOverPersonalMAX");
            OKTAV_PRINTS = PRINT_MILPROMOTIONNEEDED;
            PRINTSCREEN(OKTAV_PRINTS, -(1), YPOS_LEVELUP, FONT_SCREEN, 2);
            DIA_OKTAV_TRAIN_CHOICES();
        };
    };
    if ((Q205_WEGOTARMOR) == (TRUE)) {
        if ((OKTAV_CURRENTCRLEVEL) < (OTHER.AIVAR[87])) {
            DIA_OKTAV_TRAIN_CR_1_GOODJOB();
        };
    };
    DIA_OKTAV_TRAIN_CHOICES();
}

func void DIA_OKTAV_TRAIN_CR_5_GOODJOB() {
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Train_CR5_03_01");
    DIA_OKTAV_TRAIN_CHOICES();
}

func void DIA_OKTAV_TRAIN_CR_5() {
    if ((Q205_WEGOTARMOR) == (FALSE)) {
        if ((OKTAV_CURRENTCRLEVEL) < (OTHER.AIVAR[87])) {
            DIA_OKTAV_TRAIN_CR_5_GOODJOB();
        } else if (((OTHER.AIVAR[87]) >= (40)) && ((OKTAV_CURRENTCRLEVEL) == (OTHER.AIVAR[87]))) {
            B_SAY(SELF, OTHER, "$NoLearnOverPersonalMAX");
            OKTAV_PRINTS = PRINT_MILPROMOTIONNEEDED;
            PRINTSCREEN(OKTAV_PRINTS, -(1), YPOS_LEVELUP, FONT_SCREEN, 2);
            DIA_OKTAV_TRAIN_CHOICES();
        };
    };
    if ((Q205_WEGOTARMOR) == (TRUE)) {
        if ((OKTAV_CURRENTCRLEVEL) < (OTHER.AIVAR[87])) {
            DIA_OKTAV_TRAIN_CR_5_GOODJOB();
        };
    };
    DIA_OKTAV_TRAIN_CHOICES();
}

instance DIA_OKTAV_BOSS(C_INFO) {
    NPC = 0xce55;
    NR = 1;
    CONDITION = DIA_OKTAV_BOSS_CONDITION;
    INFORMATION = DIA_OKTAV_BOSS_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Roderich said you're the one who deals with recruits.";
}

func int DIA_OKTAV_BOSS_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x1021d)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_BOSS_ADDCHOICE() {
    INFO_CLEARCHOICES(0x10340);
    if ((OKTAV_CHANGE1HSWORDQUESTION) == (FALSE)) {
        INFO_ADDCHOICE(0x10340, "Is there any chance to replace the one-handed sword?", 0x10344);
    };
    if ((OKTAV_ARMORQUESTION) == (FALSE)) {
        INFO_ADDCHOICE(0x10340, "What do I need to do to get better armor?", 0x10346);
    };
    if ((OKTAV_HEALQUESTION) == (FALSE)) {
        INFO_ADDCHOICE(0x10340, "What about healing my wounds?", 0x10347);
    };
    INFO_ADDCHOICE(0x10340, "Thanks for talking to me, but I have to go.", 0x10348);
    INFO_CLEARCHOICES(0x1034c);
    INFO_CLEARCHOICES(0x10349);
    INFO_CLEARCHOICES(0x1034f);
}

func void DIA_OKTAV_BOSS_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_Boss_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_03_03");
    DIA_OKTAV_BOSS_ADDCHOICE();
}

func void DIA_OKTAV_BOSS_1HSWORD() {
    OKTAV_CHANGE1HSWORDQUESTION = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_Boss_1HSword_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_1HSword_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_Boss_1HSword_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_1HSword_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_1HSword_03_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_1HSword_03_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_1HSword_03_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_1HSword_03_08");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_1HSword_03_09");
    INFO_CLEARCHOICES(0x10340);
    INFO_ADDCHOICE(0x10340, "What units are we talking about?", 0x10345);
}

func void DIA_OKTAV_BOSS_1HSWORD_SWORDSMAN() {
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_Boss_Swordsman_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_Swordsman_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_Swordsman_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_Swordsman_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_Swordsman_03_05");
    DIA_OKTAV_BOSS_ADDCHOICE();
}

func void DIA_OKTAV_BOSS_ARMOR() {
    OKTAV_ARMORQUESTION = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_Boss_Armor_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_Armor_03_02");
    DIA_OKTAV_BOSS_ADDCHOICE();
}

func void DIA_OKTAV_BOSS_HEAL() {
    OKTAV_HEALQUESTION = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_Boss_Heal_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Boss_Heal_03_02");
    DIA_OKTAV_BOSS_ADDCHOICE();
}

func void DIA_OKTAV_BOSS_BYE() {
    DIA_OKTAV_EXIT_INFO();
    Q203_OKTAV_TALKED = TRUE;
    if ((Q203_LENNART_TALKED) == (TRUE)) {
        AI_LOGENTRY(TOPIC_Q203, LOG_Q203_OKTAVDONE);
    };
    AI_LOGENTRY(TOPIC_Q203, LOG_Q203_OKTAVDONENOLENNART);
}

instance DIA_OKTAV_NEWMILHEAL(C_INFO) {
    NPC = 0xce55;
    NR = 20;
    CONDITION = DIA_OKTAV_NEWMILHEAL_CONDITION;
    INFORMATION = DIA_OKTAV_NEWMILHEAL_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "What about healing my wounds?";
}

func int DIA_OKTAV_NEWMILHEAL_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x10340)) && ((OKTAV_HEALQUESTION) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_NEWMILHEAL_INFO() {
    DIA_OKTAV_BOSS_HEAL();
}

instance DIA_OKTAV_NEWMILARMOR(C_INFO) {
    NPC = 0xce55;
    NR = 20;
    CONDITION = DIA_OKTAV_NEWMILARMOR_CONDITION;
    INFORMATION = DIA_OKTAV_NEWMILARMOR_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "What do I need to do to get better armor?";
}

func int DIA_OKTAV_NEWMILARMOR_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x10340)) && ((OKTAV_ARMORQUESTION) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_NEWMILARMOR_INFO() {
    DIA_OKTAV_BOSS_ARMOR();
}

instance DIA_OKTAV_NEWMILSWORD(C_INFO) {
    NPC = 0xce55;
    NR = 20;
    CONDITION = DIA_OKTAV_NEWMILSWORD_CONDITION;
    INFORMATION = DIA_OKTAV_NEWMILSWORD_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Is there any chance to replace the one-handed sword?";
}

func int DIA_OKTAV_NEWMILSWORD_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x10340)) && ((OKTAV_CHANGE1HSWORDQUESTION) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_NEWMILSWORD_INFO() {
    DIA_OKTAV_BOSS_1HSWORD();
}

instance DIA_OKTAV_QM202_START(C_INFO) {
    NPC = 0xce55;
    NR = 1;
    CONDITION = DIA_OKTAV_QM202_START_CONDITION;
    INFORMATION = DIA_OKTAV_QM202_START_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Is there any work for me?";
}

func int DIA_OKTAV_QM202_START_CONDITION() {
    if ((((KAPITEL) >= (2)) && ((HERO.GUILD) == (GIL_MIL))) && (NPC_KNOWSINFO(OTHER, 0x10340))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

var int OKTAV_QM202_START_HOW = 0;
var int OKTAV_QM202_START_WHERE = 0;
var int OKTAV_QM202_START_ROOKIE = 0;
func void DIA_OKTAV_QM202_START_NEXT() {
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Start_Next_03_01");
    LOG_CREATETOPIC(TOPIC_QM202, LOG_MISSION);
    LOG_SETSTATUS(_@(MIS_QM202), TOPIC_QM202, LOG_RUNNING);
    AI_LOGENTRY(TOPIC_QM202, LOG_QM202_START);
    B_STARTOTHERROUTINE(MIL_4017_ARWID, START);
    NPC_REFRESH(MIL_4017_ARWID);
    TELEPORTNPCTOWP(0xcca0, MIL_4017_ARWID.WP);
}

func void DIA_OKTAV_QM202_START_CHOICES() {
    INFO_CLEARCHOICES(0x10352);
    if ((((OKTAV_QM202_START_HOW) == (FALSE)) || ((OKTAV_QM202_START_WHERE) == (FALSE))) || ((OKTAV_QM202_START_ROOKIE) == (FALSE))) {
        if ((OKTAV_QM202_START_HOW) == (FALSE)) {
            INFO_ADDCHOICE(0x10352, "How do we convince them to join the guard?", 0x1035c);
        };
        if ((OKTAV_QM202_START_WHERE) == (FALSE)) {
            INFO_ADDCHOICE(0x10352, "Where should we look for them?", 0x1035b);
        };
        if ((OKTAV_QM202_START_ROOKIE) == (FALSE)) {
            INFO_ADDCHOICE(0x10352, "Inexperienced guards are in charge of recruiting?", 0x1035a);
        };
    };
    DIA_OKTAV_QM202_START_NEXT();
}

func void DIA_OKTAV_QM202_START_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM202_Start_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Start_03_02");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Start_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Start_03_04");
    DIA_OKTAV_QM202_START_CHOICES();
}

func void DIA_OKTAV_QM202_START_ROOKIE() {
    OKTAV_QM202_START_ROOKIE = TRUE;
    AI_STARTFACEANI(OTHER, S_SURPRISE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM202_Start_Rookie_15_01");
    if ((MARVIN_MILITIASPECIALIZATION) >= (1)) {
        AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Start_Rookie_03_04");
    };
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Start_Rookie_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Start_Rookie_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Start_Rookie_03_05");
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
    DIA_OKTAV_QM202_START_CHOICES();
}

func void DIA_OKTAV_QM202_START_WHERE() {
    OKTAV_QM202_START_WHERE = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM202_Start_Where_15_01");
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Start_Where_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Start_Where_03_03");
    DIA_OKTAV_QM202_START_CHOICES();
}

func void DIA_OKTAV_QM202_START_HOW() {
    OKTAV_QM202_START_HOW = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM202_Start_How_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Start_How_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Start_How_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Start_How_03_04");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM202_Start_How_15_05");
    AI_RESETFACEANI(SELF);
    DIA_OKTAV_QM202_START_CHOICES();
}

instance DIA_OKTAV_QM202_FINISH(C_INFO) {
    NPC = 0xce55;
    NR = 1;
    CONDITION = DIA_OKTAV_QM202_FINISH_CONDITION;
    INFORMATION = DIA_OKTAV_QM202_FINISH_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Task completed.";
}

func int DIA_OKTAV_QM202_FINISH_CONDITION() {
    if ((LOG_GETSTATUS(MIS_QM202)) == (LOG_RUNNING)) {
        if ((NPC_KNOWSINFO(OTHER, 0x1049d)) || ((QM202_HELPTESPI) == (2))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_QM202_FINISH_INFO() {
    OKTAV_QM202_GOODPOINTS = (OKTAV_QM202_GOODPOINTS) + (1);
    B_TURNTONPC(MIL_4017_ARWID, MIL_4001_OKTAV);
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM202_Finish_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM202_Finish_15_02");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Finish_03_03");
    if ((((QM202_ARWIDDECISION) == (1)) && ((QM202_TESPI_DIALOGUE) == (1))) || (((QM202_ARWIDDECISION) == (2)) && ((QM202_TESPI_DIALOGUE) == (2)))) {
        OKTAV_QM202_GOODPOINTS = (OKTAV_QM202_GOODPOINTS) + (1);
        AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM202_Finish_15_06");
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Finish_03_07");
    };
    AI_STARTFACEANI(OTHER, S_TIRED, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM202_Finish_15_04");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Finish_03_05");
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Finish_03_08");
    if ((QM202_HELPTESPI) == (1)) {
        OKTAV_QM202_GOODPOINTS = (OKTAV_QM202_GOODPOINTS) + (1);
        AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM202_Finish_15_11");
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Finish_03_12");
    };
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM202_Finish_15_09");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Finish_03_10");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Finish_03_13");
    if ((OKTAV_QM202_GOODPOINTS) == (3)) {
        QM202_FINISHWAY = 1;
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Finish_03_14");
    };
    if ((OKTAV_QM202_GOODPOINTS) == (2)) {
        QM202_FINISHWAY = 1;
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Finish_03_15");
    };
    QM202_FINISHWAY = 2;
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM202_Finish_03_16");
    AI_LOGENTRY(TOPIC_QM202, LOG_QM202_FINISH);
    LOG_SETSTATUS(_@(MIS_QM202), TOPIC_QM202, LOG_SUCCESS);
    RESTOREROUTINE_OKTAV();
    RESTOREROUTINE_ARWID();
    B_GIVEPLAYERXP((QM202_FINISH) * (OKTAV_QM202_GOODPOINTS));
    CREATEINVITEMS(SELF, 0x859b, (QM202_REWARD) * (OKTAV_QM202_GOODPOINTS));
    B_GIVEINVITEMS(SELF, OTHER, 0x859b, (QM202_REWARD) * (OKTAV_QM202_GOODPOINTS));
    NPC_EXCHANGEROUTINE(MIL_4001_OKTAV, START);
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    QM202_REMOVENPC();
}

var int DIA_OKTAV_QM202_FINISH_INFO.OKTAV_QM202_GOODPOINTS = 0;
instance DIA_OKTAV_REWARDPRISON(C_INFO) {
    NPC = 0xce55;
    NR = 90;
    CONDITION = DIA_OKTAV_REWARDPRISON_CONDITION;
    INFORMATION = DIA_OKTAV_REWARDPRISON_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "I'm here to collect a reward for a criminal.";
}

func int DIA_OKTAV_REWARDPRISON_CONDITION() {
    if ((NPC_GETDISTTOWP(SELF, "PARTM3_STAND_01")) <= (0x1b58)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

var int OKTAV_LUDLOFPRISON = 0;
var int OKTAV_BALUENPRISON = 0;
var int OKTAV_NEVILPRISON = 0;
var int OKTAV_RENEGADESPRISON = 0;
var int OKTAV_WANTEDPOSTER_REWARD = 0;
func void DIA_OKTAV_REWARDPRISON_CHOICES() {
    OKTAV_WANTEDPOSTER_REWARD = 0;
    INFO_CLEARCHOICES(0x10361);
    INFO_ADDCHOICE(0x10361, DIALOG_BACK, 0x1036d);
    if ((NPC_KNOWSINFO(OTHER, 0x11425)) && ((OKTAV_RENEGADESPRISON) == (FALSE))) {
        INFO_ADDCHOICE(0x10361, "Renegades on the path to beekeepers.", 0x1037f);
    };
    if (((NPC_KNOWSINFO(OTHER, 0x105e1)) && ((LOG_GETSTATUS(MIS_Q308)) == (LOG_RUNNING))) && ((OKTAV_LUDLOFPRISON) == (FALSE))) {
        INFO_ADDCHOICE(0x10361, "I arrested Ludlof.", 0x1036e);
    };
    if ((((LOG_GETSTATUS(MIS_QM203)) == (LOG_SUCCESS)) && ((OKTAV_BALUENPRISON) == (FALSE))) && ((QM203_TELLOKTAV) == (TRUE))) {
        if ((QM203_BALUENISDEAD) == (2)) {
            INFO_ADDCHOICE(0x10361, "I killed Baluen the ratcatcher.", 0x10371);
        } else {
            INFO_ADDCHOICE(0x10361, "I know where Baluen is hiding.", 0x10372);
        };
    };
    if (((LOG_GETSTATUS(MIS_SQ229)) == (LOG_RUNNING)) && ((OKTAV_NEVILPRISON) == (FALSE))) {
        INFO_ADDCHOICE(0x10361, "Nevil the fisherman buys swampweed.", 0x10370);
    };
    if (((BOUNTY_SLIPPY_SPAWN) == (TRUE)) && ((BOUNTY_SLIPPY_SPAWNINARCHOLOS) == (3))) {
        if (NPC_ISDEAD(BDT_8000_SLIPPY)) {
            INFO_ADDCHOICE(0x10361, NAME_WANTEDPOSTER_SLIPPY, 0x10373);
        };
    };
    if (((BOUNTY_LURKER_SPAWN) == (TRUE)) && ((BOUNTY_LURKER_SPAWNINARCHOLOS) == (3))) {
        if (NPC_ISDEAD(BDT_8001_LURKER)) {
            INFO_ADDCHOICE(0x10361, NAME_WANTEDPOSTER_LURKER, 0x10374);
        };
    };
    if (((BOUNTY_MADCUTTER_SPAWN) == (TRUE)) && ((BOUNTY_MADCUTTER_SPAWNINARCHOLOS) == (3))) {
        if (NPC_ISDEAD(BDT_8002_MADCUTTER)) {
            INFO_ADDCHOICE(0x10361, NAME_WANTEDPOSTER_MADCUTTER, 0x10375);
        };
    };
    if (((BOUNTY_COLLECTOR_SPAWN) == (TRUE)) && ((BOUNTY_COLLECTOR_SPAWNINARCHOLOS) == (3))) {
        if (NPC_ISDEAD(BDT_8003_COLLECTOR)) {
            INFO_ADDCHOICE(0x10361, NAME_WANTEDPOSTER_COLLECTOR, 0x10376);
        };
    };
    if (((BOUNTY_SEWERS_SPAWN) == (TRUE)) && ((BOUNTY_SEWERS_SPAWNINSEWERS) == (3))) {
        if ((NPC_ISDEAD(BDT_8004_SEWERBOY)) && (NPC_ISDEAD(BDT_8005_SEWERBOY))) {
            INFO_ADDCHOICE(0x10361, NAME_WANTEDPOSTER_SEWERBOY_MANY, 0x10377);
        };
    };
    if (((BOUNTY_NOVIZE_SPAWN) == (TRUE)) && ((BOUNTY_NOVIZE_SPAWNINARCHOLOS) == (3))) {
        if (NPC_ISDEAD(BDT_8006_NOVIZE)) {
            INFO_ADDCHOICE(0x10361, NAME_WANTEDPOSTER_NOVIZE, 0x10378);
        };
    };
    if (((BOUNTY_FROST_SPAWN) == (TRUE)) && ((BOUNTY_FROST_SPAWNINARCHOLOS) == (3))) {
        if (NPC_ISDEAD(BDT_8007_FROST)) {
            INFO_ADDCHOICE(0x10361, NAME_WANTEDPOSTER_FROST, 0x10379);
        };
    };
    if (((BOUNTY_HYENA_SPAWN) == (TRUE)) && ((BOUNTY_HYENA_SPAWNINARCHOLOS) == (3))) {
        if (NPC_ISDEAD(BDT_8008_HYENA)) {
            INFO_ADDCHOICE(0x10361, NAME_WANTEDPOSTER_HYENA, 0x1037a);
        };
    };
    if (((BOUNTY_WIDOW_SPAWN) == (TRUE)) && ((BOUNTY_WIDOW_SPAWNINARCHOLOS) == (3))) {
        if (NPC_ISDEAD(BDT_8009_WIDOW)) {
            INFO_ADDCHOICE(0x10361, NAME_WANTEDPOSTER_WIDOW, 0x1037b);
        };
    };
    if (((BOUNTY_PUMA_SPAWN) == (TRUE)) && ((BOUNTY_PUMA_SPAWNINARCHOLOS) == (3))) {
        if ((NPC_ISDEAD(BDT_8010_PUMA_HUMAN)) && (NPC_ISDEAD(BDT_8011_PUMA_MONSTER))) {
            INFO_ADDCHOICE(0x10361, NAME_WANTEDPOSTER_PUMA, 0x1037c);
        };
    };
    if (((BOUNTY_PROPHET_SPAWN) == (TRUE)) && ((BOUNTY_PROPHET_SPAWNINARCHOLOS) == (3))) {
        if ((((NPC_ISDEAD(BDT_8012_PROPHET)) && (NPC_ISDEAD(BDT_8013_BELIVER))) && (NPC_ISDEAD(BDT_8014_BELIVER))) && (NPC_ISDEAD(BDT_8015_BELIVER))) {
            INFO_ADDCHOICE(0x10361, NAME_WANTEDPOSTER_PROPHET, 0x1037d);
        };
    };
    if (((BOUNTY_HAVDAN_SPAWN) == (TRUE)) && ((BOUNTY_HAVDAN_SPAWNINARCHOLOS) == (3))) {
        if (NPC_ISDEAD(BDT_8016_HAVDAN)) {
            INFO_ADDCHOICE(0x10361, NPCNAME_HAVDAN, 0x1037e);
        };
    };
}

func void DIA_OKTAV_REWARDPRISON_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_RewardPrison_15_01");
    DIA_OKTAV_REWARDPRISON_CHOICES();
}

func void DIA_OKTAV_REWARD_GOODJOB() {
    RND = HLP_RANDOM(3);
    if ((RND) == (0)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Train_STR1_03_01");
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_RewardPrison_Baluen_Reward_03_02");
    };
    if ((RND) == (1)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Reward_GoodJob_03_01");
    };
    if ((RND) == (2)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Reward_GoodJob_03_02");
    };
}

var int DIA_OKTAV_REWARD_GOODJOB.RND = 0;
func void DIA_OKTAV_REWARD_GIVEGOLD() {
    GAMESERVICES_INCREMENTSTATANDCHECKACHIEVEMENT(STAT_ACH_28, 1, ACH_28, STAT_ACH_28_REQUIRED);
    CREATEINVITEMS(SELF, 0x859b, OKTAV_WANTEDPOSTER_REWARD);
    B_GIVEINVITEMS(SELF, OTHER, 0x859b, OKTAV_WANTEDPOSTER_REWARD);
    B_GIVEPLAYERXP(OKTAV_WANTEDPOSTER_REWARD);
}

func void DIA_OKTAV_REWARDPRISON_BACK() {
    INFO_CLEARCHOICES(0x10361);
}

func void DIA_OKTAV_REWARDPRISON_LUDLOF() {
    OKTAV_LUDLOFPRISON = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_RewardPrison_Ludlof_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_RewardPrison_Ludlof_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_RewardPrison_Ludlof_03_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_RewardPrison_Ludlof_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_RewardPrison_Ludlof_03_05");
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_RewardPrison_Ludlof_15_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_RewardPrison_Ludlof_03_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_RewardPrison_Ludlof_03_11");
    CREATEINVITEMS(SELF, 0x859b, SQ305_LUDLOFPRICE);
    B_GIVEINVITEMS(SELF, OTHER, 0x859b, SQ305_LUDLOFPRICE);
    B_GIVEPLAYERXP(XP_Q311_LUDLOFPRISON);
    DIA_OKTAV_REWARDPRISON_CHOICES();
}

func void DIA_OKTAV_REWARDPRISON_BALUEN_REWARD() {
    OKTAV_BALUENPRISON = TRUE;
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_RewardPrison_Baluen_Reward_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_RewardPrison_Baluen_Reward_03_02");
    if ((QM203_BALUENISDEAD) == (2)) {
        CREATEINVITEMS(SELF, 0x859b, QM203_BALUENPRICE);
    };
    QM203_TELLOKTAV = 2;
    CREATEINVITEMS(SELF, 0x859b, (QM203_BALUENPRICE) / (2));
    B_GIVEINVITEMS(SELF, OTHER, 0x859b, (QM203_BALUENPRICE) / (2));
    DIA_OKTAV_REWARDPRISON_CHOICES();
}

func void DIA_OKTAV_REWARDPRISON_NEVIL() {
    OKTAV_NEVILPRISON = TRUE;
    SQ229_NEVILINPRISON = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_RewardPrison_Nevil_15_01");
    if (((NPC_ISDEAD(NONE_6291_MARCO)) == (FALSE)) && ((NPC_ISDEAD(NONE_1003_LEONEL)) == (FALSE))) {
        AI_OUTPUT(OTHER, SELF, "DIA_Oktav_RewardPrison_Nevil_15_02");
    };
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_RewardPrison_Nevil_15_03");
    DIA_OKTAV_REWARD_GOODJOB();
    CREATEINVITEMS(SELF, 0x859b, SQ228_GOLDENDING_V3);
    B_GIVEINVITEMS(SELF, OTHER, 0x859b, SQ228_GOLDENDING_V3);
    B_GIVEPLAYERXP(XP_SQ228_ENDINGV3);
    AI_LOGENTRY(TOPIC_SQ229, LOG_SQ229_OKTAVFINISH);
    LOG_SETSTATUS(_@(MIS_SQ229), TOPIC_SQ229, LOG_SUCCESS);
    B_STARTOTHERROUTINE(NONE_6266_NEVIL, "PRISON");
    NPC_REFRESH(NONE_6266_NEVIL);
    TELEPORTNPCTOWP(0xd4cb, NONE_6266_NEVIL.WP);
}

func void DIA_OKTAV_REWARDPRISON_BALUEN_KILL() {
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_RewardPrison_Baluen_Kill_15_01");
    DIA_OKTAV_REWARDPRISON_BALUEN_REWARD();
}

func void DIA_OKTAV_REWARDPRISON_BALUEN_KNOWPLACE() {
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_RewardPrison_Baluen_KnowPlace_15_01");
    DIA_OKTAV_REWARDPRISON_BALUEN_REWARD();
}

func void DIA_OKTAV_REWARDPRISON_SLIPPY() {
    OKTAV_WANTEDPOSTER_REWARD = 100;
    BOUNTY_SLIPPY_SPAWN = 2;
    DIA_OKTAV_REWARD_GOODJOB();
    DIA_OKTAV_REWARD_GIVEGOLD();
    DIA_OKTAV_REWARDPRISON_CHOICES();
}

func void DIA_OKTAV_REWARDPRISON_LURKER() {
    OKTAV_WANTEDPOSTER_REWARD = 150;
    BOUNTY_LURKER_SPAWN = 2;
    DIA_OKTAV_REWARD_GOODJOB();
    DIA_OKTAV_REWARD_GIVEGOLD();
    DIA_OKTAV_REWARDPRISON_CHOICES();
}

func void DIA_OKTAV_REWARDPRISON_MADCUTTER() {
    OKTAV_WANTEDPOSTER_REWARD = 150;
    BOUNTY_MADCUTTER_SPAWN = 2;
    DIA_OKTAV_REWARD_GOODJOB();
    DIA_OKTAV_REWARD_GIVEGOLD();
    DIA_OKTAV_REWARDPRISON_CHOICES();
    if (((RND_NOSCARYEVENTS) == (0)) && ((PART11_TELEPORTSPOOKYWOMAN) == (0))) {
        if (((BOUNTY_MADCUTTER_TELEPORTSPOOKYWOMAN) == (2)) || ((BOUNTY_MADCUTTER_TELEPORTSPOOKYWOMAN) == (0))) {
            NPC_CLEARAIQUEUE(NONE_11295_SPOOKYWOMAN);
            B_STARTOTHERROUTINE(NONE_11295_SPOOKYWOMAN, START);
            TELEPORTNPCTOWP(0xdfa4, NONE_11295_SPOOKYWOMAN.WP);
        };
    };
}

func void DIA_OKTAV_REWARDPRISON_COLLECTOR() {
    OKTAV_WANTEDPOSTER_REWARD = 200;
    BOUNTY_COLLECTOR_SPAWN = 2;
    DIA_OKTAV_REWARD_GOODJOB();
    DIA_OKTAV_REWARD_GIVEGOLD();
    DIA_OKTAV_REWARDPRISON_CHOICES();
}

func void DIA_OKTAV_REWARDPRISON_SEWERS() {
    OKTAV_WANTEDPOSTER_REWARD = 250;
    BOUNTY_SEWERS_SPAWN = 2;
    DIA_OKTAV_REWARD_GOODJOB();
    DIA_OKTAV_REWARD_GIVEGOLD();
    DIA_OKTAV_REWARDPRISON_CHOICES();
}

func void DIA_OKTAV_REWARDPRISON_NOVIZE() {
    OKTAV_WANTEDPOSTER_REWARD = 300;
    BOUNTY_NOVIZE_SPAWN = 2;
    DIA_OKTAV_REWARD_GOODJOB();
    DIA_OKTAV_REWARD_GIVEGOLD();
    DIA_OKTAV_REWARDPRISON_CHOICES();
}

func void DIA_OKTAV_REWARDPRISON_FROST() {
    OKTAV_WANTEDPOSTER_REWARD = 300;
    BOUNTY_FROST_SPAWN = 2;
    DIA_OKTAV_REWARD_GOODJOB();
    DIA_OKTAV_REWARD_GIVEGOLD();
    DIA_OKTAV_REWARDPRISON_CHOICES();
}

func void DIA_OKTAV_REWARDPRISON_HYENA() {
    OKTAV_WANTEDPOSTER_REWARD = 300;
    BOUNTY_HYENA_SPAWN = 2;
    DIA_OKTAV_REWARD_GOODJOB();
    DIA_OKTAV_REWARD_GIVEGOLD();
    DIA_OKTAV_REWARDPRISON_CHOICES();
    if ((TRAP60_HIDDEN) == (TRUE)) {
        TRAP60_HIDDEN = FALSE;
        if ((NPC_ISDEAD(BDT_13804_GRAVEROBBER)) == (FALSE)) {
            B_STARTOTHERROUTINE(BDT_13804_GRAVEROBBER, START);
            NPC_REFRESH(BDT_13804_GRAVEROBBER);
            TELEPORTNPCTOWP(0xe1b3, BDT_13804_GRAVEROBBER.WP);
        };
        if ((NPC_ISDEAD(BDT_13805_GRAVEROBBER)) == (FALSE)) {
            B_STARTOTHERROUTINE(BDT_13805_GRAVEROBBER, START);
            NPC_REFRESH(BDT_13805_GRAVEROBBER);
            TELEPORTNPCTOWP(0xe1b6, BDT_13805_GRAVEROBBER.WP);
        };
    };
    if ((SQ118_EZEKIEL_SEARCHFLORA) >= (3)) {
        if ((SQ227_EZEKIELMARKET) == (2)) {
            B_STARTOTHERROUTINE(NONE_3_EZEKIEL, "TRADE");
            NPC_REFRESH(NONE_3_EZEKIEL);
            TELEPORTNPCTOWP(0xc924, NONE_3_EZEKIEL.WP);
        } else if (((SQ227_EZEKIELWORK) >= (1)) && ((LOG_GETSTATUS(MIS_SQ227)) != (LOG_SUCCESS))) {
            B_STARTOTHERROUTINE(NONE_3_EZEKIEL, "SQ227_WORKFORBASTIAN");
            NPC_REFRESH(NONE_3_EZEKIEL);
            TELEPORTNPCTOWP(0xc924, NONE_3_EZEKIEL.WP);
        } else {
            B_STARTOTHERROUTINE(NONE_3_EZEKIEL, "VILLAGE");
            NPC_REFRESH(NONE_3_EZEKIEL);
            TELEPORTNPCTOWP(0xc924, NONE_3_EZEKIEL.WP);
        };
    };
}

func void DIA_OKTAV_REWARDPRISON_WIDOW() {
    OKTAV_WANTEDPOSTER_REWARD = 400;
    BOUNTY_WIDOW_SPAWN = 2;
    DIA_OKTAV_REWARD_GOODJOB();
    DIA_OKTAV_REWARD_GIVEGOLD();
    DIA_OKTAV_REWARDPRISON_CHOICES();
    VLK_880_NIKOLAS.AIVAR[15] = FALSE;
    B_STARTOTHERROUTINE(VLK_880_NIKOLAS, START);
    NPC_REFRESH(VLK_880_NIKOLAS);
    TELEPORTNPCTOWP(0xd248, VLK_880_NIKOLAS.WP);
}

func void DIA_OKTAV_REWARDPRISON_PUMA() {
    OKTAV_WANTEDPOSTER_REWARD = 500;
    BOUNTY_PUMA_SPAWN = 2;
    DIA_OKTAV_REWARD_GOODJOB();
    DIA_OKTAV_REWARD_GIVEGOLD();
    DIA_OKTAV_REWARDPRISON_CHOICES();
}

func void DIA_OKTAV_REWARDPRISON_PROPHET() {
    OKTAV_WANTEDPOSTER_REWARD = 500;
    BOUNTY_PROPHET_SPAWN = 2;
    DIA_OKTAV_REWARD_GOODJOB();
    DIA_OKTAV_REWARD_GIVEGOLD();
    DIA_OKTAV_REWARDPRISON_CHOICES();
    if (((LOG_GETSTATUS(MIS_QA302)) != (LOG_RUNNING)) && ((LOG_GETSTATUS(MIS_SQ313)) != (LOG_RUNNING))) {
        if ((NPC_ISDEAD(NONE_11151_THUG)) == (FALSE)) {
            B_STARTOTHERROUTINE(NONE_11151_THUG, START);
            NPC_REFRESH(NONE_11151_THUG);
            TELEPORTNPCTOWP(0xd289, NONE_11151_THUG.WP);
        };
        if ((NPC_ISDEAD(NONE_11152_THUG)) == (FALSE)) {
            B_STARTOTHERROUTINE(NONE_11152_THUG, START);
            NPC_REFRESH(NONE_11152_THUG);
            TELEPORTNPCTOWP(0xd28c, NONE_11152_THUG.WP);
        };
    };
    if ((NPC_ISDEAD(VLK_11123_HOOKER)) == (FALSE)) {
        B_STARTOTHERROUTINE(VLK_11123_HOOKER, START);
        NPC_REFRESH(VLK_11123_HOOKER);
        TELEPORTNPCTOWP(0xd5e0, VLK_11123_HOOKER.WP);
    };
    if ((NPC_ISDEAD(VLK_11123_HOOKER)) == (FALSE)) {
        B_STARTOTHERROUTINE(VLK_11123_HOOKER, START);
        NPC_REFRESH(VLK_11123_HOOKER);
        TELEPORTNPCTOWP(0xd5e0, VLK_11123_HOOKER.WP);
    };
    if ((NPC_ISDEAD(MIL_4007_HARBGUARD)) == (FALSE)) {
        B_STARTOTHERROUTINE(MIL_4007_HARBGUARD, START);
        NPC_REFRESH(MIL_4007_HARBGUARD);
        TELEPORTNPCTOWP(0xd365, MIL_4007_HARBGUARD.WP);
    };
    if ((NPC_ISDEAD(VLK_13864_WORKER)) == (FALSE)) {
        B_STARTOTHERROUTINE(VLK_13864_WORKER, START);
        NPC_REFRESH(VLK_13864_WORKER);
        TELEPORTNPCTOWP(0xd3ce, VLK_13864_WORKER.WP);
    };
    if ((NPC_ISDEAD(VLK_13865_WORKER)) == (FALSE)) {
        B_STARTOTHERROUTINE(VLK_13865_WORKER, START);
        NPC_REFRESH(VLK_13865_WORKER);
        TELEPORTNPCTOWP(0xd3d2, VLK_13865_WORKER.WP);
    };
    if ((NPC_ISDEAD(VLK_13866_WORKER)) == (FALSE)) {
        B_STARTOTHERROUTINE(VLK_13866_WORKER, START);
        NPC_REFRESH(VLK_13866_WORKER);
        TELEPORTNPCTOWP(0xd3d5, VLK_13866_WORKER.WP);
    };
}

func void DIA_OKTAV_REWARDPRISON_HAVDAN() {
    OKTAV_WANTEDPOSTER_REWARD = 600;
    BOUNTY_HAVDAN_SPAWN = 2;
    DIA_OKTAV_REWARD_GOODJOB();
    DIA_OKTAV_REWARD_GIVEGOLD();
    DIA_OKTAV_REWARDPRISON_CHOICES();
}

func void DIA_OKTAV_REWARDPRISON_QM302_RENEGADES() {
    OKTAV_WANTEDPOSTER_REWARD = 150;
    OKTAV_RENEGADESPRISON = TRUE;
    DIA_OKTAV_REWARD_GOODJOB();
    DIA_OKTAV_REWARD_GIVEGOLD();
    DIA_OKTAV_REWARDPRISON_CHOICES();
}

instance DIA_OKTAV_KQ402_ARMOR(C_INFO) {
    NPC = 0xce55;
    NR = 1;
    CONDITION = DIA_OKTAV_KQ402_ARMOR_CONDITION;
    INFORMATION = DIA_OKTAV_KQ402_ARMOR_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "What do you think of our new armors?";
}

func int DIA_OKTAV_KQ402_ARMOR_CONDITION() {
    if (((LOG_GETSTATUS(MIS_KQ402)) == (LOG_RUNNING)) && ((KQ402_DECISION) == (1))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_KQ402_ARMOR_INFO() {
    AI_STARTFACEANI(SELF, S_DISGUST, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_KQ402_Armor_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_KQ402_Armor_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_KQ402_Armor_03_03");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_KQ402_Armor_03_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_KQ402_Armor_15_05");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_KQ402_Armor_03_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_KQ402_Armor_03_07");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_KQ402_Armor_15_08");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_KQ402_Armor_03_09");
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_KQ402_Armor_15_10");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_KQ402_Armor_03_11");
    AI_RESETFACEANI(SELF);
    AI_LOGENTRY(TOPIC_KQ402, LOG_KQ402_OKTAV_ARMOR);
}

instance DIA_OKTAV_QM401_LEADER(C_INFO) {
    NPC = 0xce55;
    NR = 1;
    CONDITION = DIA_OKTAV_QM401_LEADER_CONDITION;
    INFORMATION = DIA_OKTAV_QM401_LEADER_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_OKTAV_QM401_LEADER_CONDITION() {
    if (((LOG_GETSTATUS(MIS_QM401)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x1028b))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

var int OKTAV_QM401_LEADER_PEOPLE = 0;
var int OKTAV_QM401_LEADER_WHAT = 0;
func void DIA_OKTAV_QM401_LEADER_CHOICES() {
    INFO_CLEARCHOICES(0x10383);
    if (((OKTAV_QM401_LEADER_PEOPLE) == (FALSE)) || ((OKTAV_QM401_LEADER_WHAT) == (FALSE))) {
        if ((OKTAV_QM401_LEADER_PEOPLE) == (FALSE)) {
            INFO_ADDCHOICE(0x10383, "How many people do we have?", 0x10389);
        };
        if ((OKTAV_QM401_LEADER_WHAT) == (FALSE)) {
            INFO_ADDCHOICE(0x10383, "What did the scouts relay before disappearing?", 0x1038a);
        };
    };
    INFO_ADDCHOICE(0x10383, "What approach do you propose?", 0x1038b);
}

func void DIA_OKTAV_QM401_LEADER_INFO() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_Leader_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_Leader_03_02");
    DIA_OKTAV_QM401_LEADER_CHOICES();
}

func void DIA_OKTAV_QM401_LEADER_PEOPLE() {
    OKTAV_QM401_LEADER_PEOPLE = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM401_Leader_People_15_01");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_Leader_People_03_02");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_Leader_People_03_03");
    DIA_OKTAV_QM401_LEADER_CHOICES();
}

func void DIA_OKTAV_QM401_LEADER_WHAT() {
    OKTAV_QM401_LEADER_WHAT = TRUE;
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM401_Leader_What_15_01");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_Leader_What_03_02");
    DIA_OKTAV_QM401_LEADER_CHOICES();
}

func void DIA_OKTAV_QM401_LEADER_HOW() {
    AI_STARTFACEANI(OTHER, S_THINK, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM401_Leader_How_15_01");
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_Leader_How_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_Leader_How_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_Leader_How_03_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM401_Leader_How_15_05");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_Leader_How_03_06");
    INFO_CLEARCHOICES(0x10383);
    INFO_ADDCHOICE(0x10383, "I'll attack from the upper entrance.", 0x1038d);
    INFO_ADDCHOICE(0x10383, "I'll attack from the lower entrance.", 0x1038e);
}

func void DIA_OKTAV_QM401_LEADER_NEXT() {
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_Leader_Next_03_01");
    AI_RESETFACEANI(SELF);
    if ((QM401_RENEGADESCAVEATTACK) == (1)) {
        AI_LOGENTRY(TOPIC_QM401, LOG_QM401_OKTAV_ATTACK_UP);
    };
    AI_LOGENTRY(TOPIC_QM401, LOG_QM401_OKTAV_ATTACK_DOWN);
    INFO_CLEARCHOICES(0x10383);
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0xf55c);
}

func void DIA_OKTAV_QM401_LEADER_HOW_UP() {
    QM401_RENEGADESCAVEATTACK = 1;
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM401_Leader_Up_15_01");
    DIA_OKTAV_QM401_LEADER_NEXT();
}

func void DIA_OKTAV_QM401_LEADER_HOW_DOWN() {
    QM401_RENEGADESCAVEATTACK = 2;
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM401_Leader_Down_15_01");
    DIA_OKTAV_QM401_LEADER_NEXT();
}

instance DIA_OKTAV_QM401_NOTHING(C_INFO) {
    NPC = 0xce55;
    NR = 1;
    CONDITION = DIA_OKTAV_QM401_NOTHING_CONDITION;
    INFORMATION = DIA_OKTAV_QM401_NOTHING_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_OKTAV_QM401_NOTHING_CONDITION() {
    if (((LOG_GETSTATUS(MIS_QM401)) == (LOG_RUNNING)) && ((QM401_RENEGADESCAVEATTACK_GO) == (TRUE))) {
        if ((((((NPC_GETDISTTOWP(MIL_4001_OKTAV, MIL_4001_OKTAV.WP)) <= (700)) && ((NPC_GETDISTTOWP(MIL_13511_MILITIA, MIL_13511_MILITIA.WP)) <= (700))) && ((NPC_GETDISTTOWP(MIL_13512_MILITIA, MIL_13512_MILITIA.WP)) <= (700))) && ((NPC_GETDISTTOWP(MIL_13513_MILITIA, MIL_13513_MILITIA.WP)) <= (700))) && ((NPC_GETDISTTOWP(MIL_13514_MILITIA, MIL_13514_MILITIA.WP)) <= (700))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_QM401_NOTHING_INFO() {
    TRIA_INVITE(MIL_13511_MILITIA);
    TRIA_INVITE(MIL_13512_MILITIA);
    TRIA_INVITE(MIL_13513_MILITIA);
    TRIA_INVITE(MIL_13514_MILITIA);
    TRIA_START();
    AI_LOOKATNPC(OTHER, SELF);
    AI_STOPLOOKAT(SELF);
    TRIA_WAIT();
    TRIA_NEXT(MIL_4001_OKTAV);
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_Nothing_03_01");
    TRIA_WAIT();
    TRIA_NEXT(MIL_13513_MILITIA);
    AI_OUTPUT(SELF, OTHER, "TRIA_MIL_13513_Militia_QM401_Nothing_03_01");
    TRIA_WAIT();
    TRIA_NEXT(MIL_4001_OKTAV);
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_Nothing_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_Nothing_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_Nothing_03_05");
    INFO_CLEARCHOICES(0x1038f);
    INFO_ADDCHOICE(0x1038f, "I'll look around for some clues in the other cave.", 0x10392);
}

func void DIA_OKTAV_QM401_NOTHING_LOOK() {
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM401_Nothing_Look_15_01");
    AI_TURNTONPC(OTHER, MIL_13511_MILITIA);
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM401_Nothing_Look_15_02");
    AI_WAITTILLEND(MIL_13511_MILITIA, HERO);
    AI_WAITTILLEND(MIL_13512_MILITIA, HERO);
    AI_WAITTILLEND(MIL_13513_MILITIA, HERO);
    AI_WAITTILLEND(MIL_13514_MILITIA, HERO);
    AI_PLAYANI(MIL_13511_MILITIA, "T_STAND_2_MILJOIN_HERO");
    AI_PLAYANI(MIL_13511_MILITIA, "T_REMOVE_MILJOIN");
    AI_PLAYANI(MIL_13512_MILITIA, "T_STAND_2_MILJOIN_HERO");
    AI_PLAYANI(MIL_13512_MILITIA, "T_REMOVE_MILJOIN");
    AI_PLAYANI(MIL_13513_MILITIA, "T_STAND_2_MILJOIN_HERO");
    AI_PLAYANI(MIL_13513_MILITIA, "T_REMOVE_MILJOIN");
    AI_PLAYANI(MIL_13514_MILITIA, "T_STAND_2_MILJOIN_HERO");
    AI_PLAYANI(MIL_13514_MILITIA, "T_REMOVE_MILJOIN");
    TRIA_FINISH();
    AI_STOPLOOKAT(SELF);
    AI_STOPLOOKAT(OTHER);
    AI_STOPPROCESSINFOS(SELF);
    INFO_CLEARCHOICES(0x1038f);
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_QM401, LOG_QM401_OKTAV_CAVE_EMPTY);
    AI_FUNCTION(SELF, 0xf56e);
}

instance DIA_OKTAV_QM401_FOUNDSOMETHING(C_INFO) {
    NPC = 0xce55;
    NR = 1;
    CONDITION = DIA_OKTAV_QM401_FOUNDSOMETHING_CONDITION;
    INFORMATION = DIA_OKTAV_QM401_FOUNDSOMETHING_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Were you able to find anything?";
}

func int DIA_OKTAV_QM401_FOUNDSOMETHING_CONDITION() {
    if (((LOG_GETSTATUS(MIS_QM401)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x13345))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_QM401_FOUNDSOMETHING_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM401_FoundSomething_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_FoundSomething_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_QM401_FoundSomething_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_QM401_FoundSomething_03_04");
    AI_LOGENTRY(TOPIC_QM401, LOG_QM401_OKTAV_GOTORODERICH);
    B_STARTOTHERROUTINE(MIL_6275_BERTO, TOT);
    NPC_REFRESH(MIL_6275_BERTO);
    TELEPORTNPCTOWP(0xdbd5, MIL_6275_BERTO.WP);
}

instance DIA_OKTAV_SQ505_WAITASEC(C_INFO) {
    NPC = 0xce55;
    NR = 1;
    CONDITION = DIA_OKTAV_SQ505_WAITASEC_CONDITION;
    INFORMATION = DIA_OKTAV_SQ505_WAITASEC_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_OKTAV_SQ505_WAITASEC_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ505)) == (LOG_RUNNING)) && (WLD_ISTIME(8, 0, 21, 0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_SQ505_WAITASEC_INFO() {
    if ((MARVIN_LOSTGUILDARAXOS) == (TRUE)) {
        AI_STARTFACEANI(SELF, S_SURPRISE, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_WaitASec_03_01");
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_WaitASec_03_02");
    };
    if ((MARVIN_LOSTGUILDMILITA) == (TRUE)) {
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_WaitASec_03_03");
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_WaitASec_03_04");
    };
    INFO_CLEARCHOICES(0x10396);
    INFO_ADDCHOICE(0x10396, "It's... it's hard, but I'm trying to make it work.", 0x1039b);
    INFO_ADDCHOICE(0x10396, "I'm happy, I finally have some freedom.", 0x1039a);
}

func void DIA_OKTAV_SQ505_WAITASEC_NEXT() {
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_WaitASec_Next_03_01");
    AI_TURNTONPC(SELF, NONE_13398_VOLKERGUARD);
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_WaitASec_Next_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_WaitASec_Next_03_03");
    AI_TURNTONPC(SELF, OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_WaitASec_Next_03_04");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_WaitASec_Next_03_05");
    INFO_CLEARCHOICES(0x10396);
}

func void DIA_OKTAV_SQ505_WAITASEC_HAPPY() {
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_SQ505_WaitASec_Happy_15_01");
    AI_STARTFACEANI(OTHER, S_ANGRY, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_SQ505_WaitASec_Happy_15_02");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_WaitASec_Happy_03_03");
    DIA_OKTAV_SQ505_WAITASEC_NEXT();
}

func void DIA_OKTAV_SQ505_WAITASEC_NOTHAPPY() {
    AI_STARTFACEANI(OTHER, S_TIRED, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_SQ505_WaitASec_NotHappy_15_01");
    if ((MARVIN_LOSTGUILDMILITA) == (TRUE)) {
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_WaitASec_NotHappy_03_02");
    };
    DIA_OKTAV_SQ505_WAITASEC_NEXT();
}

instance DIA_OKTAV_SQ505_WHAT(C_INFO) {
    NPC = 0xce55;
    NR = 1;
    CONDITION = DIA_OKTAV_SQ505_WHAT_CONDITION;
    INFORMATION = DIA_OKTAV_SQ505_WHAT_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "What should I do?";
}

func int DIA_OKTAV_SQ505_WHAT_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ505)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x10396))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_SQ505_WHAT_INFO() {
    SQ505_OKTAVGOTRACE = 1;
    SQ505_OKTAVGOTRACE_DAY = WLD_GETDAY();
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_SQ505_What_15_01");
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_What_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_What_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_What_03_04");
    CREATEINVITEMS(SELF, 0x9256, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x9256, 1);
    AI_LOGENTRY(TOPIC_SQ505, LOG_SQ505_OKTAV_PAPER);
    NPC_EXCHANGEROUTINE(SELF, "SQ505_TRACE");
    SQ505_OKTAV_RTNCHECK = 2;
    NPC_EXCHANGEROUTINE(VLK_6426_VENZEL, "SQ505_WRITE");
}

instance DIA_OKTAV_SQ505_GOTDOC(C_INFO) {
    NPC = 0xce55;
    NR = 1;
    CONDITION = DIA_OKTAV_SQ505_GOTDOC_CONDITION;
    INFORMATION = DIA_OKTAV_SQ505_GOTDOC_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I have that speech.";
}

func int DIA_OKTAV_SQ505_GOTDOC_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ505)) == (LOG_RUNNING)) && ((NPC_HASITEMS(OTHER, 0x9259)) >= (1))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_SQ505_GOTDOC_INFO() {
    FF_APPLYONCEEXTGT(0x7df3, 0, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_SQ505_GotDoc_15_01");
    AI_PLAYANI(SELF, T_SEARCH);
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_GotDoc_03_02");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_GotDoc_03_03");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_GotDoc_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_GotDoc_03_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_GotDoc_03_06");
    AI_LOGENTRY(TOPIC_SQ505, LOG_SQ505_OKTAV_PLAN);
}

instance DIA_OKTAV_SQ505_GOODJOB(C_INFO) {
    NPC = 0xce55;
    NR = 1;
    CONDITION = DIA_OKTAV_SQ505_GOODJOB_CONDITION;
    INFORMATION = DIA_OKTAV_SQ505_GOODJOB_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_OKTAV_SQ505_GOODJOB_CONDITION() {
    if (((SQ505_WAITVOLKERGUARD_M3) == (2)) && ((LOG_GETSTATUS(MIS_SQ505)) == (LOG_RUNNING))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_SQ505_GOODJOB_INFO() {
    SQ505_REMOVEVOLKERGUARD_M3 = 1;
    SQ505_REMOVEVOLKERGUARD_M3_DAY = WLD_GETDAY();
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_GoodJob_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_SQ505_GoodJob_03_02");
    AI_RESETFACEANI(SELF);
    AI_LOGENTRY(TOPIC_SQ505, LOG_SQ505_VOLKERGUARD_M3_GONE);
    AI_FUNCTION(SELF, 0x7dfd);
    NPC_EXCHANGEROUTINE(SELF, START);
}

instance DIA_OKTAV_KQ407_READY(C_INFO) {
    NPC = 0xce55;
    NR = 1;
    CONDITION = DIA_OKTAV_KQ407_READY_CONDITION;
    INFORMATION = DIA_OKTAV_KQ407_READY_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "You think we're gonna make it out of this?";
}

func int DIA_OKTAV_KQ407_READY_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_KQ407)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x113c0))) && ((NPC_GETDISTTOWP(SELF, "PART17_KQ407_OKTAV_STAND_01")) <= (700))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_KQ407_READY_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_KQ407_Ready_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_KQ407_Ready_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_KQ407_Ready_03_03");
    AI_STARTFACEANI(OTHER, S_SMUG, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_KQ407_Ready_15_04");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0xf175);
}

instance DIA_OKTAV_KQ407_AFTERFIGHT(C_INFO) {
    NPC = 0xce55;
    NR = 1;
    CONDITION = DIA_OKTAV_KQ407_AFTERFIGHT_CONDITION;
    INFORMATION = DIA_OKTAV_KQ407_AFTERFIGHT_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_OKTAV_KQ407_AFTERFIGHT_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_KQ407)) == (LOG_RUNNING)) && ((NPC_GETDISTTOWP(SELF, "PART15_PATH_223")) <= (700))) && (NPC_KNOWSINFO(OTHER, 0x103a5))) {
        if (NPC_ISDEAD(ORCLEADER_PART15)) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_KQ407_AFTERFIGHT_INFO() {
    KQ407_ORCLEADER_PART15_DEAD = TRUE;
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_KQ407_AfterFight_03_01");
    AI_STARTFACEANI(SELF, S_SURPRISE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_KQ407_AfterFight_03_02");
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Oktav_KQ407_AfterFight_15_03");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_KQ407_AfterFight_03_04");
    AI_LOGENTRY(TOPIC_KQ407, LOG_KQ407_OKTAV_PART15CLEAR);
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0xf176);
}

instance DIA_OKTAV_AMBIENT(C_INFO) {
    NPC = 0xce55;
    NR = 950;
    CONDITION = DIA_OKTAV_AMBIENT_CONDITION;
    INFORMATION = DIA_OKTAV_AMBIENT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "How are you doing?";
}

func int DIA_OKTAV_AMBIENT_CONDITION() {
    if ((NPC_GETDISTTOWP(SELF, "PARTM3_STAND_01")) <= (0x1b58)) {
        if ((((((LOG_GETSTATUS(MIS_Q203)) == (LOG_RUNNING)) && ((BECOMEAGUARD_TAVERNPART) == (1))) || ((((LOG_GETSTATUS(MIS_QM401)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x10383))) && ((NPC_KNOWSINFO(OTHER, 0x10290)) == (FALSE)))) || (((LOG_GETSTATUS(MIS_QM401)) == (LOG_RUNNING)) && ((QM401_BEATUPBERTO) == (2)))) || (((LOG_GETSTATUS(MIS_KQ407)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x10937)))) {
            return FALSE;
        };
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_AMBIENT_NOTGOOD() {
    AI_STARTFACEANI(SELF, "S_TIRED", 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Ambient_03_12");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Ambient_03_13");
    AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Ambient_03_14");
}

func void DIA_OKTAV_AMBIENT_INFO() {
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    B_SAY(OTHER, SELF, "$MARVIN_WhatNew2");
    if ((HERO.GUILD) != (GIL_MIL)) {
        if ((KAPITEL) <= (3)) {
            AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
            AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Ambient_03_02");
        } else {
            DIA_OKTAV_AMBIENT_NOTGOOD();
        } else {
            /* set_instance(0) */;
        };
    };
    if ((KAPITEL) <= (3)) {
        NPC_INITAMBIENTS(SELF, 3);
    };
    NPC_INITAMBIENTS(SELF, 4);
    if ((NPC_GETLASTAMBIENT(SELF)) == (1)) {
        if ((LOG_GETSTATUS(MIS_QM401)) == (LOG_SUCCESS)) {
            AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
            AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Ambient_03_10");
            AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Ambient_03_11");
        } else if ((LOG_GETSTATUS(MIS_Q205)) == (LOG_SUCCESS)) {
            AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
            AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Ambient_03_08");
            AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Ambient_03_09");
        } else {
            AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
            AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Ambient_03_01");
        } else {
            /* set_instance(0) */;
        };
    };
    if ((NPC_GETLASTAMBIENT(SELF)) == (2)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Ambient_03_03");
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Ambient_03_04");
        AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Ambient_03_05");
    };
    if ((NPC_GETLASTAMBIENT(SELF)) == (3)) {
        AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Ambient_03_06");
        AI_OUTPUT(SELF, OTHER, "DIA_Oktav_Ambient_03_07");
    };
    if ((NPC_GETLASTAMBIENT(SELF)) == (4)) {
        DIA_OKTAV_AMBIENT_NOTGOOD();
    };
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
}

instance DIA_OKTAV_PICKPOCKET(C_INFO) {
    NPC = 0xce55;
    NR = 900;
    CONDITION = DIA_OKTAV_PICKPOCKET_CONDITION;
    INFORMATION = DIA_OKTAV_PICKPOCKET_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = PICKPOCKET_80;
}

func int DIA_OKTAV_PICKPOCKET_CONDITION() {
    if (((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (1)) && ((SELF.AIVAR[6]) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_OKTAV_PICKPOCKET_INFO() {
    INFO_CLEARCHOICES(0x103af);
    INFO_ADDCHOICE(0x103af, DIALOG_BACK, 0x103b3);
    INFO_ADDCHOICE(0x103af, DIALOG_PICKPOCKET, 0x103b2);
}

func void DIA_OKTAV_PICKPOCKET_DOIT() {
    if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (2)) {
        B_PICKPOCKET_AMBIENT_TIER_2();
        SELF.AIVAR[6] = TRUE;
        INFO_CLEARCHOICES(0x103af);
    };
    AI_PLAYANI(HERO, T_CANNOTTAKE);
    PRINTSCREEN(PRINT_CANTPICKPOCKETTHISPERSON, -(1), -(1), FONT_SCREEN, 4);
    INFO_CLEARCHOICES(0x103af);
}

func void DIA_OKTAV_PICKPOCKET_BACK() {
    INFO_CLEARCHOICES(0x103af);
}

