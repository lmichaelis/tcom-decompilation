instance DIA_SALVI_EXIT(C_INFO) {
    NPC = 0xdbc0;
    NR = 999;
    CONDITION = DIA_SALVI_EXIT_CONDITION;
    INFORMATION = DIA_SALVI_EXIT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_ENDE;
}

func int DIA_SALVI_EXIT_CONDITION() {
    return TRUE;
}

func void DIA_SALVI_EXIT_INFO() {
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_SALVI_Q205_RENEGADECATCH(C_INFO) {
    NPC = 0xdbc0;
    NR = 1;
    CONDITION = DIA_SALVI_Q205_RENEGADECATCH_CONDITION;
    INFORMATION = DIA_SALVI_Q205_RENEGADECATCH_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_SALVI_Q205_RENEGADECATCH_CONDITION() {
    if ((LOG_GETSTATUS(MIS_Q205)) == (LOG_RUNNING)) {
        if (((((Q205_MARVINCAVERENEGADE_COUNT) >= (16)) && ((Q205_MARVINRENEGADECAVE) == (3))) && ((NPC_GETDISTTONPC(SELF, OTHER)) <= (450))) || ((Q205_MARVINRENEGADECAVE) == (4))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void SALVI_Q205_REMOVETIEDMDS() {
    MDL_REMOVEOVERLAYMDS(HERO, "Humans_Marvin_RenegadePrison.MDS");
    HERO.AIVAR[4] = FALSE;
}

func void SALVI_Q205_KILLMARVIN() {
    MDL_REMOVEOVERLAYMDS(HERO, "Humans_Marvin_RenegadePrison.MDS");
    MDL_APPLYOVERLAYMDS(HERO, "HUMANS_SUDDENDEATH.MDS");
    AI_PLAYANI(MIL_6267_SALVI, T_1HATTACKR);
    AI_PLAYANI(HERO, T_DEAD);
    SND_PLAY("FIG_SwordFinal");
    SND_PLAY("SVM_15_DEAD");
    HERO.ATTRIBUTE[1] = -(1);
    HERO.ATTRIBUTE[0] = -(1);
    AI_REMOVEWEAPON(MIL_6267_SALVI);
    HERO.AIVAR[4] = FALSE;
    AI_FUNCTION(SELF, 0xf30d);
}

func void SALVI_Q205_GOTOMARVIN() {
    OTHER.ATTRIBUTE[0] = 1;
    OTHER.FLAGS = 0;
    AI_DRAWWEAPON(SELF);
    AI_SETWALKMODE(SELF, NPC_WALK);
    AI_GOTONPC(SELF, HERO);
    AI_FUNCTION(SELF, 0x132b0);
    AI_STOPPROCESSINFOS(SELF);
}

func void SALVI_Q205_DANIELINCORNER() {
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_DanielInCorner_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_DanielInCorner_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_DanielInCorner_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_DanielInCorner_03_04");
    INFO_CLEARCHOICES(0x132ad);
    INFO_ADDCHOICE(0x132ad, "You want me to kill a defenseless boy? Not gonna happen.", 0x132cc);
    INFO_ADDCHOICE(0x132ad, "You don't have to kill him.", 0x132cb);
    INFO_ADDCHOICE(0x132ad, "Then why don't you untie me?", 0x132c6);
    INFO_CLEARCHOICES(0x132c7);
    INFO_ADDCHOICE(0x132c7, "You want me to kill a defenseless boy? Not gonna happen.", 0x132cc);
    INFO_ADDCHOICE(0x132c7, "You don't have to kill him.", 0x132cb);
    INFO_ADDCHOICE(0x132c7, "I'll do it.", 0x132ca);
}

func void SALVI_Q205_GIVEKNIFE() {
    HERO.AIVAR[95] = TRUE;
    NONE_6269_DANIEL.AIVAR[94] = TRUE;
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Untied_03_05");
    CREATEINVITEMS(SELF, 0x9a58, 1);
    AI_EQUIPBESTMELEEWEAPON(HERO);
}

func void SALVI_Q205_MARVINSTANDUP() {
    AI_WAITTILLEND(SELF, OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_SETWALKMODE(SELF, NPC_WALK);
    AI_GOTONPC(SELF, HERO);
    AI_WAITTILLEND(SELF, OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_PLAYANI(SELF, T_PLUNDER);
    AI_WAITTILLEND(SELF, OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_PLAYANI(SELF, T_JUMPB);
    AI_WAITTILLEND(SELF, OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_PLAYANI(HERO, "T_RUN_2_WALK");
    AI_WAIT(SELF, 0x40200000);
    AI_FUNCTION(SELF, 0x132af);
}

func void SALVI_Q205_ENABLECAMERA() {
    DIACAM_ENABLE();
}

func void DIA_SALVI_Q205_RENEGADECATCH_QUESTIONS() {
    INFO_CLEARCHOICES(0x132ad);
    INFO_ADDCHOICE(0x132ad, "So you dream of a lawless country?", 0x132c1);
    INFO_ADDCHOICE(0x132ad, "Sooner or later Roderich will find you.", 0x132c2);
    INFO_ADDCHOICE(0x132ad, "It's not too late for you to correct your mistake.", 0x132c3);
}

func void DIA_SALVI_Q205_RENEGADECATCH_ROOKIE() {
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Rookie_03_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_Rookie_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Rookie_03_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_Rookie_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Rookie_03_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Rookie_03_06");
    DIA_SALVI_Q205_RENEGADECATCH_QUESTIONS();
}

func void DIA_SALVI_Q205_RENEGADECATCH_INTRODUCE() {
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_03_09");
}

func void DIA_SALVI_Q205_RENEGADECATCH_GERWIN() {
    if ((Q205_MARVINRENEGADECAVE) == (4)) {
        AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_Gerwin_15_01");
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Gerwin_03_02");
        DIA_SALVI_Q205_RENEGADECATCH_INTRODUCE();
    };
    if ((Q205_MARVINKNOWABOUTLASTSERGEANT) == (FALSE)) {
        Q205_MARVINKNOWABOUTLASTSERGEANT = TRUE;
        AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_Gerwin_15_03");
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Gerwin_03_04");
        AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_Gerwin_15_05");
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Gerwin_03_06");
    };
}

func void DIA_SALVI_Q205_RENEGADECATCH_INFO() {
    Q205_CHANGERENEGADEDOOR();
    MIL_6264_RENEGADE.ATTRIBUTE[4] = 30;
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_03_01");
    if ((Q205_MARVINRENEGADECAVE) == (3)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_03_02");
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_03_03");
        if ((Q205_MARVINHADMILITIAARMORRENEGADE) == (FALSE)) {
            AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_15_04");
            AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_03_05");
            AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_03_06");
            AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_03_07");
        };
        DIA_SALVI_Q205_RENEGADECATCH_INTRODUCE();
        DIA_SALVI_Q205_RENEGADECATCH_GERWIN();
        DIA_SALVI_Q205_RENEGADECATCH_ROOKIE();
    };
    DIA_SALVI_Q205_RENEGADECATCH_GERWIN();
    INFO_CLEARCHOICES(0x132ad);
    INFO_ADDCHOICE(0x132ad, "I think I lost my way.", 0x132bd);
    INFO_ADDCHOICE(0x132ad, "Roderich sent me.", 0x132bb);
}

func void DIA_SALVI_Q205_RENEGADECATCH_RODERICH() {
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_Roderich_15_01");
    DIA_SALVI_Q205_RENEGADECATCH_ROOKIE();
}

func void DIA_SALVI_Q205_RENEGADECATCH_JOIN() {
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_Join_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Join_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Join_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Join_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Join_03_05");
    INFO_CLEARCHOICES(0x132ad);
    INFO_ADDCHOICE(0x132ad, "What would I have to do?", 0x132c5);
}

func void DIA_SALVI_Q205_RENEGADECATCH_LOST() {
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_Lost_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Lost_03_02");
    SALVI_Q205_GOTOMARVIN();
}

func void Q205_DIALOGUE_SALVI_WORK() {
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Work_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Work_03_04");
    INFO_CLEARCHOICES(0x132ad);
    INFO_ADDCHOICE(0x132ad, "Let's settle this between us.", 0x132c4);
    INFO_ADDCHOICE(0x132ad, "I want to join you.", 0x132bc);
}

func void SALVI_Q205_COUNT() {
    SALVI_Q205_RENEGADEINFORMATIONS = (SALVI_Q205_RENEGADEINFORMATIONS) + (1);
    if ((SALVI_Q205_RENEGADEINFORMATIONS) == (3)) {
        Q205_DIALOGUE_SALVI_WORK();
    };
}

var int SALVI_Q205_COUNT.SALVI_Q205_RENEGADEINFORMATIONS = 0;
func void DIA_SALVI_Q205_RENEGADECATCH_NOLAW() {
    SALVI_Q205_ENABLECAMERA();
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_NoLaw_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_NoLaw_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_NoLaw_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_NoLaw_03_04");
    SALVI_Q205_COUNT();
}

func void DIA_SALVI_Q205_RENEGADECATCH_RODERICHFIND() {
    SALVI_Q205_ENABLECAMERA();
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_RoderichFind_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_RoderichFind_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_RoderichFind_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_RoderichFind_03_04");
    SALVI_Q205_COUNT();
}

func void DIA_SALVI_Q205_RENEGADECATCH_MISTAKE() {
    SALVI_Q205_ENABLECAMERA();
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_Mistake_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_Mistake_15_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_Mistake_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Mistake_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Mistake_03_05");
    SALVI_Q205_COUNT();
}

func void DIA_SALVI_Q205_RENEGADECATCH_FIGHT() {
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_Fight_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Fight_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Fight_03_03");
    SALVI_Q205_GOTOMARVIN();
}

func void DIA_SALVI_Q205_RENEGADECATCH_WHATDO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_WhatDo_15_01");
    if ((Q205_MARVINRENEGADECAVE) == (3)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_WhatDo_03_02");
        SALVI_Q205_DANIELINCORNER();
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_WhatDo_03_03");
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_Q205, LOG_Q205_SALVI2);
    NPC_EXCHANGEROUTINE(MIL_6267_SALVI, "DANIEL");
}

func void DIA_SALVI_Q205_RENEGADECATCH_MISTAKE_WORK_JOIN_WHATDO_UNTIED() {
    Q205_RENEGADESIGNOREMURDER_ENABLE();
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_Untied_15_01");
    SALVI_Q205_MARVINSTANDUP();
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Untied_03_02");
    SALVI_Q205_GIVEKNIFE();
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Untied_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_Untied_03_04");
    AI_LOGENTRY(TOPIC_Q205, LOG_Q205_WILLKILLDANIEL);
    INFO_CLEARCHOICES(0x132ad);
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0xf30d);
}

instance DIA_SALVI_Q205_DANIEL(C_INFO) {
    NPC = 0xdbc0;
    NR = 1;
    CONDITION = DIA_SALVI_Q205_DANIEL_CONDITION;
    INFORMATION = DIA_SALVI_Q205_DANIEL_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_SALVI_Q205_DANIEL_CONDITION() {
    if ((LOG_GETSTATUS(MIS_Q205)) == (LOG_RUNNING)) {
        if (((Q205_MARVINRENEGADECAVE) == (4)) && ((NPC_GETDISTTOWP(SELF, "PART7_CAVE_BRODDY")) <= (500))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_SALVI_Q205_DANIEL_INFO() {
    SALVI_Q205_DANIELINCORNER();
}

func void DIA_SALVI_Q205_DANIEL_ALRIGHT() {
    Q205_RENEGADESIGNOREMURDER_ENABLE();
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_Daniel_Alright_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_Daniel_Alright_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_Daniel_Alright_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_Daniel_Alright_03_04");
    CREATEINVITEMS(SELF, 0x9a58, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x9a58, 1);
    AI_WAITTILLEND(SELF, OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_EQUIPBESTMELEEWEAPON(HERO);
    HERO.AIVAR[95] = TRUE;
    NONE_6269_DANIEL.AIVAR[94] = TRUE;
    AI_LOGENTRY(TOPIC_Q205, LOG_Q205_WILLKILLDANIEL2);
    INFO_CLEARCHOICES(0x132c7);
    INFO_CLEARCHOICES(0x132ad);
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0xf30d);
}

func void DIA_SALVI_Q205_DANIEL_DONTKILL() {
    Q205_RENEGADESIGNOREMURDER_ENABLE();
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_DontKill_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_DontKill_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_DontKill_15_03");
    if ((Q205_MARVINRENEGADECAVE) == (3)) {
        SALVI_Q205_MARVINSTANDUP();
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_DontKill_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_DontKill_03_05");
    SALVI_Q205_GIVEKNIFE();
    Q205_TRYTOSAVEDANIEL = 1;
    INFO_CLEARCHOICES(0x132c7);
    INFO_CLEARCHOICES(0x132ad);
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_Q205, LOG_Q205_WILLNOTKILLDANIEL2);
    AI_FUNCTION(SELF, 0xf30d);
}

func void DIA_SALVI_Q205_DANIEL_NOTMURDERER() {
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_RENEGADECATCH_NotMurderer_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_NotMurderer_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_NotMurderer_03_03");
    AI_DRAWWEAPON(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_RENEGADECATCH_NotMurderer_03_04");
    SALVI_Q205_GOTOMARVIN();
}

instance DIA_SALVI_Q205_DANIELRESULT(C_INFO) {
    NPC = 0xdbc0;
    NR = 1;
    CONDITION = DIA_SALVI_Q205_DANIELRESULT_CONDITION;
    INFORMATION = DIA_SALVI_Q205_DANIELRESULT_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_SALVI_Q205_DANIELRESULT_CONDITION() {
    if ((LOG_GETSTATUS(MIS_Q205)) == (LOG_RUNNING)) {
        if ((Q205_TRYTOSAVEDANIEL) > (1)) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_SALVI_Q205_DANIELRESULT_INFO() {
    HERO.AIVAR[95] = FALSE;
    if ((Q205_TRYTOSAVEDANIEL) == (4)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_03_01");
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_03_02");
        AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_DanielResult_15_03");
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_03_04");
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_03_05");
        INFO_CLEARCHOICES(0x132cd);
        INFO_ADDCHOICE(0x132cd, "As for my equipment...", 0x132d0);
    };
    if ((Q205_TRYTOSAVEDANIEL) == (2)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_03_06");
        AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_DanielResult_15_07");
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_03_08");
        AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_DanielResult_15_09");
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_03_10");
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_03_11");
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_03_12");
        INFO_CLEARCHOICES(0x132cd);
        INFO_ADDCHOICE(0x132cd, "As for my equipment...", 0x132d0);
    };
    if ((Q205_TRYTOSAVEDANIEL) == (3)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_03_13");
        AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_DanielResult_15_14");
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_03_15");
        AI_DRAWWEAPON(SELF);
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_03_16");
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_03_17");
        AI_STOPPROCESSINFOS(SELF);
        SALVI_Q205_GOTOMARVIN();
    };
}

func void DIA_SALVI_Q205_DANIELRESULT_STUFF() {
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_DanielResult_Stuff_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_Stuff_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_DanielResult_Stuff_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_Stuff_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_Stuff_03_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_Stuff_03_06");
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_DanielResult_Stuff_15_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_Stuff_03_08");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_DanielResult_Stuff_03_09");
    if ((Q205_TRYTOSAVEDANIEL) == (4)) {
        AI_LOGENTRY(TOPIC_Q205, LOG_Q205_DANIELISDEAD);
    };
    if ((Q205_TRYTOSAVEDANIEL) == (2)) {
        AI_LOGENTRY(TOPIC_Q205, LOG_Q205_DANIELISALIVE);
    };
    INFO_CLEARCHOICES(0x132cd);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "CAVE");
    Q205_CHANGERTNINRENEGADECAVE();
    Q205_SPAWNTURTLE();
}

instance DIA_SALVI_Q205_QUESTIONS(C_INFO) {
    NPC = 0xdbc0;
    NR = 1;
    CONDITION = DIA_SALVI_Q205_QUESTIONS_CONDITION;
    INFORMATION = DIA_SALVI_Q205_QUESTIONS_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "I have a few questions for you.";
}

var int SALVI_QUESTIONS_LEAVE = 0;
var int SALVI_QUESTIONS_PLAN = 0;
var int SALVI_QUESTIONS_ACTION = 0;
func int DIA_SALVI_Q205_QUESTIONS_CONDITION() {
    if ((LOG_GETSTATUS(MIS_Q205)) == (LOG_RUNNING)) {
        if ((Q205_MARVINJOINEDRENEGADES) == (TRUE)) {
            if ((((SALVI_QUESTIONS_LEAVE) == (FALSE)) || ((SALVI_QUESTIONS_PLAN) == (FALSE))) || ((SALVI_QUESTIONS_ACTION) == (FALSE))) {
                return TRUE;
            };
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_SALVI_Q205_QUESTIONS_CHOICES() {
    INFO_CLEARCHOICES(0x132d1);
    INFO_ADDCHOICE(0x132d1, DIALOG_BACK, 0x132d8);
    if ((SALVI_QUESTIONS_ACTION) == (FALSE)) {
        INFO_ADDCHOICE(0x132d1, "When do we get out of here?", 0x132d9);
    };
    if ((SALVI_QUESTIONS_PLAN) == (FALSE)) {
        INFO_ADDCHOICE(0x132d1, "What are you planning?", 0x132da);
    };
    if ((SALVI_QUESTIONS_LEAVE) == (FALSE)) {
        INFO_ADDCHOICE(0x132d1, "Why don't you let people leave this place?", 0x132db);
    };
}

func void DIA_SALVI_Q205_QUESTIONS_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_Questions_15_01");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_Questions_03_02");
    DIA_SALVI_Q205_QUESTIONS_CHOICES();
}

func void DIA_SALVI_Q205_QUESTIONS_BACK() {
    AI_RESETFACEANI(SELF);
    INFO_CLEARCHOICES(0x132d1);
}

func void DIA_SALVI_Q205_QUESTIONS_ACTION() {
    SALVI_QUESTIONS_ACTION = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_Questions_Action_15_01");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_Questions_Action_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_Questions_Action_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_Questions_Action_03_04");
}

func void DIA_SALVI_Q205_QUESTIONS_PLAN() {
    SALVI_QUESTIONS_PLAN = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_Questions_Plan_15_01");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_Questions_Plan_03_02");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_Questions_Plan_03_03");
}

func void DIA_SALVI_Q205_QUESTIONS_LEAVE() {
    SALVI_QUESTIONS_LEAVE = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Salvi_Q205_Questions_Leave_15_01");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_Questions_Leave_03_02");
    if (NPC_ISDEAD(NONE_6269_DANIEL)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_Questions_Leave_03_03");
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Salvi_Q205_Questions_Leave_03_04");
}

instance DIA_SALVI_PICKPOCKET(C_INFO) {
    NPC = 0xdbc0;
    NR = 900;
    CONDITION = DIA_SALVI_PICKPOCKET_CONDITION;
    INFORMATION = DIA_SALVI_PICKPOCKET_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = PICKPOCKET_80;
}

func int DIA_SALVI_PICKPOCKET_CONDITION() {
    if (((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (1)) && ((SELF.AIVAR[6]) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_SALVI_PICKPOCKET_INFO() {
    INFO_CLEARCHOICES(0x132dc);
    INFO_ADDCHOICE(0x132dc, DIALOG_BACK, 0x132e0);
    INFO_ADDCHOICE(0x132dc, DIALOG_PICKPOCKET, 0x132df);
}

func void DIA_SALVI_PICKPOCKET_DOIT() {
    if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (2)) {
        B_PICKPOCKET_AMBIENT_TIER_2();
        CREATEINVITEMS(SELF, 0x9014, 1);
        B_GIVEINVITEMS(SELF, OTHER, 0x9014, 1);
        SELF.AIVAR[6] = TRUE;
        INFO_CLEARCHOICES(0x132dc);
    };
    AI_PLAYANI(HERO, T_CANNOTTAKE);
    PRINTSCREEN(PRINT_CANTPICKPOCKETTHISPERSON, -(1), -(1), FONT_SCREEN, 4);
    INFO_CLEARCHOICES(0x132dc);
}

func void DIA_SALVI_PICKPOCKET_BACK() {
    INFO_CLEARCHOICES(0x132dc);
}

