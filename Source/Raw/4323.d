instance DIA_MARKUS_EXIT(C_INFO) {
    NPC = 0xe2c2;
    NR = 999;
    CONDITION = DIA_MARKUS_EXIT_CONDITION;
    INFORMATION = DIA_MARKUS_EXIT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_ENDE;
}

func int DIA_MARKUS_EXIT_CONDITION() {
    return TRUE;
}

var int MARKUS_CANSELLSTUFF = 0;
func void DIA_MARKUS_EXIT_INFO() {
    if ((MARKUS_CANSELLSTUFF) == (FALSE)) {
        MARKUS_CANSELLSTUFF = TRUE;
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_Exit_13_01");
        LOG_CREATETOPIC(TOPIC_BARTER, LOG_NOTE);
        AI_LOGENTRY(TOPIC_BARTER, LOG_SILBACHBARTER_MARKUS);
    };
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_MARKUS_AMBIENT(C_INFO) {
    NPC = 0xe2c2;
    NR = 990;
    CONDITION = DIA_MARKUS_AMBIENT_CONDITION;
    INFORMATION = DIA_MARKUS_AMBIENT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "How are you doing?";
}

func int DIA_MARKUS_AMBIENT_CONDITION() {
    if (((NPC_ISINSTATE(SELF, 0xf09f)) && (NPC_KNOWSINFO(OTHER, 0x15e51))) && ((Q504_TAKEWORKERS) != (2))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_AMBIENT_INFO() {
    NPC_INITAMBIENTS(SELF, 2);
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Ambient_15_00");
    if ((NPC_GETLASTAMBIENT(SELF)) == (1)) {
        AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_Ambient_13_03");
        AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_Ambient_13_04");
        AI_RESETFACEANI(SELF);
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_Ambient_13_05");
    };
    if ((NPC_GETLASTAMBIENT(SELF)) == (2)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_Ambient_13_01");
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_Ambient_13_02");
    };
}

instance DIA_MARKUS_HELLO(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_HELLO_CONDITION;
    INFORMATION = DIA_MARKUS_HELLO_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Who are you?";
}

func int DIA_MARKUS_HELLO_CONDITION() {
    if ((Q504_TAKEWORKERS) != (2)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_HELLO_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Hello_15_00");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hello_13_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hello_13_02");
}

instance DIA_MARKUS_REFUGEE(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_REFUGEE_CONDITION;
    INFORMATION = DIA_MARKUS_REFUGEE_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Are you local and haven't started complaining about refugees yet?";
}

func int DIA_MARKUS_REFUGEE_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x15e51)) {
        if ((Q504_TAKEWORKERS) != (2)) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_REFUGEE_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Refugee_15_01");
    AI_RESETFACEANI(OTHER);
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Refugee_13_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Refugee_13_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Refugee_13_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Refugee_13_05");
}

instance DIA_MARKUS_TIPS(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_TIPS_CONDITION;
    INFORMATION = DIA_MARKUS_TIPS_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Can you give me some advice on archery?";
}

func int DIA_MARKUS_TIPS_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x15e51)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_TIPS_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_tips_15_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_tips_13_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_tips_13_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_tips_13_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_tips_13_04");
    LOG_CREATETOPIC(TOPIC_GOODADVICE, LOG_NOTE);
    AI_LOGENTRY(TOPIC_GOODADVICE, LOG_GOODADVICE_BOWANDCROSSBOW);
}

instance DIA_MARKUS_OTHSHEEP(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_OTHSHEEP_CONDITION;
    INFORMATION = DIA_MARKUS_OTHSHEEP_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Haven't you seen a sheep wandering around on its own?";
}

func int DIA_MARKUS_OTHSHEEP_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x15bcf)) {
        if ((Q504_TAKEWORKERS) != (2)) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_OTHSHEEP_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_OthSheep_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_OthSheep_13_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_OthSheep_15_03");
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_OthSheep_13_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_OthSheep_13_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_OthSheep_13_06");
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_OthSheep_15_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_OthSheep_13_08");
    if ((LOG_GETSTATUS(MIS_SQ102)) == (LOG_RUNNING)) {
        AI_LOGENTRY(TOPIC_SQ102, LOG_SQ102_MARKUS_OTHSHEEP);
    };
}

instance DIA_MARKUS_SQ115_BOAR(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_SQ115_BOAR_CONDITION;
    INFORMATION = DIA_MARKUS_SQ115_BOAR_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Where could I find a boar?";
}

func int DIA_MARKUS_SQ115_BOAR_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ115)) == (LOG_RUNNING)) && ((SQ115_KNOWWHEREAREBOARS) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_SQ115_BOAR_INFO() {
    SQ115_KNOWWHEREAREBOARS = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_SQ115_Boar_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ115_Boar_03_02");
    if ((KAPITEL) == (1)) {
        AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ115_Boar_03_03");
        AI_OUTPUT(OTHER, SELF, "DIA_Markus_SQ115_Boar_15_04");
        AI_RESETFACEANI(SELF);
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ115_Boar_03_05");
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ115_Boar_03_06");
    };
    AI_LOGENTRY(TOPIC_SQ115, LOG_SQ115_MARKUS_BOARS);
}

instance DIA_MARKUS_SQ118_HELP(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_SQ118_HELP_CONDITION;
    INFORMATION = DIA_MARKUS_SQ118_HELP_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Could you replace Folkard on the gate for a while?";
}

func int DIA_MARKUS_SQ118_HELP_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_SQ118)) == (LOG_RUNNING)) && ((SQ118_GUARDSCOUNT) < (2))) && ((SQ118_FOLKARD_NEEDHELP) == (1))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_SQ118_HELP_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_SQ118_Help_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ118_Help_03_02");
    AI_LOGENTRY(TOPIC_SQ118, LOG_SQ118_MARKUS_NEEDFOOD);
}

instance DIA_MARKUS_SQ118_GOTFOOD(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_SQ118_GOTFOOD_CONDITION;
    INFORMATION = DIA_MARKUS_SQ118_GOTFOOD_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I have provision for you.";
}

func int DIA_MARKUS_SQ118_GOTFOOD_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_SQ118)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x15e60))) && ((SQ118_GUARDSCOUNT) < (2))) {
        if ((C_GOTANYKINDOFWINE(OTHER)) && ((NPC_HASITEMS(OTHER, 0x84b0)) >= (1))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_SQ118_GOTFOOD_INFO() {
    SQ118_FOLKARD_NEEDHELP = 2;
    B_STANDUP();
    B_GIVEANYWINE_USEIT();
    B_GIVEINVITEMS(OTHER, SELF, 0x84b0, 1);
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_SQ118_GotFood_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ118_GotFood_03_02");
    NPC_EXCHANGEROUTINE(SELF, "SQ118_GUARD");
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_MARKUS_TRAINME(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_TRAINME_CONDITION;
    INFORMATION = DIA_MARKUS_TRAINME_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I would like to know more about archery.";
}

func int DIA_MARKUS_TRAINME_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x15e57)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_TRAINME_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_trainMe_15_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_trainMe_13_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_trainMe_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_trainMe_13_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_trainMe_13_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_trainMe_13_05");
    TEACHER_LOGENTRY_MARKUS();
    LOG_CREATETOPIC(TOPIC_SILBACHTEACHER, LOG_NOTE);
    AI_LOGENTRY(TOPIC_SILBACHTEACHER, LOG_MARKUS_TRAINME);
}

var int MARKUS_GOODSTUDENT = 0;
var int MARKUS_GOODSTUDENT_GIFT = 0;
var int MARKUS_NOMORE = 0;
var string MARKUS_PRINTS = "";
var int MARKUS_CURRENTBLEVEL = 0;
var int MARKUS_CURRENTDEXLEVEL = 0;
instance DIA_MARKUS_TEACH(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_TEACH_CONDITION;
    INFORMATION = DIA_MARKUS_TEACH_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Teach me.";
}

func int DIA_MARKUS_TEACH_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x15e66)) && ((MARKUS_NOMORE) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_TEACH_CHOICES() {
    MARKUS_GOLDCOST = 3;
    MARKUS_CURRENTBLEVEL = OTHER.AIVAR[86];
    MARKUS_CURRENTDEXLEVEL = OTHER.AIVAR[82];
    INFO_CLEARCHOICES(0x15e6f);
    INFO_ADDCHOICE(0x15e6f, DIALOG_BACK, 0x15e74);
    INFO_ADDCHOICE(0x15e6f, B_BUILDLEARNSTRING2(PRINT_LEARNBOW1, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_BOW, 1), MARKUS_GOLDCOST), 0x15e75);
    INFO_ADDCHOICE(0x15e6f, B_BUILDLEARNSTRING2(PRINT_LEARNBOW5, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_BOW, 5), (MARKUS_GOLDCOST) * (5)), 0x15e76);
    INFO_ADDCHOICE(0x15e6f, B_BUILDLEARNSTRING2(PRINT_LEARNDEX1, B_GETLEARNCOSTATTRIBUTE(OTHER, ATR_DEXTERITY, 1), MARKUS_GOLDCOST), 0x15e77);
    INFO_ADDCHOICE(0x15e6f, B_BUILDLEARNSTRING2(PRINT_LEARNDEX5, B_GETLEARNCOSTATTRIBUTE(OTHER, ATR_DEXTERITY, 5), (MARKUS_GOLDCOST) * (5)), 0x15e78);
    if (((OTHER.AIVAR[86]) >= (30)) && ((OTHER.AIVAR[82]) >= (40))) {
        MARKUS_NOMORE = TRUE;
    };
}

var int DIA_MARKUS_TEACH_CHOICES.MARKUS_GOLDCOST = 0;
func void DIA_MARKUS_TEACH_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Teach_15_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Teach_13_01");
    DIA_MARKUS_TEACH_CHOICES();
}

func void DIA_MARKUS_TEACH_BACK() {
    INFO_CLEARCHOICES(0x15e6f);
    if (((MARKUS_GOODSTUDENT) >= (25)) && ((MARKUS_GOODSTUDENT_GIFT) == (FALSE))) {
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_TeachBack_13_01");
        AI_OUTPUT(OTHER, SELF, "DIA_Markus_TeachBack_15_02");
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_TeachBack_13_03");
        CREATEINVITEMS(SELF, 0x8645, 1);
        B_GIVEINVITEMS(SELF, OTHER, 0x8645, 1);
        MARKUS_GOODSTUDENT_GIFT = TRUE;
        AI_OUTPUT(OTHER, SELF, "DIA_Markus_TeachBack_15_04");
    };
}

func void DIA_MARKUS_TEACH_BOW1() {
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (MARKUS_PAYMENT1)) {
        if ((MARKUS_CURRENTBLEVEL) < (OTHER.AIVAR[86])) {
            SND_PLAY(GELDBEUTEL);
            B_GIVEINVITEMS(OTHER, SELF, 0x859b, MARKUS_PAYMENT1);
            MARKUS_GOODSTUDENT += 1;
            NPC_REMOVEINVITEMS(SELF, 0x859b, MARKUS_PAYMENT1);
        };
        B_TEACHFIGHTTALENTPERCENT(SELF, OTHER, NPC_TALENT_BOW, 1, 30);
        DIA_MARKUS_TEACH_CHOICES();
    };
    if ((NPC_HASITEMS(OTHER, 0x859b)) < (MARKUS_PAYMENT1)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_Teach_BOW1_13_01");
        MARKUS_PRINTS = CONCATSTRINGS(PRINT_RGOLD, INTTOSTRING(MARKUS_PAYMENT1));
        PRINTSCREEN(MARKUS_PRINTS, -(1), -(1), FONT_SCREEN, 2);
        DIA_MARKUS_TEACH_CHOICES();
    };
}

func void DIA_MARKUS_TEACH_BOW5() {
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (MARKUS_PAYMENT5)) {
        if ((MARKUS_CURRENTBLEVEL) < (OTHER.AIVAR[86])) {
            B_GIVEINVITEMS(OTHER, SELF, 0x859b, MARKUS_PAYMENT5);
            SND_PLAY(GELDBEUTEL);
            MARKUS_GOODSTUDENT += 5;
            NPC_REMOVEINVITEMS(SELF, 0x859b, MARKUS_PAYMENT5);
        };
        B_TEACHFIGHTTALENTPERCENT(SELF, OTHER, NPC_TALENT_BOW, 5, 30);
        DIA_MARKUS_TEACH_CHOICES();
    };
    if ((NPC_HASITEMS(OTHER, 0x859b)) < (MARKUS_PAYMENT5)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_Teach_BOW5_13_01");
        MARKUS_PRINTS = CONCATSTRINGS(PRINT_RGOLD, INTTOSTRING(MARKUS_PAYMENT5));
        PRINTSCREEN(MARKUS_PRINTS, -(1), -(1), FONT_SCREEN, 2);
        DIA_MARKUS_TEACH_CHOICES();
    };
}

func void DIA_MARKUS_TEACHDEX1() {
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (MARKUS_PAYMENT1)) {
        if ((MARKUS_CURRENTDEXLEVEL) < (OTHER.AIVAR[82])) {
            SND_PLAY(GELDBEUTEL);
            B_GIVEINVITEMS(OTHER, SELF, 0x859b, MARKUS_PAYMENT1);
            MARKUS_GOODSTUDENT += 1;
            NPC_REMOVEINVITEMS(SELF, 0x859b, MARKUS_PAYMENT1);
        };
        B_TEACHATTRIBUTEPOINTS(SELF, OTHER, ATR_DEXTERITY, 1, 40);
        DIA_MARKUS_TEACH_CHOICES();
    };
    if ((NPC_HASITEMS(OTHER, 0x859b)) < (MARKUS_PAYMENT1)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_TeachDEX_13_01");
        MARKUS_PRINTS = CONCATSTRINGS(PRINT_RGOLD, INTTOSTRING(MARKUS_PAYMENT1));
        PRINTSCREEN(MARKUS_PRINTS, -(1), -(1), FONT_SCREEN, 2);
        DIA_MARKUS_TEACH_CHOICES();
    };
}

func void DIA_MARKUS_TEACHDEX5() {
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (MARKUS_PAYMENT5)) {
        if ((MARKUS_CURRENTDEXLEVEL) < (OTHER.AIVAR[82])) {
            SND_PLAY(GELDBEUTEL);
            B_GIVEINVITEMS(OTHER, SELF, 0x859b, MARKUS_PAYMENT5);
            MARKUS_GOODSTUDENT += 5;
            NPC_REMOVEINVITEMS(SELF, 0x859b, MARKUS_PAYMENT5);
        };
        B_TEACHATTRIBUTEPOINTS(SELF, OTHER, ATR_DEXTERITY, 5, 40);
        DIA_MARKUS_TEACH_CHOICES();
    };
    if ((NPC_HASITEMS(OTHER, 0x859b)) < (MARKUS_PAYMENT5)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_Teach_13_05");
        MARKUS_PRINTS = CONCATSTRINGS(PRINT_RGOLD, INTTOSTRING(MARKUS_PAYMENT5));
        PRINTSCREEN(MARKUS_PRINTS, -(1), -(1), FONT_SCREEN, 2);
        DIA_MARKUS_TEACH_CHOICES();
    };
}

instance DIA_MARKUS_FLETCHERY(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_FLETCHERY_CONDITION;
    INFORMATION = DIA_MARKUS_FLETCHERY_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = B_BUILDLEARNSTRING2(PRINT_LEARN_FLETCHERY1, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_FLETCHERY, 1), MARKUS_FLETCHERY);
}

func int DIA_MARKUS_FLETCHERY_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x15e66)) && ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_FLETCHERY)) == (0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_FLETCHERY_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Fletchery_15_01");
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (MARKUS_FLETCHERY)) {
        if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_FLETCHERY)) == (1)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x859b, MARKUS_FLETCHERY);
            AI_OUTPUT(SELF, OTHER, "DIA_Markus_Fletchery_13_01");
            AI_OUTPUT(SELF, OTHER, "DIA_Markus_Fletchery_13_02");
            PRINTSCREEN(PRINT_LEARNFLETCHERY, -(1), -(1), FONT_SCREEN, 2);
            NPC_REMOVEINVITEMS(SELF, 0x859b, MARKUS_FLETCHERY);
        };
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Fletchery_13_03");
}

instance DIA_MARKUS_Q205_FOREST(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_Q205_FOREST_CONDITION;
    INFORMATION = DIA_MARKUS_Q205_FOREST_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_MARKUS_Q205_FOREST_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q205)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x15d40))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_Q205_FOREST_INFO() {
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Forest_03_01");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Forest_03_02");
    B_STANDUP();
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Forest_03_03");
    INFO_CLEARCHOICES(0x15e7c);
    INFO_ADDCHOICE(0x15e7c, "There's something else I need to do.", 0x15e81);
    INFO_ADDCHOICE(0x15e7c, "All right, let's go.", 0x15e80);
}

var int MARKUS_Q205_FOLLOW = 0;
func void DIA_MARKUS_Q205_FOREST_YES() {
    MARKUS_Q205_FOLLOW = 2;
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Q205_Forest_Yes_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Forest_Yes_03_02");
    INFO_CLEARCHOICES(0x15e7c);
    AI_STOPPROCESSINFOS(SELF);
    SELF.AIVAR[15] = TRUE;
    NPC_EXCHANGEROUTINE(SELF, "Q205_GUIDE_01");
    AI_LOGENTRY(TOPIC_Q205, LOG_Q205_MARKUS_LETSGO);
}

func void DIA_MARKUS_Q205_FOREST_NO() {
    MARKUS_Q205_FOLLOW = 1;
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Q205_Forest_No_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Forest_No_03_02");
    INFO_CLEARCHOICES(0x15e7c);
    AI_LOGENTRY(TOPIC_Q205, LOG_Q205_MARKUS_NOTNOW);
}

instance DIA_MARKUS_Q205_LETSGO(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_Q205_LETSGO_CONDITION;
    INFORMATION = DIA_MARKUS_Q205_LETSGO_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "All right, let's go.";
}

func int DIA_MARKUS_Q205_LETSGO_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q205)) == (LOG_RUNNING)) && ((MARKUS_Q205_FOLLOW) == (1))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_Q205_LETSGO_INFO() {
    DIA_MARKUS_Q205_FOREST_YES();
}

instance DIA_MARKUS_Q205_BEER(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_Q205_BEER_CONDITION;
    INFORMATION = DIA_MARKUS_Q205_BEER_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_MARKUS_Q205_BEER_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q205)) == (LOG_RUNNING)) && ((NPC_GETDISTTOWP(SELF, "PART12_PATH_40")) <= (500))) && ((MARKUS_Q205_FOLLOW) == (2))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_Q205_BEER_INFO() {
    AI_GOTOWP(SELF, "PART12_PATH_42");
    AI_WAITTILLEND(OTHER, SELF);
    AI_TURNTONPC(OTHER, SELF);
    AI_GOTONPC(OTHER, SELF);
    AI_PLAYANI(SELF, T_PLUNDER);
    AI_TURNTONPC(SELF, OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Beer_03_01");
    AI_LOGENTRY(TOPIC_Q205, LOG_Q205_MARKUS_BEER);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "Q205_GUIDE_02");
}

instance DIA_MARKUS_Q205_CAMP(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_Q205_CAMP_CONDITION;
    INFORMATION = DIA_MARKUS_Q205_CAMP_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_MARKUS_Q205_CAMP_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q205)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x15e85))) && ((NPC_GETDISTTOWP(SELF, "PART12_PATH_116")) <= (500))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_Q205_CAMP_NEXT() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Camp_Next_03_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Q205_Camp_Next_15_02");
    B_LOGENTRY(TOPIC_Q205, LOG_Q205_MARKUS_GOODLUCK);
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
    INFO_CLEARCHOICES(0x15e88);
    AI_STOPPROCESSINFOS(SELF);
    SELF.AIVAR[15] = FALSE;
    NPC_EXCHANGEROUTINE(SELF, START);
    Q205_SPAWNRENEGADES();
}

var int MARKUS_Q205_CAMP_GUARDS = 0;
var int MARKUS_Q205_CAMP_MORE = 0;
func void DIA_MARKUS_Q205_CAMP_CHOICES() {
    if (((MARKUS_Q205_CAMP_GUARDS) == (FALSE)) || ((MARKUS_Q205_CAMP_MORE) == (FALSE))) {
        INFO_CLEARCHOICES(0x15e88);
        if ((MARKUS_Q205_CAMP_GUARDS) == (FALSE)) {
            INFO_ADDCHOICE(0x15e88, "Are the guards responsible for these dead animals?", 0x15e90);
        };
        if ((MARKUS_Q205_CAMP_MORE) == (FALSE)) {
            INFO_ADDCHOICE(0x15e88, "See anything else?", 0x15e8f);
        };
    };
    DIA_MARKUS_Q205_CAMP_NEXT();
}

func void DIA_MARKUS_Q205_CAMP_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Camp_03_01");
    AI_TURNAWAY(SELF, OTHER);
    AI_PLAYANI(SELF, T_SEARCH);
    AI_TURNTONPC(SELF, OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Camp_03_02");
    DIA_MARKUS_Q205_CAMP_CHOICES();
}

func void DIA_MARKUS_Q205_CAMP_MORE() {
    MARKUS_Q205_CAMP_MORE = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Q205_Camp_More_15_01");
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Camp_More_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Camp_More_03_03");
    AI_TURNAWAY(SELF, OTHER);
    AI_PLAYANI(SELF, T_PLUNDER);
    AI_TURNTONPC(SELF, OTHER);
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Camp_More_03_04");
    AI_RESETFACEANI(SELF);
    DIA_MARKUS_Q205_CAMP_CHOICES();
}

func void DIA_MARKUS_Q205_CAMP_GUARDS() {
    MARKUS_Q205_CAMP_GUARDS = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Q205_Camp_Guards_15_01");
    AI_RESETFACEANI(OTHER);
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Camp_Guards_03_02");
    AI_STARTFACEANI(SELF, S_DOUBT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Camp_Guards_03_03");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Camp_Guards_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Camp_Guards_03_05");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Camp_Guards_03_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q205_Camp_Guards_03_07");
    DIA_MARKUS_Q205_CAMP_CHOICES();
}

instance DIA_MARKUS_SQ416_SMALLTALKBEAST(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_SQ416_SMALLTALKBEAST_CONDITION;
    INFORMATION = DIA_MARKUS_SQ416_SMALLTALKBEAST_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_MARKUS_SQ416_SMALLTALKBEAST_CONDITION() {
    if (((KAPITEL) == (4)) && ((LOG_GETSTATUS(MIS_Q403)) != (LOG_SUCCESS))) {
        if (((NPC_GETDISTTOWP(NONE_11037_MARKUS, "VILLAGE_SMALLTALK_14")) <= (500)) && ((NPC_GETDISTTOWP(NONE_6262_CARDEN, "VILLAGE_SMALLTALK_13")) <= (500))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_SQ416_SMALLTALKBEAST_INFO() {
    TRIA_INVITE(NONE_6262_CARDEN);
    TRIA_STARTEXT(FALSE);
    AI_LOOKATNPC(OTHER, SELF);
    B_TURNTONPC(NONE_11037_MARKUS, NONE_6262_CARDEN);
    B_TURNTONPC(NONE_6262_CARDEN, NONE_11037_MARKUS);
    TRIA_WAIT();
    TRIA_NEXT(NONE_6262_CARDEN);
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ416_SmalltalkBeast_03_01");
    TRIA_WAIT();
    TRIA_NEXT(NONE_11037_MARKUS);
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ416_SmalltalkBeast_03_02");
    INFO_CLEARCHOICES(0x15e91);
    INFO_ADDCHOICE(0x15e91, "Is something wrong?", 0x15e94);
}

func void DIA_MARKUS_SQ416_SMALLTALKBEAST_WHAT() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_SQ416_SmalltalkBeast_What_15_01");
    TRIA_WAIT();
    AI_TURNTONPC(SELF, OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ416_SmalltalkBeast_What_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ416_SmalltalkBeast_What_03_03");
    INFO_CLEARCHOICES(0x15e91);
    INFO_ADDCHOICE(0x15e91, DIALOG_ENDE, 0x15e97);
    INFO_ADDCHOICE(0x15e91, "Who did it get?", 0x15e95);
}

func void DIA_MARKUS_SQ416_SMALLTALKBEAST_WHAT_WHO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_SQ416_SmalltalkBeast_Who_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ416_SmalltalkBeast_Who_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ416_SmalltalkBeast_Who_03_03");
    INFO_ADDCHOICE(0x15e91, "What now? Do you need some help?", 0x15e96);
}

func void DIA_MARKUS_SQ416_SMALLTALKBEAST_WHAT_HELP() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_SQ416_SmalltalkBeast_Help_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ416_SmalltalkBeast_Help_03_02");
}

func void DIA_MARKUS_SQ416_SMALLTALKBEAST_BACK() {
    TRIA_FINISH();
    AI_STOPLOOKAT(SELF);
    AI_STOPLOOKAT(OTHER);
    INFO_CLEARCHOICES(0x15e91);
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0x15e98);
}

func void MARKUS_SQ416_BRINGBACKRTN() {
    NPC_EXCHANGEROUTINE(NONE_6262_CARDEN, START);
    NPC_EXCHANGEROUTINE(NONE_11037_MARKUS, START);
}

instance DIA_MARKUS_Q504_FEEL(C_INFO) {
    NPC = 0xe2c2;
    NR = 90;
    CONDITION = DIA_MARKUS_Q504_FEEL_CONDITION;
    INFORMATION = DIA_MARKUS_Q504_FEEL_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "How's the morale?";
}

func int DIA_MARKUS_Q504_FEEL_CONDITION() {
    if (((Q504_TAKEWORKERS) == (2)) && ((NPC_GETDISTTOWP(SELF, "PART5_Q505_MARKUS")) <= (0x7d0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_Q504_FEEL_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    B_SAY(OTHER, SELF, "$MARVIN_VolfzackMorale3");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q504_Feel_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Q504_Feel_03_02");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
}

instance DIA_MARKUS_HUNTING_BASE(C_INFO) {
    NPC = 0xe2c2;
    NR = 940;
    CONDITION = DIA_MARKUS_HUNTING_BASE_CONDITION;
    INFORMATION = DIA_MARKUS_HUNTING_BASE_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = B_BUILDLEARNSTRING2(PRINT_LEARN_HUNTING_BASE, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_TAKEANIMALTROPHY, TROPHY_FUR), MARKUS_BASETROPHY);
}

func int DIA_MARKUS_HUNTING_BASE_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x15e66)) && ((PLAYER_TALENT_TAKEANIMALTROPHY[2]) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_HUNTING_BASE_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Hunting_Base_15_01");
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (MARKUS_BASETROPHY)) {
        if ((PLAYER_TALENT_TAKEANIMALTROPHY[2]) == (TRUE)) {
            if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_SNEAK)) == (0)) {
                PRINTSCREEN(PRINT_LEARNSNEAK, -(1), YPOS_LEVELUP, FONT_SCREEN, 2);
                AI_OUTPUT(SELF, OTHER, "DIA_Markus_Base_Sneak_03_01");
                B_TEACHTHIEFTALENT(NONE_11037_MARKUS, HERO, NPC_TALENT_SNEAK, 1);
                AI_OUTPUT(SELF, OTHER, "DIA_Markus_Base_Sneak_03_02");
            };
            B_GIVEINVITEMS(OTHER, SELF, 0x859b, MARKUS_BASETROPHY);
            AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Base_03_02");
            AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Base_03_03");
            AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Base_03_04");
            PRINTSCREEN(PRINT_LEARNTAKEANIMALTROPHY, -(1), -(1), FONT_SCREEN, 2);
            NPC_REMOVEINVITEMS(SELF, 0x859b, MARKUS_BASETROPHY);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x859b)) < (MARKUS_BASETROPHY)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Base_03_05");
    };
}

var int MARKUS_ALLHUNT = 0;
instance DIA_MARKUS_HUNTING_SPECIAL(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_HUNTING_SPECIAL_CONDITION;
    INFORMATION = DIA_MARKUS_HUNTING_SPECIAL_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Can you teach me something about hunting?";
}

func int DIA_MARKUS_HUNTING_SPECIAL_CONDITION() {
    if (((NPC_KNOWSINFO(OTHER, 0x15e66)) && ((PLAYER_TALENT_TAKEANIMALTROPHY[2]) == (TRUE))) && ((MARKUS_ALLHUNT) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_HUNTING_SPECIAL_CHOICES() {
    INFO_CLEARCHOICES(0x15ea0);
    INFO_ADDCHOICE(0x15ea0, DIALOG_BACK, 0x15ea4);
    if ((PLAYER_TALENT_TAKEANIMALTROPHY[7]) == (FALSE)) {
        INFO_ADDCHOICE(0x15ea0, B_BUILDLEARNSTRING2(PRINT_TEACHBFSTING, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_TAKEANIMALTROPHY, TROPHY_BFSTING), MARKUS_STINGSTROPHY), 0x15ea5);
    };
    if ((PLAYER_TALENT_TAKEANIMALTROPHY[8]) == (FALSE)) {
        INFO_ADDCHOICE(0x15ea0, B_BUILDLEARNSTRING2(PRINT_TEACHMANDIBLES, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_TAKEANIMALTROPHY, TROPHY_MANDIBLES), MARKUS_MANDIBLESTROPHY), 0x15ea6);
    };
    if ((PLAYER_TALENT_TAKEANIMALTROPHY[6]) == (FALSE)) {
        INFO_ADDCHOICE(0x15ea0, B_BUILDLEARNSTRING2(PRINT_TEACHBFWING, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_TAKEANIMALTROPHY, TROPHY_BFWING), MARKUS_WINGSTROPHY), 0x15ea7);
    };
    if ((PLAYER_TALENT_TAKEANIMALTROPHY[1]) == (FALSE)) {
        INFO_ADDCHOICE(0x15ea0, B_BUILDLEARNSTRING2(PRINT_TEACHCLAWS, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_TAKEANIMALTROPHY, TROPHY_CLAWS), MARKUS_CLAWSTROPHY), 0x15ea8);
    };
    if ((PLAYER_TALENT_TAKEANIMALTROPHY[0]) == (FALSE)) {
        INFO_ADDCHOICE(0x15ea0, B_BUILDLEARNSTRING2(PRINT_TEACHTEETH, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_TAKEANIMALTROPHY, TROPHY_TEETH), MARKUS_CLAWSTROPHY), 0x1729f);
    };
}

func void DIA_MARKUS_HUNTING_SPECIAL_INFO() {
    B_SAY(OTHER, SELF, "$MARVIN_CanYouTeachMeHunting");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Special_03_01");
    DIA_MARKUS_HUNTING_SPECIAL_CHOICES();
}

func void DIA_MARKUS_HUNTING_SPECIAL_BACK() {
    INFO_CLEARCHOICES(0x15ea0);
    if ((((((PLAYER_TALENT_TAKEANIMALTROPHY[7]) == (TRUE)) && ((PLAYER_TALENT_TAKEANIMALTROPHY[8]) == (TRUE))) && ((PLAYER_TALENT_TAKEANIMALTROPHY[6]) == (TRUE))) && ((PLAYER_TALENT_TAKEANIMALTROPHY[1]) == (TRUE))) && ((PLAYER_TALENT_TAKEANIMALTROPHY[0]) == (TRUE))) {
        MARKUS_ALLHUNT = TRUE;
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_AllHunt_03_01");
    };
}

func void DIA_MARKUS_HUNTING_SPECIAL_BFSTING() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Hunting_Special_BFSting_15_01");
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (MARKUS_STINGSTROPHY)) {
        if ((PLAYER_TALENT_TAKEANIMALTROPHY[7]) == (TRUE)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x859b, MARKUS_STINGSTROPHY);
            AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Special_BFSting_03_02");
            AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Special_BFSting_03_03");
            PRINTSCREEN(PRINT_LEARNTAKEANIMALTROPHYSTING, -(1), -(1), FONT_SCREEN, 2);
            NPC_REMOVEINVITEMS(SELF, 0x859b, MARKUS_STINGSTROPHY);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x859b)) < (MARKUS_STINGSTROPHY)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Special_BFSting_03_04");
    };
    DIA_MARKUS_HUNTING_SPECIAL_CHOICES();
}

func void DIA_MARKUS_HUNTING_SPECIAL_MANDIBLES() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Hunting_Special_Mandibles_15_01");
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (MARKUS_MANDIBLESTROPHY)) {
        if ((PLAYER_TALENT_TAKEANIMALTROPHY[8]) == (TRUE)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x859b, MARKUS_MANDIBLESTROPHY);
            AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Special_Mandibles_03_02");
            AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Special_Mandibles_03_03");
            PRINTSCREEN(PRINT_LEARNTAKEANIMALTROPHYMANDIBLES, -(1), -(1), FONT_SCREEN, 2);
            NPC_REMOVEINVITEMS(SELF, 0x859b, MARKUS_MANDIBLESTROPHY);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x859b)) < (MARKUS_MANDIBLESTROPHY)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Special_Mandibles_03_04");
    };
    DIA_MARKUS_HUNTING_SPECIAL_CHOICES();
}

func void DIA_MARKUS_HUNTING_SPECIAL_BFWING() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Hunting_Special_BFWing_15_01");
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (MARKUS_WINGSTROPHY)) {
        if ((PLAYER_TALENT_TAKEANIMALTROPHY[6]) == (TRUE)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x859b, MARKUS_WINGSTROPHY);
            AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Special_BFWing_03_02");
            PRINTSCREEN(PRINT_LEARNTAKEANIMALTROPHYWING, -(1), -(1), FONT_SCREEN, 2);
            NPC_REMOVEINVITEMS(SELF, 0x859b, MARKUS_WINGSTROPHY);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x859b)) < (MARKUS_WINGSTROPHY)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Special_BFWing_03_03");
    };
    DIA_MARKUS_HUNTING_SPECIAL_CHOICES();
}

func void DIA_MARKUS_HUNTING_SPECIAL_CLAWS() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_Hunting_Special_Claws_15_01");
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (MARKUS_CLAWSTROPHY)) {
        if ((PLAYER_TALENT_TAKEANIMALTROPHY[1]) == (TRUE)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x859b, MARKUS_CLAWSTROPHY);
            AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Special_Claws_03_02");
            AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Special_Claws_03_03");
            PRINTSCREEN(PRINT_LEARNTAKEANIMALTROPHYCLAWS, -(1), -(1), FONT_SCREEN, 2);
            NPC_REMOVEINVITEMS(SELF, 0x859b, MARKUS_CLAWSTROPHY);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x859b)) < (MARKUS_CLAWSTROPHY)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_Hunting_Special_Claws_03_04");
    };
    DIA_MARKUS_HUNTING_SPECIAL_CHOICES();
}

instance DIA_MARKUS_SQ101_GUIDE(C_INFO) {
    NPC = 0xe2c2;
    NR = 1;
    CONDITION = DIA_MARKUS_SQ101_GUIDE_CONDITION;
    INFORMATION = DIA_MARKUS_SQ101_GUIDE_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Bastian sent me for wood...";
}

func int DIA_MARKUS_SQ101_GUIDE_CONDITION() {
    if ((LOG_GETSTATUS(MIS_SQ101)) == (LOG_RUNNING)) {
        if (((NPC_KNOWSINFO(OTHER, 0x15123)) == (FALSE)) && ((NPC_KNOWSINFO(OTHER, 0x14d15)) == (FALSE))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_SQ101_GUIDE_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_SQ101_Guide_15_01");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ101_Guide_03_02");
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ101_Guide_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ101_Guide_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ101_Guide_03_05");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ101_Guide_03_06");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SQ101_Guide_03_07");
    AI_LOGENTRY(TOPIC_SQ101, LOG_SQ101_MARKUS_GUIDE);
}

instance DIA_MARKUS_SELLTROPHY(C_INFO) {
    NPC = 0xe2c2;
    NR = 970;
    CONDITION = DIA_MARKUS_SELLTROPHY_CONDITION;
    INFORMATION = DIA_MARKUS_SELLTROPHY_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "I brought the trophies.";
}

func int DIA_MARKUS_SELLTROPHY_CONDITION() {
    if ((MARKUS_CANSELLSTUFF) == (TRUE)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

var int MARKUS_TROHPYINSTANCE = 0;
var int MARKUS_TROPHYVALUE = 0;
var int MARKUS_TROPHYAMOUNT = 0;
var int MARKUSTEETH_GOLD = 0;
var int MARKUSTEETH_COUNT = 0;
var int MAXCLAW = 0;
var int MAXLURKERCLAW = 0;
var int MAXSEALURKERCLAW = 0;
var int MAXTEETH = 0;
var int MAXBOARTUSK = 0;
var int MAXTROLLTOOTH = 0;
var int MAXSHARKTEETH = 0;
var int GOLDCLAW = 0;
var int GOLDLURKERCLAW = 0;
var int GOLDSEALURKERCLAW = 0;
var int GOLDTEETH = 0;
var int GOLDBOARTUSK = 0;
var int GOLDTROLLTOOTH = 0;
var int GOLDSHARKTEETH = 0;
func void DIA_MARKUS_SELLTROPHY_CHOICES() {
    MAXCLAW = NPC_HASITEMS(HERO, 0x843a);
    MAXLURKERCLAW = NPC_HASITEMS(HERO, 0x843b);
    MAXSEALURKERCLAW = NPC_HASITEMS(HERO, 0x8a19);
    MAXTEETH = NPC_HASITEMS(HERO, 0x843c);
    MAXBOARTUSK = NPC_HASITEMS(HERO, 0x8a2c);
    MAXTROLLTOOTH = NPC_HASITEMS(HERO, 0x844e);
    MAXSHARKTEETH = NPC_HASITEMS(HERO, 0x844d);
    RESERVED_VAR_INT_28 = NPC_HASITEMS(HERO, 0x8a18);
    GOLDCLAW = 0;
    GOLDLURKERCLAW = 0;
    GOLDSEALURKERCLAW = 0;
    GOLDTEETH = 0;
    GOLDBOARTUSK = 0;
    GOLDTROLLTOOTH = 0;
    GOLDSHARKTEETH = 0;
    RESERVED_VAR_INT_29 = 0;
    MARKUSTEETH_COUNT = (((((((MAXCLAW) + (MAXLURKERCLAW)) + (MAXSEALURKERCLAW)) + (MAXTEETH)) + (MAXBOARTUSK)) + (MAXTROLLTOOTH)) + (MAXSHARKTEETH)) + (RESERVED_VAR_INT_28);
    RESERVED_VAR_INT_30 = -(1);
    RESERVED_VAR_INT_31 = 0;
    RESERVED_VAR_STRING_06 = CS4(DIALOG_ALL, RESERVED_CONST_STRING_19, I2S(RESERVED_VAR_INT_28), RESERVED_CONST_STRING_20);
    INFO_CLEARCHOICES(0x15eac);
    if ((NPC_HASITEMS(OTHER, 0x843a)) >= (1)) {
        INFO_ADDCHOICE(0x15eac, "(Give common claws)", 0x15ecb);
    };
    if ((NPC_HASITEMS(OTHER, 0x843b)) >= (1)) {
        INFO_ADDCHOICE(0x15eac, "(Give lurker claws)", 0x15ecc);
    };
    if ((NPC_HASITEMS(OTHER, 0x8a19)) >= (1)) {
        INFO_ADDCHOICE(0x15eac, "(Give sea lurker claws)", 0x15ecd);
    };
    if ((NPC_HASITEMS(OTHER, 0x843c)) >= (1)) {
        INFO_ADDCHOICE(0x15eac, "(Give common fangs)", 0x15ed1);
    };
    if ((NPC_HASITEMS(OTHER, 0x8a2c)) >= (1)) {
        INFO_ADDCHOICE(0x15eac, "(Give boar tusks)", 0x15ece);
    };
    if ((NPC_HASITEMS(OTHER, 0x844e)) >= (1)) {
        INFO_ADDCHOICE(0x15eac, "(Give troll fangs)", 0x15ed0);
    };
    if ((NPC_HASITEMS(OTHER, 0x844d)) >= (1)) {
        INFO_ADDCHOICE(0x15eac, "(Give swampshark teeth)", 0x15ecf);
    };
    if ((NPC_HASITEMS(OTHER, 0x8a18)) >= (1)) {
        INFO_ADDCHOICE(0x15eac, "(Give seashark teeth)", 0x97f);
    };
    ALL_STRING_TEETH = CS4(DIALOG_ALL, " (", I2S(MARKUSTEETH_COUNT), ")");
    INFO_ADDCHOICE(0x15eac, ALL_STRING_TEETH, 0x15ec4);
    INFO_ADDCHOICE(0x15eac, DIALOG_BACK, 0x15ec6);
}

var string DIA_MARKUS_SELLTROPHY_CHOICES.ALL_STRING_TEETH = "";
func void DIA_MARKUS_NOTHINGCOMMENT() {
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SellTrophy_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Markus_SellTrophy_03_04");
}

func void DIA_MARKUS_SELLTROPHY_EVERYTHING() {
    MAXCLAW = NPC_HASITEMS(HERO, 0x843a);
    MAXLURKERCLAW = NPC_HASITEMS(HERO, 0x843b);
    MAXSEALURKERCLAW = NPC_HASITEMS(HERO, 0x8a19);
    MAXTEETH = NPC_HASITEMS(HERO, 0x843c);
    MAXBOARTUSK = NPC_HASITEMS(HERO, 0x8a2c);
    MAXTROLLTOOTH = NPC_HASITEMS(HERO, 0x844e);
    MAXSHARKTEETH = NPC_HASITEMS(HERO, 0x844d);
    RESERVED_VAR_INT_28 = NPC_HASITEMS(HERO, 0x8a18);
    GOLDCLAW = ((MAXCLAW) * (VALUE_CLAW)) / (3);
    GOLDLURKERCLAW = ((MAXLURKERCLAW) * (VALUE_LURKERCLAW)) / (3);
    GOLDSEALURKERCLAW = ((MAXSEALURKERCLAW) * (VALUE_SEALURKERCLAW)) / (3);
    GOLDTEETH = ((MAXTEETH) * (VALUE_TEETH)) / (3);
    GOLDBOARTUSK = ((MAXBOARTUSK) * (VALUE_BOARTUSK)) / (3);
    GOLDTROLLTOOTH = ((MAXTROLLTOOTH) * (VALUE_TROLLTOOTH)) / (5);
    GOLDSHARKTEETH = ((MAXSHARKTEETH) * (VALUE_SHARKTEETH)) / (3);
    RESERVED_VAR_INT_29 = ((RESERVED_VAR_INT_28) * (VALUE_SEASHARKTEETH)) / (3);
    MARKUSTEETH_COUNT = (((((((MAXCLAW) + (MAXLURKERCLAW)) + (MAXSEALURKERCLAW)) + (MAXTEETH)) + (MAXBOARTUSK)) + (MAXTROLLTOOTH)) + (MAXSHARKTEETH)) + (RESERVED_VAR_INT_28);
    MARKUSTEETH_GOLD = ((((((((GOLDCLAW) + (GOLDLURKERCLAW)) + (GOLDSEALURKERCLAW)) + (GOLDTEETH)) + (GOLDBOARTUSK)) + (GOLDTROLLTOOTH)) + (GOLDSHARKTEETH)) + (MARKUSTEETH_GOLD)) + (RESERVED_VAR_INT_29);
    if ((MARKUSTEETH_COUNT) >= (1)) {
        MARKUS_TROPHYAMOUNT = (MARKUS_TROPHYAMOUNT) + (MARKUSTEETH_COUNT);
        if ((NPC_HASITEMS(OTHER, 0x843a)) >= (1)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x843a, MAXCLAW);
        };
        if ((NPC_HASITEMS(OTHER, 0x843b)) >= (1)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x843b, MAXLURKERCLAW);
        };
        if ((NPC_HASITEMS(OTHER, 0x8a19)) >= (1)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x8a19, MAXSEALURKERCLAW);
        };
        if ((NPC_HASITEMS(OTHER, 0x843c)) >= (1)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x843c, MAXTEETH);
        };
        if ((NPC_HASITEMS(OTHER, 0x8a2c)) >= (1)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x8a2c, MAXBOARTUSK);
        };
        if ((NPC_HASITEMS(OTHER, 0x844e)) >= (1)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x844e, MAXTROLLTOOTH);
        };
        if ((NPC_HASITEMS(OTHER, 0x844d)) >= (1)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x844d, MAXSHARKTEETH);
        };
        if ((NPC_HASITEMS(OTHER, 0x8a18)) >= (1)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x8a18, RESERVED_VAR_INT_28);
        };
        AI_WAIT(SELF, 0x3f000000);
        AI_FUNCTION(SELF, 0x15ec5);
        DIA_MARKUS_SELLTROPHY_CHOICES();
    };
    DIA_MARKUS_NOTHINGCOMMENT();
    DIA_MARKUS_SELLTROPHY_CHOICES();
}

func void MARKUS_SELLALLSTUFF() {
    B_GIVEINVITEMS(NONE_11037_MARKUS, HERO, 0x859b, MARKUSTEETH_GOLD);
}

func void DIA_MARKUS_SELLTROPHY_BACK() {
    MARKUSTEETH_GOLD = 0;
    if ((MARKUS_TROPHYAMOUNT) >= (10)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Markus_SellTrophy_03_02");
    };
    MARKUS_TROPHYAMOUNT = 0;
    INFO_CLEARCHOICES(0x15eac);
}

func void DIA_MARKUS_SELLTROPHY_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Markus_SellTrophy_15_01");
    DIA_MARKUS_SELLTROPHY_CHOICES();
}

func void DIA_MARKUS_SELLTROPHY_AMMOUNT() {
    INFO_CLEARCHOICES(0x15eac);
    MAX = NPC_HASITEMS(HERO, RESERVED_VAR_INT_30);
    ALL_STRING = CS4(DIALOG_ALL, " (", I2S(MAX), ")");
    INFO_ADDCHOICE(0x15eac, ALL_STRING, 0x15ed2);
    INFO_ADDCHOICE(0x15eac, CHOICE_NUMBER_25, 0x15ed4);
    INFO_ADDCHOICE(0x15eac, CHOICE_NUMBER_10, 0x15ed6);
    INFO_ADDCHOICE(0x15eac, CHOICE_NUMBER_5, 0x15ed8);
    INFO_ADDCHOICE(0x15eac, CHOICE_NUMBER_1, 0x15eda);
    INFO_ADDCHOICE(0x15eac, DIALOG_BACK, 0x15ec1);
}

var int DIA_MARKUS_SELLTROPHY_AMMOUNT.MAX = 0;
var string DIA_MARKUS_SELLTROPHY_AMMOUNT.ALL_STRING = "";
func void DIA_MARKUS_SELLTROPHY_CLAWS() {
    RESERVED_VAR_INT_30 = 0x843a;
    RESERVED_VAR_INT_31 = VALUE_CLAW;
    DIA_MARKUS_SELLTROPHY_AMMOUNT();
}

func void DIA_MARKUS_SELLTROPHY_CLAWSLURKER() {
    RESERVED_VAR_INT_30 = 0x843b;
    RESERVED_VAR_INT_31 = VALUE_LURKERCLAW;
    DIA_MARKUS_SELLTROPHY_AMMOUNT();
}

func void DIA_MARKUS_SELLTROPHY_CLAWSSEALURKER() {
    RESERVED_VAR_INT_30 = 0x8a19;
    RESERVED_VAR_INT_31 = VALUE_SEALURKERCLAW;
    DIA_MARKUS_SELLTROPHY_AMMOUNT();
}

func void DIA_MARKUS_SELLTROPHY_BOARTEETH() {
    RESERVED_VAR_INT_30 = 0x8a2c;
    RESERVED_VAR_INT_31 = VALUE_BOARTUSK;
    DIA_MARKUS_SELLTROPHY_AMMOUNT();
}

func void DIA_MARKUS_SELLTROPHY_SWAMPSHARKTEETH() {
    RESERVED_VAR_INT_30 = 0x844d;
    RESERVED_VAR_INT_31 = VALUE_SHARKTEETH;
    DIA_MARKUS_SELLTROPHY_AMMOUNT();
}

func void DIA_MARKUS_SELLTROPHY_TROLLTEETH() {
    RESERVED_VAR_INT_30 = 0x844e;
    RESERVED_VAR_INT_31 = VALUE_TROLLTOOTH;
    DIA_MARKUS_SELLTROPHY_AMMOUNT();
}

func void DIA_MARKUS_SELLTROPHY_TEETH() {
    RESERVED_VAR_INT_30 = 0x843c;
    RESERVED_VAR_INT_31 = VALUE_TEETH;
    DIA_MARKUS_SELLTROPHY_AMMOUNT();
}

func void DIA_MARKUS_SELLTROPHY_ALL() {
    if ((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) >= (1)) {
        MAX = NPC_HASITEMS(HERO, RESERVED_VAR_INT_30);
        if ((RESERVED_VAR_INT_30) == (0x844e)) {
            PRINTD("Troll");
            CREATEINVITEMS(SELF, 0x859b, ((MAX) * (RESERVED_VAR_INT_31)) / (5));
        } else {
            PRINTD("Reszta");
            CREATEINVITEMS(SELF, 0x859b, ((MAX) * (RESERVED_VAR_INT_31)) / (3));
            B_GIVEINVITEMS(SELF, OTHER, 0x859b, ((MAX) * (RESERVED_VAR_INT_31)) / (3));
        } else {
            MARKUS_TROPHYAMOUNT = (MARKUS_TROPHYAMOUNT) + (MAX);
        } else {
            DIA_MARKUS_SELLTROPHY_CHOICES();
        } else {
            /* set_instance(0) */;
        };
    };
    DIA_MARKUS_NOTHINGCOMMENT();
    DIA_MARKUS_SELLTROPHY_CHOICES();
}

var int DIA_MARKUS_SELLTROPHY_ALL.MAX = 0;
func void DIA_MARKUS_SELLTROPHY_25() {
    if ((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) >= (25)) {
        if ((RESERVED_VAR_INT_30) == (0x844e)) {
            PRINTD("Troll");
            CREATEINVITEMS(SELF, 0x859b, ((25) * (RESERVED_VAR_INT_31)) / (5));
        } else {
            PRINTD("Reszta");
            CREATEINVITEMS(SELF, 0x859b, ((25) * (RESERVED_VAR_INT_31)) / (3));
            B_GIVEINVITEMS(SELF, OTHER, 0x859b, ((25) * (RESERVED_VAR_INT_31)) / (3));
        } else {
            MARKUS_TROPHYAMOUNT = (MARKUS_TROPHYAMOUNT) + (25);
        } else {
            DIA_MARKUS_SELLTROPHY_AMMOUNT();
        } else {
            /* set_instance(0) */;
        };
    };
    if (((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) >= (1)) && ((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) < (25))) {
        MAX = NPC_HASITEMS(HERO, RESERVED_VAR_INT_30);
        if ((RESERVED_VAR_INT_30) == (0x844e)) {
            PRINTD("Troll");
            CREATEINVITEMS(SELF, 0x859b, ((MAX) * (RESERVED_VAR_INT_31)) / (5));
        } else {
            PRINTD("Reszta");
            CREATEINVITEMS(SELF, 0x859b, ((MAX) * (RESERVED_VAR_INT_31)) / (3));
            B_GIVEINVITEMS(SELF, OTHER, 0x859b, ((MAX) * (RESERVED_VAR_INT_31)) / (3));
        } else {
            MARKUS_TROPHYAMOUNT = (MARKUS_TROPHYAMOUNT) + (MAX);
        } else {
            DIA_MARKUS_SELLTROPHY_AMMOUNT();
        } else {
            /* set_instance(0) */;
        };
    };
    if ((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) == (0)) {
        DIA_MARKUS_NOTHINGCOMMENT();
        DIA_MARKUS_SELLTROPHY_CHOICES();
    };
}

var int DIA_MARKUS_SELLTROPHY_25.MAX = 0;
func void DIA_MARKUS_SELLTROPHY_10() {
    if ((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) >= (10)) {
        if ((RESERVED_VAR_INT_30) == (0x844e)) {
            PRINTD("Troll");
            CREATEINVITEMS(SELF, 0x859b, ((10) * (RESERVED_VAR_INT_31)) / (5));
        } else {
            PRINTD("Reszta");
            CREATEINVITEMS(SELF, 0x859b, ((10) * (RESERVED_VAR_INT_31)) / (3));
            B_GIVEINVITEMS(SELF, OTHER, 0x859b, ((10) * (RESERVED_VAR_INT_31)) / (3));
        } else {
            MARKUS_TROPHYAMOUNT = (MARKUS_TROPHYAMOUNT) + (10);
        } else {
            DIA_MARKUS_SELLTROPHY_AMMOUNT();
        } else {
            /* set_instance(0) */;
        };
    };
    if (((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) >= (1)) && ((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) < (10))) {
        MAX = NPC_HASITEMS(HERO, RESERVED_VAR_INT_30);
        if ((RESERVED_VAR_INT_30) == (0x844e)) {
            PRINTD("Troll");
            CREATEINVITEMS(SELF, 0x859b, ((MAX) * (RESERVED_VAR_INT_31)) / (5));
        } else {
            PRINTD("Reszta");
            CREATEINVITEMS(SELF, 0x859b, ((MAX) * (RESERVED_VAR_INT_31)) / (3));
            B_GIVEINVITEMS(SELF, OTHER, 0x859b, ((MAX) * (RESERVED_VAR_INT_31)) / (3));
        } else {
            MARKUS_TROPHYAMOUNT = (MARKUS_TROPHYAMOUNT) + (MAX);
        } else {
            DIA_MARKUS_SELLTROPHY_AMMOUNT();
        } else {
            /* set_instance(0) */;
        };
    };
    if ((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) == (0)) {
        DIA_MARKUS_NOTHINGCOMMENT();
        DIA_MARKUS_SELLTROPHY_CHOICES();
    };
}

var int DIA_MARKUS_SELLTROPHY_10.MAX = 0;
func void DIA_MARKUS_SELLTROPHY_5() {
    if ((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) >= (5)) {
        if ((RESERVED_VAR_INT_30) == (0x844e)) {
            PRINTD("Troll");
            CREATEINVITEMS(SELF, 0x859b, ((5) * (RESERVED_VAR_INT_31)) / (5));
        } else {
            PRINTD("Reszta");
            CREATEINVITEMS(SELF, 0x859b, ((5) * (RESERVED_VAR_INT_31)) / (3));
            B_GIVEINVITEMS(SELF, OTHER, 0x859b, ((5) * (RESERVED_VAR_INT_31)) / (3));
        } else {
            MARKUS_TROPHYAMOUNT = (MARKUS_TROPHYAMOUNT) + (5);
        } else {
            DIA_MARKUS_SELLTROPHY_AMMOUNT();
        } else {
            /* set_instance(0) */;
        };
    };
    if (((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) >= (1)) && ((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) < (5))) {
        MAX = NPC_HASITEMS(HERO, RESERVED_VAR_INT_30);
        if ((RESERVED_VAR_INT_30) == (0x844e)) {
            PRINTD("Troll");
            CREATEINVITEMS(SELF, 0x859b, ((MAX) * (RESERVED_VAR_INT_31)) / (5));
        } else {
            PRINTD("Reszta");
            CREATEINVITEMS(SELF, 0x859b, ((MAX) * (RESERVED_VAR_INT_31)) / (3));
            B_GIVEINVITEMS(SELF, OTHER, 0x859b, ((MAX) * (RESERVED_VAR_INT_31)) / (3));
        } else {
            MARKUS_TROPHYAMOUNT = (MARKUS_TROPHYAMOUNT) + (MAX);
        } else {
            DIA_MARKUS_SELLTROPHY_AMMOUNT();
        } else {
            /* set_instance(0) */;
        };
    };
    if ((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) == (0)) {
        DIA_MARKUS_NOTHINGCOMMENT();
        DIA_MARKUS_SELLTROPHY_CHOICES();
    };
}

var int DIA_MARKUS_SELLTROPHY_5.MAX = 0;
func void DIA_MARKUS_SELLTROPHY_1() {
    if ((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) >= (1)) {
        if ((RESERVED_VAR_INT_30) == (0x844e)) {
            PRINTD("Troll");
            CREATEINVITEMS(SELF, 0x859b, (RESERVED_VAR_INT_31) / (5));
        } else {
            PRINTD("Reszta");
            CREATEINVITEMS(SELF, 0x859b, (RESERVED_VAR_INT_31) / (3));
            B_GIVEINVITEMS(SELF, OTHER, 0x859b, (RESERVED_VAR_INT_31) / (3));
        } else {
            MARKUS_TROPHYAMOUNT = (MARKUS_TROPHYAMOUNT) + (1);
        } else {
            DIA_MARKUS_SELLTROPHY_AMMOUNT();
        } else {
            /* set_instance(0) */;
        };
    };
    if ((NPC_HASITEMS(OTHER, RESERVED_VAR_INT_30)) == (0)) {
        DIA_MARKUS_NOTHINGCOMMENT();
        DIA_MARKUS_SELLTROPHY_CHOICES();
    };
}

instance DIA_MARKUS_TRADE(C_INFO) {
    NPC = 0xe2c2;
    NR = 850;
    CONDITION = DIA_MARKUS_TRADE_CONDITION;
    INFORMATION = DIA_MARKUS_TRADE_INFO;
    PERMANENT = TRUE;
    TRADE = TRUE;
    DESCRIPTION = "Show me your wares.";
}

func int DIA_MARKUS_TRADE_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x15e51)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_TRADE_INFO() {
    B_SAY(OTHER, SELF, "$MARVIN_LetsTrade2");
    B_GIVETRADEINV(SELF);
    if ((MARKUS_TRADE_CHECKINFO) == (FALSE)) {
        MARKUS_TRADE_CHECKINFO = TRUE;
        LOG_CREATETOPIC(TOPIC_SILBACHTRADER, LOG_NOTE);
        AI_LOGENTRY(TOPIC_SILBACHTRADER, LOG_TRADER_MARKUS);
    };
}

var int DIA_MARKUS_TRADE_INFO.MARKUS_TRADE_CHECKINFO = 0;
instance DIA_MARKUS_PICKPOCKET(C_INFO) {
    NPC = 0xe2c2;
    NR = 900;
    CONDITION = DIA_MARKUS_PICKPOCKET_CONDITION;
    INFORMATION = DIA_MARKUS_PICKPOCKET_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = PICKPOCKET_80;
}

func int DIA_MARKUS_PICKPOCKET_CONDITION() {
    if (((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (1)) && ((SELF.AIVAR[6]) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MARKUS_PICKPOCKET_INFO() {
    INFO_CLEARCHOICES(0x15edf);
    INFO_ADDCHOICE(0x15edf, DIALOG_BACK, 0x15ee3);
    INFO_ADDCHOICE(0x15edf, DIALOG_PICKPOCKET, 0x15ee2);
}

func void DIA_MARKUS_PICKPOCKET_DOIT() {
    if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (2)) {
        CREATEINVITEMS(SELF, 0x8c8e, 1);
        B_GIVEINVITEMS(SELF, OTHER, 0x8c8e, 1);
        B_PICKPOCKET_AMBIENT_TIER_2();
        SELF.AIVAR[6] = TRUE;
        INFO_CLEARCHOICES(0x15edf);
    };
    AI_PLAYANI(HERO, T_CANNOTTAKE);
    PRINTSCREEN(PRINT_CANTPICKPOCKETTHISPERSON, -(1), -(1), FONT_SCREEN, 4);
    INFO_CLEARCHOICES(0x15edf);
}

func void DIA_MARKUS_PICKPOCKET_BACK() {
    INFO_CLEARCHOICES(0x15edf);
}

