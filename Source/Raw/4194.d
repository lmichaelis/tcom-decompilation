instance DIA_PIRATETRADER_EXIT(C_INFO) {
    NPC = 0xe612;
    NR = 999;
    CONDITION = DIA_PIRATETRADER_EXIT_CONDITION;
    INFORMATION = DIA_PIRATETRADER_EXIT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_ENDE;
}

func int DIA_PIRATETRADER_EXIT_CONDITION() {
    return TRUE;
}

func void DIA_PIRATETRADER_EXIT_INFO() {
    if ((PIRATETRADER_RUNECOMMENT) == (FALSE)) {
        if (((NPC_HASITEMS(OTHER, 0x94be)) >= (1)) || ((TELEPORT_SWAMPV2) == (TRUE))) {
            AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
            PIRATETRADER_RUNECOMMENT = TRUE;
            AI_OUTPUT(SELF, OTHER, "DIA_PirateTrader_Exit_03_01");
            AI_OUTPUT(SELF, OTHER, "DIA_PirateTrader_Exit_03_02");
            AI_RESETFACEANI(SELF);
            LOG_CREATETOPIC(TOPIC_TELEPORT, LOG_NOTE);
            AI_LOGENTRY(TOPIC_TELEPORT, LOG_TELEPORT_SWAMPV2);
        };
    };
    AI_STOPPROCESSINFOS(SELF);
    RUNESTRADE_CHECKBOUGHTRUNES();
}

var int DIA_PIRATETRADER_EXIT_INFO.PIRATETRADER_RUNECOMMENT = 0;
instance DIA_PIRATETRADER_STOPFORASEC(C_INFO) {
    NPC = 0xe612;
    NR = 1;
    CONDITION = DIA_PIRATETRADER_STOPFORASEC_CONDITION;
    INFORMATION = DIA_PIRATETRADER_STOPFORASEC_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_PIRATETRADER_STOPFORASEC_CONDITION() {
    if (((((LOG_GETSTATUS(MIS_Q306)) == (LOG_RUNNING)) && ((Q306_READY) == (TRUE))) && ((Q306_STATE) == (0))) || ((LOG_GETSTATUS(MIS_Q306)) == (LOG_SUCCESS))) {
        return FALSE;
    };
    return TRUE;
}

var int TRADE_PIRATETRADER_CHECKINFO = 0;
func void DIA_PIRATETRADER_STOPFORASEC_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_PirateTrader_StopForASec_03_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_PirateTrader_StopForASec_03_02");
    AI_RESETFACEANI(SELF);
    if ((TRADE_PIRATETRADER_CHECKINFO) == (FALSE)) {
        TRADE_PIRATETRADER_CHECKINFO = TRUE;
        LOG_CREATETOPIC(TOPIC_HAVENTRADER, LOG_NOTE);
        AI_LOGENTRY(TOPIC_HAVENTRADER, LOG_TRADER_PIRATETRADER);
    };
}

instance DIA_PIRATETRADER_TRADE(C_INFO) {
    NPC = 0xe612;
    NR = 1;
    CONDITION = DIA_PIRATETRADER_TRADE_CONDITION;
    INFORMATION = DIA_PIRATETRADER_TRADE_INFO;
    PERMANENT = TRUE;
    TRADE = TRUE;
    DESCRIPTION = "Show me your wares.";
}

func int DIA_PIRATETRADER_TRADE_CONDITION() {
    return TRUE;
}

func void DIA_PIRATETRADER_TRADE_INFO() {
    B_SAY(OTHER, SELF, "$MARVIN_LetsTrade2");
    B_GIVETRADEINV(SELF);
    if ((TRADE_PIRATETRADER_CHECKINFO) == (FALSE)) {
        TRADE_PIRATETRADER_CHECKINFO = TRUE;
        LOG_CREATETOPIC(TOPIC_HAVENTRADER, LOG_NOTE);
        AI_LOGENTRY(TOPIC_HAVENTRADER, LOG_TRADER_PIRATETRADER);
    };
}

instance DIA_PIRATETRADER_ARMOR(C_INFO) {
    NPC = 0xe612;
    NR = 2;
    CONDITION = DIA_PIRATETRADER_ARMOR_CONDITION;
    INFORMATION = DIA_PIRATETRADER_ARMOR_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_BUYARMOR;
}

func int DIA_PIRATETRADER_ARMOR_CONDITION() {
    return TRUE;
}

func void DIA_PIRATETRADER_ARMOR_INFO() {
    INFO_CLEARCHOICES(0x14c45);
    if (((LOG_GETSTATUS(MIS_Q306)) == (LOG_SUCCESS)) || (NPC_KNOWSINFO(OTHER, 0x14c4f))) {
        INFO_ADDCHOICE(0x14c45, TXT_ARMORTRADE_31, 0x14c4b);
    };
    if ((KAPITEL) >= (4)) {
        INFO_ADDCHOICE(0x14c45, TXT_ARMORTRADE_30, 0x14c4a);
    };
    INFO_ADDCHOICE(0x14c45, TXT_ARMORTRADE_29, 0x14c49);
    INFO_ADDCHOICE(0x14c45, DIALOG_BACK, 0x14c48);
}

func void DIA_PIRATETRADER_ARMOR_BACK() {
    INFO_CLEARCHOICES(0x14c45);
}

func void DIA_PIRATETRADER_ARMOR_ITAR_STH_L() {
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_STH_L)) {
        NPC_REMOVEINVITEMS(SELF, 0x859b, VALUE_ITAR_STH_L);
        CREATEINVITEMS(SELF, 0x8a66, 1);
        B_GIVEINVITEMS(SELF, OTHER, 0x8a66, 1);
        AI_EQUIPARMOR(OTHER, 0x8a66);
        B_GIVEINVITEMS(OTHER, SELF, 0x859b, VALUE_ITAR_STH_L);
        DIA_PIRATETRADER_ARMOR_INFO();
    };
    B_SAY(SELF, OTHER, "$NOGOLD");
    DIA_PIRATETRADER_ARMOR_INFO();
}

func void DIA_PIRATETRADER_ARMOR_ITAR_STH_H() {
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_STH_H)) {
        NPC_REMOVEINVITEMS(SELF, 0x859b, VALUE_ITAR_STH_H);
        CREATEINVITEMS(SELF, 0x8a6b, 1);
        B_GIVEINVITEMS(SELF, OTHER, 0x8a6b, 1);
        AI_EQUIPARMOR(OTHER, 0x8a6b);
        B_GIVEINVITEMS(OTHER, SELF, 0x859b, VALUE_ITAR_STH_H);
        DIA_PIRATETRADER_ARMOR_INFO();
    };
    B_SAY(SELF, OTHER, "$NOGOLD");
    DIA_PIRATETRADER_ARMOR_INFO();
}

func void DIA_PIRATETRADER_ARMOR_ITAR_CRAB() {
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_CRAB)) {
        NPC_REMOVEINVITEMS(SELF, 0x859b, VALUE_ITAR_CRAB);
        CREATEINVITEMS(SELF, 0x8a4f, 1);
        B_GIVEINVITEMS(SELF, OTHER, 0x8a4f, 1);
        AI_EQUIPARMOR(OTHER, 0x8a4f);
        B_GIVEINVITEMS(OTHER, SELF, 0x859b, VALUE_ITAR_CRAB);
        DIA_PIRATETRADER_ARMOR_INFO();
    };
    B_SAY(SELF, OTHER, "$NOGOLD");
    DIA_PIRATETRADER_ARMOR_INFO();
}

instance DIA_PIRATETRADER_WHERE(C_INFO) {
    NPC = 0xe612;
    NR = 1;
    CONDITION = DIA_PIRATETRADER_WHERE_CONDITION;
    INFORMATION = DIA_PIRATETRADER_WHERE_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Where do you get these items?";
}

func int DIA_PIRATETRADER_WHERE_CONDITION() {
    return TRUE;
}

func void DIA_PIRATETRADER_WHERE_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_PirateTrader_Where_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_PirateTrader_Where_03_02");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
}

instance DIA_PIRATETRADER_TOURNAMENT(C_INFO) {
    NPC = 0xe612;
    NR = 1;
    CONDITION = DIA_PIRATETRADER_TOURNAMENT_CONDITION;
    INFORMATION = DIA_PIRATETRADER_TOURNAMENT_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_PIRATETRADER_TOURNAMENT_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q306)) == (LOG_RUNNING)) && ((Q306_READY) == (TRUE))) && ((Q306_STATE) == (0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_PIRATETRADER_TOURNAMENT_INFO() {
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_PirateTrader_Tournament_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_PirateTrader_Tournament_03_02");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_PirateTrader_Tournament_03_03");
    AI_RESETFACEANI(SELF);
}

