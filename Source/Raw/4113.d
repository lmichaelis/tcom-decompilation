var int EINAR_TEACHHEROSMITH = 0;
instance DIA_EINAR_EXIT(C_INFO) {
    NPC = 0xe390;
    NR = 999;
    CONDITION = DIA_EINAR_EXIT_CONDITION;
    INFORMATION = DIA_EINAR_EXIT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_ENDE;
}

func int DIA_EINAR_EXIT_CONDITION() {
    return TRUE;
}

func void DIA_EINAR_EXIT_INFO() {
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_EINAR_HELLO(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_HELLO_CONDITION;
    INFORMATION = DIA_EINAR_HELLO_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Hi! Are you a blacksmith?";
}

func int DIA_EINAR_HELLO_CONDITION() {
    return TRUE;
}

func void DIA_EINAR_HELLO_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_HELLO_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_HELLO_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_HELLO_03_03");
}

instance DIA_EINAR_JOB(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_JOB_CONDITION;
    INFORMATION = DIA_EINAR_JOB_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "How did you get a job like that?";
}

func int DIA_EINAR_JOB_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x13e4d)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_JOB_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_JOB_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_JOB_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_JOB_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_JOB_03_04");
}

instance DIA_EINAR_TRADEOPTION(C_INFO) {
    NPC = 0xe390;
    NR = 50;
    CONDITION = DIA_EINAR_TRADEOPTION_CONDITION;
    INFORMATION = DIA_EINAR_TRADEOPTION_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Do you have anything for sale?";
}

func int DIA_EINAR_TRADEOPTION_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x13e4d)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_TRADEOPTION_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_TRADEOPTION_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_TRADEOPTION_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_TRADEOPTION_03_03");
    LOG_CREATETOPIC(TOPIC_WOLFSDENTRADER, LOG_NOTE);
    AI_LOGENTRY(TOPIC_WOLFSDENTRADER, LOG_TRADER_EINAR);
}

var int EINAR_TEACHHEROSTR = 0;
instance DIA_EINAR_TEACHSMITH(C_INFO) {
    NPC = 0xe390;
    NR = 49;
    CONDITION = DIA_EINAR_TEACHSMITH_CONDITION;
    INFORMATION = DIA_EINAR_TEACHSMITH_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Can you teach me how to forge weapons?";
}

func int DIA_EINAR_TEACHSMITH_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x13e4d)) && ((EINAR_TEACHHEROSMITH) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_TEACHSMITH_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_TEACHSMITH_15_01");
    if ((LOG_GETSTATUS(MIS_SQ419)) != (LOG_SUCCESS)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Einar_TEACHSMITH_03_02");
    };
    if ((LOG_GETSTATUS(MIS_SQ419)) == (LOG_SUCCESS)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Einar_TEACHSMITH_03_03");
        AI_OUTPUT(OTHER, SELF, "DIA_Einar_TEACHSMITH_15_04");
        AI_OUTPUT(SELF, OTHER, "DIA_Einar_TEACHSMITH_03_05");
        AI_OUTPUT(SELF, OTHER, "DIA_Einar_TEACHSMITH_03_06");
        EINAR_TEACHHEROSMITH = TRUE;
        EINAR_TEACHHEROSTR = TRUE;
        LOG_CREATETOPIC(TOPIC_WOLFSDENTEACHER, LOG_NOTE);
        AI_LOGENTRY(TOPIC_WOLFSDENTEACHER, LOG_WOLFSDENTEACHER_EINAR);
    };
}

var int EINAR_CURRENTSTRLEVEL = 0;
var int EINAR_NOMORE = 0;
var string EINAR_PRINTS = "";
instance DIA_EINAR_TRAIN(C_INFO) {
    NPC = 0xe390;
    NR = 7;
    CONDITION = DIA_EINAR_TRAIN_CONDITION;
    INFORMATION = DIA_EINAR_TRAIN_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Show me how to become stronger.";
}

func int DIA_EINAR_TRAIN_CONDITION() {
    if (((EINAR_TEACHHEROSTR) == (TRUE)) && ((EINAR_NOMORE) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_TRAIN_CHOICES() {
    EINAR_GOLDCOST = 25;
    EINAR_CURRENTSTRLEVEL = OTHER.AIVAR[81];
    INFO_CLEARCHOICES(0x13e5d);
    INFO_ADDCHOICE(0x13e5d, DIALOG_BACK, 0x13e62);
    INFO_ADDCHOICE(0x13e5d, B_BUILDLEARNSTRING2(PRINT_LEARNSTR1, B_GETLEARNCOSTATTRIBUTE(OTHER, ATR_STRENGTH, 1), EINAR_GOLDCOST), 0x13e63);
    INFO_ADDCHOICE(0x13e5d, B_BUILDLEARNSTRING2(PRINT_LEARNSTR5, B_GETLEARNCOSTATTRIBUTE(OTHER, ATR_STRENGTH, 5), (EINAR_GOLDCOST) * (5)), 0x13e64);
}

var int DIA_EINAR_TRAIN_CHOICES.EINAR_GOLDCOST = 0;
func void DIA_EINAR_TRAIN_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Train_15_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Train_03_01");
    DIA_EINAR_TRAIN_CHOICES();
}

func void DIA_EINAR_TRAIN_BACK() {
    if (((OTHER.AIVAR[81]) < (120)) && ((OTHER.AIVAR[81]) >= (60))) {
        AI_OUTPUT(SELF, OTHER, "DIA_Einar_Train_Back_03_00");
    };
    if ((OTHER.AIVAR[81]) >= (120)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Einar_Train_Back_03_01");
        AI_OUTPUT(SELF, OTHER, "DIA_Einar_Train_Back_03_02");
        EINAR_NOMORE = TRUE;
    };
    INFO_CLEARCHOICES(0x13e5d);
}

func void DIA_EINAR_TRAINSTR_1() {
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (EINAR_PAYMENT1)) {
        if ((EINAR_CURRENTSTRLEVEL) < (OTHER.AIVAR[81])) {
            SND_PLAY(GELDBEUTEL);
            B_GIVEINVITEMS(OTHER, SELF, 0x859b, EINAR_PAYMENT1);
            NPC_REMOVEINVITEMS(SELF, 0x859b, EINAR_PAYMENT1);
        };
        B_TEACHATTRIBUTEPOINTS(SELF, OTHER, ATR_STRENGTH, 1, 120);
        DIA_EINAR_TRAIN_CHOICES();
    };
    if ((NPC_HASITEMS(OTHER, 0x859b)) < (EINAR_PAYMENT1)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Einar_Train_STR1_13_00");
        EINAR_PRINTS = CONCATSTRINGS(PRINT_RGOLD, INTTOSTRING(EINAR_PAYMENT1));
        PRINTSCREEN(EINAR_PRINTS, -(1), -(1), FONT_SCREEN, 2);
        DIA_EINAR_TRAIN_CHOICES();
    };
}

func void DIA_EINAR_TRAINSTR_5() {
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (EINAR_PAYMENT5)) {
        if ((EINAR_CURRENTSTRLEVEL) < (OTHER.AIVAR[81])) {
            SND_PLAY(GELDBEUTEL);
            B_GIVEINVITEMS(OTHER, SELF, 0x859b, EINAR_PAYMENT5);
            NPC_REMOVEINVITEMS(SELF, 0x859b, EINAR_PAYMENT5);
        };
        B_TEACHATTRIBUTEPOINTS(SELF, OTHER, ATR_STRENGTH, 5, 120);
        DIA_EINAR_TRAIN_CHOICES();
    };
    if ((NPC_HASITEMS(OTHER, 0x859b)) < (EINAR_PAYMENT5)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Einar_Train_STR5_13_00");
        EINAR_PRINTS = CONCATSTRINGS(PRINT_RGOLD, INTTOSTRING(EINAR_PAYMENT5));
        PRINTSCREEN(EINAR_PRINTS, -(1), -(1), FONT_SCREEN, 2);
        DIA_EINAR_TRAIN_CHOICES();
    };
}

instance DIA_EINAR_PARTNERS(C_INFO) {
    NPC = 0xe390;
    NR = 25;
    CONDITION = DIA_EINAR_PARTNERS_CONDITION;
    INFORMATION = DIA_EINAR_PARTNERS_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Why don't we work together?";
}

func int DIA_EINAR_PARTNERS_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x13e57)) && ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_SMITH)) > (0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_PARTNERS_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Partners_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Partners_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Partners_03_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Partners_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Partners_03_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Partners_03_06");
}

instance DIA_EINAR_TRADE(C_INFO) {
    NPC = 0xe390;
    NR = 950;
    CONDITION = DIA_EINAR_TRADE_CONDITION;
    INFORMATION = DIA_EINAR_TRADE_INFO;
    PERMANENT = TRUE;
    TRADE = TRUE;
    DESCRIPTION = "Show me your wares.";
}

func int DIA_EINAR_TRADE_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x13e53)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_TRADE_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_TRADE_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_TRADE_03_02");
    B_GIVETRADEINV(SELF);
}

instance DIA_EINAR_AMBIENT(C_INFO) {
    NPC = 0xe390;
    NR = 998;
    CONDITION = DIA_EINAR_AMBIENT_CONDITION;
    INFORMATION = DIA_EINAR_AMBIENT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "How are you doing?";
}

func int DIA_EINAR_AMBIENT_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x13e4d)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_AMBIENT_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_AMBIENT_15_01");
    if ((Q404_MARVINFINISHEDMINE) < (1)) {
        NPC_INITAMBIENTS(SELF, 3);
        if ((NPC_GETLASTAMBIENT(SELF)) == (1)) {
            AI_OUTPUT(SELF, OTHER, "DIA_Einar_AMBIENT_03_02");
        } else if ((NPC_GETLASTAMBIENT(SELF)) == (2)) {
            AI_OUTPUT(SELF, OTHER, "DIA_Einar_AMBIENT_03_03");
        } else if ((NPC_GETLASTAMBIENT(SELF)) == (3)) {
            AI_OUTPUT(SELF, OTHER, "DIA_Einar_AMBIENT_03_04");
        };
    };
    if (((Q404_MARVINFINISHEDMINE) >= (1)) && ((KAPITEL) != (5))) {
        AI_OUTPUT(SELF, OTHER, "DIA_Einar_AMBIENT_03_05");
    };
    if (((Q404_MARVINFINISHEDMINE) >= (1)) && ((KAPITEL) == (5))) {
        AI_OUTPUT(SELF, OTHER, "DIA_Einar_AMBIENT_03_06");
    };
}

instance DIA_EINAR_BOLT(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_BOLT_CONDITION;
    INFORMATION = DIA_EINAR_BOLT_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Do you recognize this bolt?";
}

func int DIA_EINAR_BOLT_CONDITION() {
    if (((NPC_KNOWSINFO(OTHER, 0x13e4d)) && ((NPC_HASITEMS(OTHER, 0x91ad)) >= (1))) && ((LOG_GETSTATUS(MIS_Q402)) == (LOG_RUNNING))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_BOLT_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Bolt_15_01");
    AI_STOPLOOKAT(SELF);
    if ((NPC_HASITEMS(SELF, 0x8ce3)) == (0)) {
        AI_STOPLOOKAT(SELF);
        CREATEINVITEM(SELF, 0x8ce3);
        AI_USEITEMTOSTATE(SELF, 0x8ce3, 1);
        AI_WAIT(SELF, 0x40400000);
        AI_USEITEMTOSTATE(SELF, 0x8ce3, -(1));
        AI_LOOKATNPC(SELF, OTHER);
    };
    AI_LOOKATNPC(SELF, OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Bolt_15_03");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_03_04");
    INFO_CLEARCHOICES(0x13e6e);
    INFO_ADDCHOICE(0x13e6e, "I think I will ask the questions here.", 0x13e72);
    INFO_ADDCHOICE(0x13e6e, "Why are you interested in this?", 0x13e73);
    INFO_ADDCHOICE(0x13e6e, "No, I got it legally.", 0x13e74);
}

func void DIA_EINAR_BOLT_LEGAL_NEXT() {
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Bolt_Next_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_Next_03_02");
    INFO_CLEARCHOICES(0x13e6e);
    INFO_ADDCHOICE(0x13e6e, "Do the Wolf Sons visit the city?", 0x13e75);
    INFO_ADDCHOICE(0x13e6e, "This bolt looks very unusual.", 0x13e76);
    INFO_ADDCHOICE(0x13e6e, "Can you tell when you made it?", 0x13e77);
}

func void DIA_EINAR_BOLT_CHAD() {
    AI_STARTFACEANI(OTHER, "S_SEROIUS", 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Bolt_Chad_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_Chad_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_Chad_03_03");
    AI_RESETFACEANI(OTHER);
}

func void DIA_EINAR_BOLT_WHY() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Bolt_Why_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_Why_03_02");
}

func void DIA_EINAR_BOLT_LEGAL() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Bolt_Legal_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_Legal_03_02");
    DIA_EINAR_BOLT_LEGAL_NEXT();
}

func void DIA_EINAR_BOLT_LEGAL_NEXT_CITY() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Bolt_City_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_City_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_City_03_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Bolt_City_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_City_03_05");
}

func void DIA_EINAR_BOLT_LEGAL_NEXT_STRANGE() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Bolt_Strange_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_Strange_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_Strange_03_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_Strange_03_07");
}

func void DIA_EINAR_BOLT_LEGAL_NEXT_CANYOU() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Bolt_CanYou_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_CanYou_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Bolt_CanYou_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Bolt_CanYou_03_04");
}

instance DIA_EINAR_WHO(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_WHO_CONDITION;
    INFORMATION = DIA_EINAR_WHO_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Who's gotten this kind of bolts from you lately?";
}

func int DIA_EINAR_WHO_CONDITION() {
    if (((NPC_KNOWSINFO(OTHER, 0x13e6e)) && ((NPC_HASITEMS(OTHER, 0x91ad)) >= (1))) && ((LOG_GETSTATUS(MIS_Q402)) == (LOG_RUNNING))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_WHO_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Who_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Who_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Who_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Who_03_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Who_15_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Who_03_06");
    AI_LOGENTRY(TOPIC_Q402, LOG_Q402_EINARINFO);
    INFO_CLEARCHOICES(0x13e78);
    INFO_ADDCHOICE(0x13e78, "Where can I find Arethe?", 0x13e7b);
    INFO_ADDCHOICE(0x13e78, "Where's Gron?", 0x13e7c);
    INFO_ADDCHOICE(0x13e78, "Henk and Legrif are some kind of friends?", 0x13e7d);
    INFO_ADDCHOICE(0x13e78, "Thanks for telling me so much.", 0x13e7e);
}

func void DIA_EINAR_WHO_ARETHE() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Who_Arethe_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Who_Arethe_03_02");
    AI_LOGENTRY(TOPIC_Q402, LOG_Q402_EINARARETHEINFO);
}

func void DIA_EINAR_WHO_GRON() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Who_Gron_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Who_Gron_03_02");
    AI_LOGENTRY(TOPIC_Q402, LOG_Q402_EINARGRONINFO);
}

func void DIA_EINAR_WHO_VAHRAL() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Who_Vahral_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Who_Vahral_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Who_Vahral_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Who_Vahral_03_04");
    AI_LOGENTRY(TOPIC_Q402, LOG_Q402_EINARVAHRALINFO);
}

func void DIA_EINAR_WHO_THANKS() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Who_Thanks_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Who_Thanks_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Who_Thanks_15_03");
    INFO_CLEARCHOICES(0x13e78);
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_EINAR_KQ403_SWORDS(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_KQ403_SWORDS_CONDITION;
    INFORMATION = DIA_EINAR_KQ403_SWORDS_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I have a request.";
}

func int DIA_EINAR_KQ403_SWORDS_CONDITION() {
    if (((LOG_GETSTATUS(MIS_KQ403)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x112e9))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_KQ403_SWORDS_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_KQ403_Swords_15_01");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_KQ403_Swords_03_02");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_KQ403_Swords_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_KQ403_Swords_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_KQ403_Swords_03_05");
    INFO_CLEARCHOICES(0x13e7f);
    INFO_ADDCHOICE(0x13e7f, "I worked with Ulryk.", 0x13e82);
}

func void DIA_EINAR_KQ403_SWORDS_ULRYK() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_KQ403_Swords_Ulryk_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_KQ403_Swords_Ulryk_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_KQ403_Swords_Ulryk_15_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_KQ403_Swords_Ulryk_15_04");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_KQ403_Swords_Ulryk_03_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_KQ403_Swords_Ulryk_03_06");
    INFO_CLEARCHOICES(0x13e7f);
    INFO_ADDCHOICE(0x13e7f, "Even better.", 0x13e85);
}

var int KQ403_EINAR_GOLD = 0;
func void DIA_EINAR_KQ403_SWORDS_GOLD() {
    B_GIVEINVITEMS(OTHER, SELF, 0x859b, KQ403_EINAR_SWORD);
    CREATEINVITEMS(SELF, 0x9a70, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x9a70, 1);
    KQ403_EINAR_GOLD = 0;
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_KQ403_Swords_Yes_15_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_KQ403_Swords_Yes_03_08");
    AI_LOGENTRY(TOPIC_KQ403, LOG_KQ403_SWORDS);
}

func void DIA_EINAR_KQ403_SWORDS_ULRYK_YES() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_KQ403_Swords_Yes_15_01");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_KQ403_Swords_Yes_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_KQ403_Swords_Yes_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_KQ403_Swords_Yes_03_04");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_KQ403_Swords_Yes_15_05");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_KQ403_Swords_Yes_03_06");
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_KQ403_Swords_Yes_15_09");
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (KQ403_EINAR_SWORD)) {
        DIA_EINAR_KQ403_SWORDS_GOLD();
    };
    KQ403_EINAR_GOLD = 1;
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_KQ403_Swords_Yes_03_10");
}

instance DIA_EINAR_KQ403_YOURGOLD(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_KQ403_YOURGOLD_CONDITION;
    INFORMATION = DIA_EINAR_KQ403_YOURGOLD_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I will pay. (100 GP)";
}

func int DIA_EINAR_KQ403_YOURGOLD_CONDITION() {
    if (((((LOG_GETSTATUS(MIS_KQ403)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x13e7f))) && ((NPC_HASITEMS(OTHER, 0x859b)) >= (KQ403_EINAR_SWORD))) && ((KQ403_EINAR_GOLD) == (1))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_KQ403_YOURGOLD_INFO() {
    DIA_EINAR_KQ403_SWORDS_GOLD();
}

instance DIA_EINAR_SQ419_WOOD(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_SQ419_WOOD_CONDITION;
    INFORMATION = DIA_EINAR_SQ419_WOOD_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Apparently you ordered a delivery of wood.";
}

func int DIA_EINAR_SQ419_WOOD_CONDITION() {
    if ((LOG_GETSTATUS(MIS_SQ419)) == (LOG_RUNNING)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_SQ419_WOOD_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_SQ419_Wood_15_01");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_Wood_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_Wood_03_03");
    AI_RESETFACEANI(SELF);
}

instance DIA_EINAR_SQ419_CREDNAR(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_SQ419_CREDNAR_CONDITION;
    INFORMATION = DIA_EINAR_SQ419_CREDNAR_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Crednar won't let the woodcutters inside.";
}

func int DIA_EINAR_SQ419_CREDNAR_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ419)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x13e89))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_SQ419_CREDNAR_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_SQ419_Crednar_15_01");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_Crednar_03_02");
    B_STANDUP();
    B_USEFAKESCROLL();
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_Crednar_03_03");
    AI_RESETFACEANI(SELF);
    AI_LOGENTRY(TOPIC_SQ419, LOG_SQ419_EINAR_MAD);
    CREATEINVITEMS(SELF, 0x9223, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x9223, 1);
}

instance DIA_EINAR_SQ419_GOTWOOD(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_SQ419_GOTWOOD_CONDITION;
    INFORMATION = DIA_EINAR_SQ419_GOTWOOD_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_EINAR_SQ419_GOTWOOD_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_SQ419)) == (LOG_RUNNING)) && (NPC_ISINSTATE(SELF, 0xf09f))) && (NPC_KNOWSINFO(OTHER, 0x14265))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_SQ419_GOTWOOD_INFO() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_GotWood_03_01");
    CREATEINVITEMS(SELF, 0x859b, SQ419_EINARTHANKSGOLD);
    B_GIVEINVITEMS(SELF, OTHER, 0x859b, SQ419_EINARTHANKSGOLD);
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_GotWood_03_02");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_GotWood_03_03");
    INFO_CLEARCHOICES(0x13e8f);
    INFO_ADDCHOICE(0x13e8f, "I don't have time right now...", 0x13e94);
    INFO_ADDCHOICE(0x13e8f, "Sounds like a reasonable deal.", 0x13e93);
}

var int EINAR_SQ419_WANTTOHELP = 0;
func void DIA_EINAR_SQ419_GOTWOOD_YES() {
    EINAR_SQ419_WANTTOHELP = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_SQ419_GotWood_Yes_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    if ((LOG_GETSTATUS(MIS_Q404)) == (LOG_SUCCESS)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_GotWood_Yes_03_03");
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_GotWood_Yes_03_02");
    AI_LOGENTRY(TOPIC_SQ419, LOG_SQ419_EINAR_HELP);
    INFO_CLEARCHOICES(0x13e8f);
    AI_STOPPROCESSINFOS(SELF);
    SELF.AIVAR[15] = TRUE;
    NPC_EXCHANGEROUTINE(SELF, "SQ419_GUIDE_ARMORY");
    AI_RESETFACEANI(SELF);
}

func void DIA_EINAR_SQ419_GOTWOOD_NO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_SQ419_GotWood_No_15_01");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_GotWood_No_03_02");
    AI_LOGENTRY(TOPIC_SQ419, LOG_SQ419_FINISH_V1);
    LOG_SETSTATUS(_@(MIS_SQ419), TOPIC_SQ419, LOG_SUCCESS);
    B_GIVEPLAYERXP((XP_SQ419_FINISH) / (3));
    INFO_CLEARCHOICES(0x13e8f);
    AI_RESETFACEANI(SELF);
}

instance DIA_EINAR_SQ419_STARTWOOD(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_SQ419_STARTWOOD_CONDITION;
    INFORMATION = DIA_EINAR_SQ419_STARTWOOD_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_EINAR_SQ419_STARTWOOD_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_SQ419)) == (LOG_RUNNING)) && ((EINAR_SQ419_WANTTOHELP) == (TRUE))) && ((NPC_GETDISTTOWP(SELF, "WOLFSDEN_CITADEL_ARMORY_14")) <= (400))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_SQ419_STARTWOOD_INFO() {
    SQ419_WOODCUTTING = 1;
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_StartWood_03_01");
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "SQ419_FORGE");
    if ((NPC_KNOWSINFO(OTHER, 0x15cb1)) && ((KNUT_REGULARWORK_COUNT) >= (1))) {
        AI_LOGENTRY(TOPIC_SQ419, LOG_SQ419_EINAR_WOODKNUTUWE);
    };
    if ((NPC_KNOWSINFO(OTHER, 0x15cb1)) && ((KNUT_REGULARWORK_COUNT) < (1))) {
        AI_LOGENTRY(TOPIC_SQ419, LOG_SQ419_EINAR_WOODUWE);
    };
    if ((!(NPC_KNOWSINFO(OTHER, 0x15cb1))) && ((KNUT_REGULARWORK_COUNT) >= (1))) {
        AI_LOGENTRY(TOPIC_SQ419, LOG_SQ419_EINAR_WOODKNUT);
    };
    AI_LOGENTRY(TOPIC_SQ419, LOG_SQ419_EINAR_WOOD);
}

instance DIA_EINAR_SQ419_HISTORY(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_SQ419_HISTORY_CONDITION;
    INFORMATION = DIA_EINAR_SQ419_HISTORY_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_EINAR_SQ419_HISTORY_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ419)) == (LOG_RUNNING)) && ((SQ419_WOODCUTTING) == (3))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_SQ419_HISTORY_INFO() {
    FF_APPLYONCEEXTGT(0xf9c9, 0, -(1));
    INFO_CLEARCHOICES(0x13e98);
    INFO_ADDCHOICE(0x13e98, "Let's get to work. In silence.", 0x13e9c);
    INFO_ADDCHOICE(0x13e98, "I would love to hear stories about your nation.", 0x13e9d);
}

func void DIA_EINAR_SQ419_HISTORY_NEXT() {
    SQ419_SMITHINGTIME = TRUE;
    SQ419_COOLTIME = TRUE;
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_History_Next_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_History_Next_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_History_Next_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_History_Next_03_04");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    INFO_CLEARCHOICES(0x13e98);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, START);
    AI_LOGENTRY(TOPIC_SQ419, LOG_SQ419_EINAR_FINISHWOOD);
    AI_FUNCTION(SELF, 0xf9bb);
    CREATEINVITEMS(SELF, 0x8586, 4);
    B_GIVEINVITEMS(SELF, OTHER, 0x8586, 4);
}

func void DIA_EINAR_SQ419_HISTORY_WORK() {
    SQ419_SKIPEINARHISTORYLESSON = TRUE;
    WLD_SENDTRIGGER("SQ419_WOOD_06");
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_SQ419_History_Work_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_History_Work_03_02");
    DIA_EINAR_SQ419_HISTORY_NEXT();
}

func void DIA_EINAR_SQ419_HISTORY_SURE() {
    WLD_SENDTRIGGER("SQ419_WOOD_06");
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_SQ419_History_Sure_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_History_Sure_03_02");
    DIA_EINAR_SQ419_HISTORY_NEXT();
}

instance DIA_EINAR_SQ419_AFTERSMITHING(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_SQ419_AFTERSMITHING_CONDITION;
    INFORMATION = DIA_EINAR_SQ419_AFTERSMITHING_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_EINAR_SQ419_AFTERSMITHING_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_SQ419)) == (LOG_RUNNING)) && ((NPC_HASITEMS(OTHER, 0x9227)) >= (4))) && ((NPC_GETDISTTONPC(SELF, OTHER)) <= (400))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_SQ419_AFTERSMITHING_INFO() {
    NPC_REMOVEINVITEMS(SELF, 0x9227, 4);
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    B_GIVEINVITEMS(OTHER, SELF, 0x9227, 4);
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_AFTERSMITHING_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_AFTERSMITHING_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_AFTERSMITHING_03_03");
    AI_RESETFACEANI(SELF);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "SQ419_GUIDE_LEATHER");
    AI_LOGENTRY(TOPIC_SQ419, LOG_SQ419_EINER_AFTERSMITHING);
}

instance DIA_EINAR_SQ419_NEXTTASK(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_SQ419_NEXTTASK_CONDITION;
    INFORMATION = DIA_EINAR_SQ419_NEXTTASK_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_EINAR_SQ419_NEXTTASK_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_SQ419)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x13e9e))) && ((NPC_GETDISTTOWP(SELF, "WOLFSDEN_CITADEL_ARMORY_10")) <= (400))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_SQ419_NEXTTASK_INFO() {
    SQ419_TANNING = 1;
    MOB_CHANGEFOCUSNAME("SQ419_SPECIAL_TANNING", "MOBNAME_SQ419_TANNING");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_NextTask_03_01");
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "SQ419_WORKTABLE");
    AI_LOGENTRY(TOPIC_SQ419, LOG_SQ419_EINAR_NEXTTASK);
}

instance DIA_EINAR_SQ419_TANNINGDONE(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_SQ419_TANNINGDONE_CONDITION;
    INFORMATION = DIA_EINAR_SQ419_TANNINGDONE_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_EINAR_SQ419_TANNINGDONE_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ419)) == (LOG_RUNNING)) && ((SQ419_TANNING) == (3))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_SQ419_TANNINGDONE_INFO() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_TanningDone_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_TanningDone_03_02");
    CREATEINVITEMS(SELF, 0x902a, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x902a, 1);
    INFO_CLEARCHOICES(0x13ea4);
    INFO_ADDCHOICE(0x13ea4, "What are we actually creating here?", 0x13ea7);
}

func void DIA_EINAR_SQ419_TANNINGDONE_WHAT() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_SQ419_TanningDone_What_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_TanningDone_What_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_TanningDone_What_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_TanningDone_What_03_04");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    INFO_CLEARCHOICES(0x13ea4);
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_SQ419, LOG_SQ419_EINAR_AFTERTANNING);
    AI_FUNCTION(SELF, 0xf9bf);
}

instance DIA_EINAR_SQ419_FINISH(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_SQ419_FINISH_CONDITION;
    INFORMATION = DIA_EINAR_SQ419_FINISH_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I have casting mold.";
}

func int DIA_EINAR_SQ419_FINISH_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ419)) == (LOG_RUNNING)) && ((NPC_HASITEMS(OTHER, 0x9228)) >= (1))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_SQ419_FINISH_INFO() {
    SELF.AIVAR[15] = FALSE;
    NPC_REMOVEINVITEMS(HERO, 0x9228, 1);
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_SQ419_Finish_15_01");
    B_GIVEINVITEMS(OTHER, SELF, 0x9228, 1);
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_SQ419_Finish_03_02");
    AI_RESETFACEANI(SELF);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "SQ419_WOLF");
    AI_FUNCTION(SELF, 0xf9c2);
}

instance DIA_EINAR_TEACH_SMITH2(C_INFO) {
    NPC = 0xe390;
    NR = 7;
    CONDITION = DIA_EINAR_TEACH_SMITH2_CONDITION;
    INFORMATION = DIA_EINAR_TEACH_SMITH2_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = B_BUILDLEARNSTRING2(PRINT_LEARN_SMITH2, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_SMITH, 2), EINAR_SMITH2);
}

func int DIA_EINAR_TEACH_SMITH2_CONDITION() {
    if (((EINAR_TEACHHEROSMITH) == (TRUE)) && ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_SMITH)) == (1))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_TEACH_SMITH2_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_TRAIN_Smith2_15_00");
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (EINAR_SMITH2)) {
        if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_SMITH)) == (2)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x859b, EINAR_SMITH2);
            AI_OUTPUT(SELF, OTHER, "DIA_Einar_TRAIN_Smith2_03_01");
            AI_OUTPUT(SELF, OTHER, "DIA_Einar_TRAIN_Smith2_03_02");
            B_GIVEINVITEMS(SELF, OTHER, 0x859a, 1);
            NPC_REMOVEINVITEMS(SELF, 0x859b, EINAR_SMITH2);
        };
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_TRAIN_Smith2_03_03");
}

instance DIA_EINAR_TEACH_SMITH3(C_INFO) {
    NPC = 0xe390;
    NR = 7;
    CONDITION = DIA_EINAR_TEACH_SMITH3_CONDITION;
    INFORMATION = DIA_EINAR_TEACH_SMITH3_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = B_BUILDLEARNSTRING2(PRINT_LEARN_SMITH3, B_GETLEARNCOSTTALENT(OTHER, NPC_TALENT_SMITH, 3), EINAR_SMITH3);
}

func int DIA_EINAR_TEACH_SMITH3_CONDITION() {
    if (((EINAR_TEACHHEROSMITH) == (TRUE)) && ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_SMITH)) == (2))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_TEACH_SMITH3_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_TRAIN_Smith3_15_00");
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (EINAR_SMITH3)) {
        SMITH_FINISHTRAIN = TRUE;
        SMITH_FINISHTRAIN_DAY = WLD_GETDAY();
        if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_SMITH)) == (3)) {
            B_GIVEINVITEMS(OTHER, SELF, 0x859b, EINAR_SMITH3);
            AI_OUTPUT(SELF, OTHER, "DIA_Einar_TRAIN_Smith3_03_01");
            AI_OUTPUT(SELF, OTHER, "DIA_Einar_TRAIN_Smith3_03_02");
            AI_OUTPUT(SELF, OTHER, "DIA_Einar_TRAIN_Smith3_03_03");
            NPC_REMOVEINVITEMS(SELF, 0x859b, EINAR_SMITH3);
        };
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_TRAIN_Smith3_03_04");
}

instance DIA_EINAR_ARMORS(C_INFO) {
    NPC = 0xe390;
    NR = 1;
    CONDITION = DIA_EINAR_ARMORS_CONDITION;
    INFORMATION = DIA_EINAR_ARMORS_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Do you do armor as well?";
}

func int DIA_EINAR_ARMORS_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x13e4d)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_ARMORS_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Einar_Armors_15_01");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Armors_03_02");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Armors_03_03");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Armors_03_04");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Einar_Armors_03_05");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
}

instance DIA_EINAR_UPGRADEARMOR(C_INFO) {
    NPC = 0xe390;
    NR = 950;
    CONDITION = DIA_EINAR_UPGRADEARMOR_CONDITION;
    INFORMATION = DIA_EINAR_UPGRADEARMOR_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_UPGRADEARMOR;
}

func int DIA_EINAR_UPGRADEARMOR_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x13eb1)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_UPGRADEARMOR_INFO() {
    INFO_CLEARCHOICES(0x13eb4);
    INFO_ADDCHOICE(0x13eb4, DIALOG_BACK, 0x13eb7);
    INFO_ADDCHOICE(0x13eb4, "(Upgrade regular armor)", 0x13eb8);
    INFO_ADDCHOICE(0x13eb4, "(Upgrade to superior armor)", 0x13ed2);
}

func void DIA_EINAR_UPGRADEARMOR_BACK() {
    INFO_CLEARCHOICES(0x13eb4);
}

func void DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES() {
    ARMORSELLER_CHAIN_L_TIER2 = CS7(NAMEARMOR_CHAIN_L_TIER2, " (", I2S((VALUE_ITAR_CHAIN_L) / (2)), PRINT_SZ, " + 5x ", NAMECRAFT_IRON, ")");
    ARMORSELLER_CHAIN_M_TIER2 = CS7(NAMEARMOR_CHAIN_M_TIER2, " (", I2S((VALUE_ITAR_CHAIN_M) / (2)), PRINT_SZ, " + 6x ", NAMECRAFT_IRON, ")");
    ARMORSELLER_CRAB_TIER2 = CS7(NAMEARMOR_CRAB_TIER2, " (", I2S((VALUE_ITAR_CRAB) / (2)), PRINT_SZ, " + 4x ", THROPHYNAME_CRABSHELL, ")");
    ARMORSELLER_LEATHER_L_TIER2 = CS7(NAMEARMOR_KM_LEATHER_L_TIER2, " (", I2S((VALUE_ITAR_KM_LEATHER_L) / (2)), PRINT_SZ, " + 1x ", THROPHYNAME_TURTLESHELL, ")");
    ARMORSELLER_LEATHER_M_TIER2 = CS7(NAMEARMOR_KM_LEATHER_M_TIER2, " (", I2S((VALUE_ITAR_KM_LEATHER_M) / (2)), PRINT_SZ, " + 2x ", THROPHYNAME_TURTLESHELL, ")");
    ARMORSELLER_HUNTER_L_TIER2 = CS7(NAMEARMOR_KM_HUNTER_L_TIER2, " (", I2S((VALUE_ITAR_HUNTER_L) / (2)), PRINT_SZ, " + 1x ", THROPHYNAME_CRAWLERPLATE, ")");
    ARMORSELLER_STH_L_TIER2 = CS7(NAMEARMOR_STH_L_TIER2, " (", I2S((VALUE_ITAR_STH_L) / (2)), PRINT_SZ, " + 2x ", THROPHYNAME_CRAWLERPLATE, ")");
    ARMORSELLER_STH_H_TIER2 = CS7(NAMEARMOR_STH_H_TIER2, " (", I2S((VALUE_ITAR_STH_H) / (2)), PRINT_SZ, " + 4x ", THROPHYNAME_CRAWLERPLATE, ")");
    ARMORSELLER_NORDMAR_TIER2 = CS7(NAMEARMOR_NORDMAR_TIER2, " (", I2S((VALUE_ITAR_NORDMAR) / (2)), PRINT_SZ, " + 2x ", MISCNAME_NUGGET, ")");
    ARMORSELLER_ARX_R_TIER2 = CS7(NAMEARMOR_ARX_R_TIER2, " (", I2S((VALUE_ITAR_ARX_R) / (2)), PRINT_SZ, " + 5x ", NAMECRAFT_IRON, ")");
    ARMORSELLER_ARX_B_TIER2 = CS7(NAMEARMOR_ARX_B_TIER2, " (", I2S((VALUE_ITAR_ARX_B) / (2)), PRINT_SZ, " + 3x ", THROPHYNAME_TURTLESHELL, ")");
    ARMORSELLER_ARX_W1_TIER2 = CS7(NAMEARMOR_ARX_W1_TIER2, " (", I2S((VALUE_ITAR_ARX_W1) / (2)), PRINT_SZ, " + 20x ", NAMECRAFT_IRON, ")");
    ARMORSELLER_ARX_W2_TIER2 = CS7(NAMEARMOR_ARX_W2_TIER2, " (", I2S((VALUE_ITAR_ARX_W2) / (2)), PRINT_SZ, " + 10x ", NAMEMISC_SILVER, ")");
    ARMORSELLER_ARX_H1_TIER2 = CS7(NAMEARMOR_ARX_H1_TIER2, " (", I2S((VALUE_ITAR_ARX_H1) / (2)), PRINT_SZ, " + 4x ", THROPHYNAME_CRABSHELL, ")");
    ARMORSELLER_ARX_H2_TIER2 = CS7(NAMEARMOR_ARX_H2_TIER2, " (", I2S((VALUE_ITAR_ARX_H2) / (2)), PRINT_SZ, " + 6x ", THROPHYNAME_CRAWLERPLATE, ")");
    ARMORSELLER_MIL_R_TIER2 = CS7(NAMEARMOR_MIL_R_01_TIER2, " (", I2S((VALUE_ITAR_MIL_R) / (2)), PRINT_SZ, " + 5x ", NAMECRAFT_IRON, ")");
    ARMORSELLER_MIL_B_TIER2 = CS7(NAMEARMOR_MIL_B_TIER2, " (", I2S((VALUE_ITAR_MIL_B) / (2)), PRINT_SZ, " + 3x ", THROPHYNAME_TURTLESHELL, ")");
    ARMORSELLER_MIL_W1_TIER2 = CS7(NAMEARMOR_MIL_W1_TIER2, " (", I2S((VALUE_ITAR_MIL_W1) / (2)), PRINT_SZ, " + 20x ", NAMECRAFT_IRON, ")");
    ARMORSELLER_MIL_W2_TIER2 = CS7(NAMEARMOR_MIL_W2_TIER2, " (", I2S((VALUE_ITAR_MIL_W2) / (2)), PRINT_SZ, " + 10x ", NAMEMISC_SILVER, ")");
    ARMORSELLER_MIL_C1_TIER2 = CS7(NAMEARMOR_MIL_C1_TIER2, " (", I2S((VALUE_ITAR_MIL_C1) / (2)), PRINT_SZ, " + 4x ", THROPHYNAME_CRAWLERPLATE, ")");
    ARMORSELLER_MIL_C2_TIER2 = CS7(NAMEARMOR_MIL_C2_TIER2, " (", I2S((VALUE_ITAR_MIL_C2) / (2)), PRINT_SZ, " + 6x ", THROPHYNAME_CRABSHELL, ")");
    ARMORSELLER_USM_L_TIER2 = CS7(NAMEARMOR_USM_L_TIER2, " (", I2S((VALUE_ITAR_USM_L) / (2)), PRINT_SZ, " + 10x ", NAMECRAFT_IRON, ")");
    ARMORSELLER_WS_M_TIER2 = CS7(NAMEARMOR_WS_M_TIER2, " (", I2S((VALUE_ITAR_WS_M) / (2)), PRINT_SZ, " + 8x ", NAMEMISC_SILVER, ")");
    ARMORSELLER_GRD_M_TIER2 = CS7(NAMEARMOR_GRD_M_TIER2, " (", I2S((VALUE_ITAR_GRD_M) / (2)), PRINT_SZ, " + 20x ", MISCNAME_GOLDNUGGET_ADDON, ")");
    ARMORSELLER_KNIGHT_TIER2 = CS7(NAMEARMOR_KNIGHTARMOR_TIER2, " (", I2S((VALUE_ITAR_KNIGHTARMOR) / (5)), PRINT_SZ, " + 20x ", NAMECRAFT_IRON, ")");
    INFO_CLEARCHOICES(0x13eb4);
    if ((NPC_HASITEMS(OTHER, 0x8a46)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_CHAIN_L_TIER2, 0x13eb9);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_CHAIN_L_TIER2, 0x13eb9);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a4b)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_CHAIN_M_TIER2, 0x13eba);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_CHAIN_M_TIER2, 0x13eba);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a56)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_LEATHER_L_TIER2, 0x13ebc);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_KM_LEATHER_L_TIER2, 0x13ebc);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a59)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_LEATHER_M_TIER2, 0x13ebd);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_KM_LEATHER_M_TIER2, 0x13ebd);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a5e)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_HUNTER_L_TIER2, 0x13ebe);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_KM_HUNTER_L_TIER2, 0x13ebe);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a66)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_STH_L_TIER2, 0x13ebf);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_STH_L_TIER2, 0x13ebf);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a6b)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_STH_H_TIER2, 0x13ec0);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_STH_H_TIER2, 0x13ec0);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a4f)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_CRAB_TIER2, 0x13ebb);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_CRAB_TIER2, 0x13ebb);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a97)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_USM_L_TIER2, 0x13ec2);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_USM_L_TIER2, 0x13ec2);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a74)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_NORDMAR_TIER2, 0x13ec1);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_NORDMAR_TIER2, 0x13ec1);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8abb)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_WS_M_TIER2, 0x13ec3);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_WS_M_TIER2, 0x13ec3);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8b21)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_GRD_M_TIER2, 0x13ec4);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_GRD_M_TIER2, 0x13ec4);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a7b)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_ARX_R_TIER2, 0x13ec5);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_ARX_R_TIER2, 0x13ec5);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a89)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_ARX_B_TIER2, 0x13ec6);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_ARX_B_TIER2, 0x13ec6);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a7e)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_ARX_W1_TIER2, 0x13ec7);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_ARX_W1_TIER2, 0x13ec7);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a83)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_ARX_W2_TIER2, 0x13ec8);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_ARX_W2_TIER2, 0x13ec8);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a8e)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_ARX_H1_TIER2, 0x13ec9);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_ARX_H1_TIER2, 0x13ec9);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a93)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_ARX_H2_TIER2, 0x13eca);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_ARX_H2_TIER2, 0x13eca);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a9a)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_MIL_R_TIER2, 0x13ecb);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_MIL_R_01_TIER2, 0x13ecb);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8aa0)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_MIL_B_TIER2, 0x13ecc);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_MIL_B_TIER2, 0x13ecc);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8aad)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_MIL_W1_TIER2, 0x13ecd);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_MIL_W1_TIER2, 0x13ecd);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8ab2)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_MIL_W2_TIER2, 0x13ece);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_MIL_W2_TIER2, 0x13ece);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8aa5)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_MIL_C1_TIER2, 0x13ecf);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_MIL_C1_TIER2, 0x13ecf);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8aaa)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_MIL_C2_TIER2, 0x13ed0);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_MIL_C2_TIER2, 0x13ed0);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8ac5)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_KNIGHT_TIER2, 0x13ed1);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_KNIGHTARMOR_TIER2, 0x13ed1);
        };
    };
    INFO_ADDCHOICE(0x13eb4, DIALOG_BACK, 0x13eb6);
}

func void DIA_EINAR_UPGRADEARMOR_CHAIN_L_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a46)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_CHAIN_L) / (2))) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (5))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a47, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a47);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_CHAIN_M_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a4b)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_CHAIN_M) / (2))) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (6))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a4c, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a4c);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_CRAB_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a4f)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_CRAB) / (2))) && ((NPC_HASITEMS(OTHER, 0x8a21)) >= (4))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a50, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a50);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_LEATHER_L_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a56)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_KM_LEATHER_L) / (2))) && ((NPC_HASITEMS(OTHER, 0x8a20)) >= (1))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a57, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a57);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_LEATHER_M_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a59)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_KM_LEATHER_M) / (2))) && ((NPC_HASITEMS(OTHER, 0x8a20)) >= (2))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a5a, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a5a);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_HUNTER_L_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a5e)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_HUNTER_L) / (2))) && ((NPC_HASITEMS(OTHER, 0x8446)) >= (1))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a5f, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a5f);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_STH_L_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a66)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_STH_L) / (2))) && ((NPC_HASITEMS(OTHER, 0x8446)) >= (2))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a67, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a67);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_STH_H_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a6b)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_STH_H) / (2))) && ((NPC_HASITEMS(OTHER, 0x8446)) >= (4))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a6c, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a6c);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_NORDMAR_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a74)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_NORDMAR) / (2))) && ((NPC_HASITEMS(OTHER, 0x859a)) >= (2))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a75, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a75);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_USM_L_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a97)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_USM_L) / (2))) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (10))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a98, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a98);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_WS_M_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8abb)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_WS_M) / (2))) && ((NPC_HASITEMS(OTHER, 0x904b)) >= (8))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8abc, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8abc);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_GRD_M_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8b21)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_GRD_M) / (2))) && ((NPC_HASITEMS(OTHER, 0x837c)) >= (20))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8b22, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8b22);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_ARX_R_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a7b)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_ARX_R) / (2))) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (5))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a7c, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a7c);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_ARX_B_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a89)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_ARX_B) / (2))) && ((NPC_HASITEMS(OTHER, 0x8a20)) >= (3))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a8a, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a8a);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_ARX_W1_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a7e)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_ARX_W1) / (2))) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (20))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a7f, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a7f);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_ARX_W2_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a83)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_ARX_W2) / (2))) && ((NPC_HASITEMS(OTHER, 0x904b)) >= (10))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a84, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a84);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_ARX_H1_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a8e)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_ARX_H1) / (2))) && ((NPC_HASITEMS(OTHER, 0x8a21)) >= (4))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a8f, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a8f);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_ARX_H2_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a93)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_ARX_H2) / (2))) && ((NPC_HASITEMS(OTHER, 0x8446)) >= (6))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a94, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a94);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_MIL_R_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8a9a)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_MIL_R) / (2))) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (5))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a9b, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a9b);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_MIL_B_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8aa0)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_MIL_B) / (2))) && ((NPC_HASITEMS(OTHER, 0x8a20)) >= (3))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8aa1, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8aa1);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_MIL_W1_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8aad)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_MIL_W1) / (2))) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (20))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8aae, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8aae);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_MIL_W2_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8ab2)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_MIL_W2) / (2))) && ((NPC_HASITEMS(OTHER, 0x904b)) >= (10))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8ab3, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8ab3);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_MIL_C1_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8aa5)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_MIL_C1) / (2))) && ((NPC_HASITEMS(OTHER, 0x8446)) >= (4))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8aa6, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8aa6);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_MIL_C2_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8aaa)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_MIL_C2) / (2))) && ((NPC_HASITEMS(OTHER, 0x8a21)) >= (6))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8aab, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8aab);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_KNIGHT_TIER2() {
    if ((NPC_HASITEMS(OTHER, 0x8ac5)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_KNIGHTARMOR) / (5))) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (20))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8ac6, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER2);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8ac6);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER2_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES() {
    ARMORSELLER_CHAIN_L_TIER3 = CS7(NAMEARMOR_CHAIN_L_TIER3, " (", I2S(VALUE_ITAR_CHAIN_L), PRINT_SZ, " + 10x ", NAMECRAFT_IRON, ")");
    ARMORSELLER_CHAIN_M_TIER3 = CS7(NAMEARMOR_CHAIN_M_TIER3, " (", I2S(VALUE_ITAR_CHAIN_M), PRINT_SZ, " + 12x ", NAMECRAFT_IRON, ")");
    ARMORSELLER_CRAB_TIER3 = CS7(NAMEARMOR_CRAB_TIER3, " (", I2S(VALUE_ITAR_CRAB), PRINT_SZ, " + 8x ", THROPHYNAME_CRABSHELL, ")");
    ARMORSELLER_LEATHER_L_TIER3 = CS7(NAMEARMOR_KM_LEATHER_L_TIER3, " (", I2S(VALUE_ITAR_KM_LEATHER_L), PRINT_SZ, " + 2x ", THROPHYNAME_TURTLESHELL, ")");
    ARMORSELLER_LEATHER_M_TIER3 = CS7(NAMEARMOR_KM_LEATHER_M_TIER3, " (", I2S(VALUE_ITAR_KM_LEATHER_M), PRINT_SZ, " + 4x ", THROPHYNAME_TURTLESHELL, ")");
    ARMORSELLER_HUNTER_L_TIER3 = CS7(NAMEARMOR_KM_HUNTER_L_TIER3, " (", I2S(VALUE_ITAR_HUNTER_L), PRINT_SZ, " + 2x ", THROPHYNAME_CRAWLERPLATE, ")");
    ARMORSELLER_STH_L_TIER3 = CS7(NAMEARMOR_STH_L_TIER3, " (", I2S(VALUE_ITAR_STH_L), PRINT_SZ, " + 4x ", THROPHYNAME_CRAWLERPLATE, ")");
    ARMORSELLER_STH_H_TIER3 = CS7(NAMEARMOR_STH_H_TIER3, " (", I2S(VALUE_ITAR_STH_H), PRINT_SZ, " + 8x ", THROPHYNAME_CRAWLERPLATE, ")");
    ARMORSELLER_NORDMAR_TIER3 = CS7(NAMEARMOR_NORDMAR_TIER3, " (", I2S(VALUE_ITAR_NORDMAR), PRINT_SZ, " + 4x ", MISCNAME_NUGGET, ")");
    ARMORSELLER_ARX_R_TIER3 = CS7(NAMEARMOR_ARX_R_TIER3, " (", I2S(VALUE_ITAR_ARX_R), PRINT_SZ, " + 10x ", NAMECRAFT_IRON, ")");
    ARMORSELLER_ARX_B_TIER3 = CS7(NAMEARMOR_ARX_B_TIER3, " (", I2S(VALUE_ITAR_ARX_B), PRINT_SZ, " + 6x ", THROPHYNAME_TURTLESHELL, ")");
    ARMORSELLER_ARX_W1_TIER3 = CS7(NAMEARMOR_ARX_W1_TIER3, " (", I2S(VALUE_ITAR_ARX_W1), PRINT_SZ, " + 40x ", NAMECRAFT_IRON, ")");
    ARMORSELLER_ARX_W2_TIER3 = CS7(NAMEARMOR_ARX_W2_TIER3, " (", I2S(VALUE_ITAR_ARX_W2), PRINT_SZ, " + 20x ", NAMEMISC_SILVER, ")");
    ARMORSELLER_ARX_H1_TIER3 = CS7(NAMEARMOR_ARX_H1_TIER3, " (", I2S(VALUE_ITAR_ARX_H1), PRINT_SZ, " + 8x ", THROPHYNAME_CRABSHELL, ")");
    ARMORSELLER_ARX_H2_TIER3 = CS7(NAMEARMOR_ARX_H2_TIER3, " (", I2S(VALUE_ITAR_ARX_H2), PRINT_SZ, " + 12x ", THROPHYNAME_CRAWLERPLATE, ")");
    ARMORSELLER_MIL_R_TIER3 = CS7(NAMEARMOR_MIL_R_01_TIER3, " (", I2S(VALUE_ITAR_MIL_R), PRINT_SZ, " + 10x ", NAMECRAFT_IRON, ")");
    ARMORSELLER_MIL_B_TIER3 = CS7(NAMEARMOR_MIL_B_TIER3, " (", I2S(VALUE_ITAR_MIL_B), PRINT_SZ, " + 6x ", THROPHYNAME_TURTLESHELL, ")");
    ARMORSELLER_MIL_W1_TIER3 = CS7(NAMEARMOR_MIL_W1_TIER3, " (", I2S(VALUE_ITAR_MIL_W1), PRINT_SZ, " + 40x ", NAMECRAFT_IRON, ")");
    ARMORSELLER_MIL_W2_TIER3 = CS7(NAMEARMOR_MIL_W2_TIER3, " (", I2S(VALUE_ITAR_MIL_W2), PRINT_SZ, " + 20x ", NAMEMISC_SILVER, ")");
    ARMORSELLER_MIL_C1_TIER3 = CS7(NAMEARMOR_MIL_C1_TIER3, " (", I2S(VALUE_ITAR_MIL_C1), PRINT_SZ, " + 8x ", THROPHYNAME_CRAWLERPLATE, ")");
    ARMORSELLER_MIL_C2_TIER3 = CS7(NAMEARMOR_MIL_C2_TIER3, " (", I2S(VALUE_ITAR_MIL_C2), PRINT_SZ, " + 12x ", THROPHYNAME_CRABSHELL, ")");
    ARMORSELLER_USM_L_TIER3 = CS7(NAMEARMOR_USM_L_TIER3, " (", I2S(VALUE_ITAR_USM_L), PRINT_SZ, " + 20x ", NAMECRAFT_IRON, ")");
    ARMORSELLER_WS_M_TIER3 = CS7(NAMEARMOR_WS_M_TIER3, " (", I2S(VALUE_ITAR_WS_M), PRINT_SZ, " + 16x ", NAMEMISC_SILVER, ")");
    ARMORSELLER_GRD_M_TIER3 = CS7(NAMEARMOR_GRD_M_TIER3, " (", I2S(VALUE_ITAR_GRD_M), PRINT_SZ, " + 40x ", MISCNAME_GOLDNUGGET_ADDON, ")");
    ARMORSELLER_KNIGHT_TIER3 = CS7(NAMEARMOR_KNIGHTARMOR_TIER3, " (", I2S((VALUE_ITAR_KNIGHTARMOR) / (2)), PRINT_SZ, " + 40x ", NAMECRAFT_IRON, ")");
    INFO_CLEARCHOICES(0x13eb4);
    if ((NPC_HASITEMS(OTHER, 0x8a47)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_CHAIN_L_TIER3, 0x13ed3);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_CHAIN_L_TIER3, 0x13ed3);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a4c)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_CHAIN_M_TIER3, 0x13ed4);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_CHAIN_M_TIER3, 0x13ed4);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a57)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_LEATHER_L_TIER3, 0x13ed6);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_KM_LEATHER_L_TIER3, 0x13ed6);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a5a)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_LEATHER_M_TIER3, 0x13ed7);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_KM_LEATHER_M_TIER3, 0x13ed7);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a5f)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_HUNTER_L_TIER3, 0x13ed8);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_KM_HUNTER_L_TIER3, 0x13ed8);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a67)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_STH_L_TIER3, 0x13ed9);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_STH_L_TIER3, 0x13ed9);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a6c)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_STH_H_TIER3, 0x13eda);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_STH_H_TIER3, 0x13eda);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a50)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_CRAB_TIER3, 0x13ed5);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_CRAB_TIER3, 0x13ed5);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a98)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_USM_L_TIER3, 0x13edc);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_USM_L_TIER3, 0x13edc);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a75)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_NORDMAR_TIER3, 0x13edb);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_NORDMAR_TIER3, 0x13edb);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8abc)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_WS_M_TIER3, 0x13edd);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_WS_M_TIER3, 0x13edd);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8b22)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_GRD_M_TIER3, 0x13ede);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_GRD_M_TIER3, 0x13ede);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a7c)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_ARX_R_TIER3, 0x13edf);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_ARX_R_TIER3, 0x13edf);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a8a)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_ARX_B_TIER3, 0x13ee0);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_ARX_B_TIER3, 0x13ee0);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a7f)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_ARX_W1_TIER3, 0x13ee1);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_ARX_W1_TIER3, 0x13ee1);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a84)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_ARX_W2_TIER3, 0x13ee2);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_ARX_W2_TIER3, 0x13ee2);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a8f)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_ARX_H1_TIER3, 0x13ee3);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_ARX_H1_TIER3, 0x13ee3);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a94)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_ARX_H2_TIER3, 0x13ee4);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_ARX_H2_TIER3, 0x13ee4);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8a9b)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_MIL_R_TIER3, 0x13ee5);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_MIL_R_01_TIER3, 0x13ee5);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8aa1)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_MIL_B_TIER3, 0x13ee6);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_MIL_B_TIER3, 0x13ee6);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8aae)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_MIL_W1_TIER3, 0x13ee7);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_MIL_W1_TIER3, 0x13ee7);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8ab3)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_MIL_W2_TIER3, 0x13ee8);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_MIL_W2_TIER3, 0x13ee8);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8aa6)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_MIL_C1_TIER3, 0x13ee9);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_MIL_C1_TIER3, 0x13ee9);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8aab)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_MIL_C2_TIER3, 0x13eea);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_MIL_C2_TIER3, 0x13eea);
        };
    };
    if ((NPC_HASITEMS(OTHER, 0x8ac6)) >= (1)) {
        if ((SQ419_FREEUPGRADE) == (FALSE)) {
            INFO_ADDCHOICE(0x13eb4, ARMORSELLER_KNIGHT_TIER3, 0x13eeb);
        } else {
            INFO_ADDCHOICE(0x13eb4, NAMEARMOR_KNIGHTARMOR_TIER3, 0x13eeb);
        };
    };
    INFO_ADDCHOICE(0x13eb4, DIALOG_BACK, 0x13eb6);
}

func void DIA_EINAR_UPGRADEARMOR_CHAIN_L_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a47)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_CHAIN_L)) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (10))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a48, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a48);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_CHAIN_M_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a4c)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_CHAIN_M)) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (12))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a4d, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a4d);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_CRAB_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a50)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_CRAB)) && ((NPC_HASITEMS(OTHER, 0x8a21)) >= (8))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a51, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a51);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_LEATHER_L_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a57)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_KM_LEATHER_L)) && ((NPC_HASITEMS(OTHER, 0x8a20)) >= (2))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a58, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a58);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_LEATHER_M_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a5a)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_KM_LEATHER_M)) && ((NPC_HASITEMS(OTHER, 0x8a20)) >= (4))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a5b, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a5b);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_HUNTER_L_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a5f)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_HUNTER_L)) && ((NPC_HASITEMS(OTHER, 0x8446)) >= (2))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a60, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a60);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_STH_L_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a67)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_STH_L)) && ((NPC_HASITEMS(OTHER, 0x8446)) >= (4))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a68, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a68);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_STH_H_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a6c)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_STH_H)) && ((NPC_HASITEMS(OTHER, 0x8446)) >= (8))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a6d, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a6d);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_NORDMAR_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a75)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_NORDMAR)) && ((NPC_HASITEMS(OTHER, 0x859a)) >= (4))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a76, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a76);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_USM_L_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a98)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_USM_L)) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (20))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a99, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a99);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_WS_M_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8abc)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_WS_M)) && ((NPC_HASITEMS(OTHER, 0x904b)) >= (16))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8abd, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8abd);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_GRD_M_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8b22)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_GRD_M)) && ((NPC_HASITEMS(OTHER, 0x837c)) >= (40))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8b23, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8b23);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_ARX_R_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a7c)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_ARX_R)) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (10))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a7d, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a7d);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_ARX_B_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a8a)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_ARX_B)) && ((NPC_HASITEMS(OTHER, 0x8a20)) >= (6))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a8b, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a8b);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_ARX_W1_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a7f)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_ARX_W1)) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (40))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a80, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a80);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_ARX_W2_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a84)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_ARX_W2)) && ((NPC_HASITEMS(OTHER, 0x904b)) >= (10))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a85, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a85);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_ARX_H1_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a8f)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_ARX_H1)) && ((NPC_HASITEMS(OTHER, 0x8a21)) >= (8))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a90, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a90);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_ARX_H2_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a94)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_ARX_H2)) && ((NPC_HASITEMS(OTHER, 0x8446)) >= (12))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a95, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a95);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_MIL_R_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8a9b)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_MIL_R)) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (10))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8a9c, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8a9c);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_MIL_B_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8aa1)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_MIL_B)) && ((NPC_HASITEMS(OTHER, 0x8a20)) >= (6))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8aa2, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8aa2);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_MIL_W1_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8aae)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_MIL_W1)) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (40))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8aaf, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8aaf);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_MIL_W2_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8ab3)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_MIL_W2)) && ((NPC_HASITEMS(OTHER, 0x904b)) >= (20))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8ab4, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8ab4);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_MIL_C1_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8aa6)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_MIL_C1)) && ((NPC_HASITEMS(OTHER, 0x8446)) >= (8))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8aa7, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8aa7);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_MIL_C2_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8aab)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= (VALUE_ITAR_MIL_C2)) && ((NPC_HASITEMS(OTHER, 0x8a21)) >= (12))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8aac, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8aac);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

func void DIA_EINAR_UPGRADEARMOR_KNIGHT_TIER3() {
    if ((NPC_HASITEMS(OTHER, 0x8ac6)) >= (1)) {
        if ((((NPC_HASITEMS(OTHER, 0x859b)) >= ((VALUE_ITAR_KNIGHTARMOR) / (2))) && ((NPC_HASITEMS(OTHER, 0x8c8c)) >= (40))) || ((SQ419_FREEUPGRADE) == (TRUE))) {
            if ((SQ419_FREEUPGRADE) == (FALSE)) {
            } else {
                SQ419_FREEUPGRADE = FALSE;
            } else {
                CREATEINVITEMS(SELF, 0x8ac7, 1);
            } else {
                B_GIVEPLAYERXP(XP_ARMORUPGRADE_TIER3);
            } else {
                AI_EQUIPARMOR(OTHER, 0x8ac7);
            } else {
                /* set_instance(0) */;
            };
        };
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
    DIA_EINAR_UPGRADEARMOR_TIER3_CHOICES();
}

instance DIA_EINAR_PICKPOCKET(C_INFO) {
    NPC = 0xe390;
    NR = 900;
    CONDITION = DIA_EINAR_PICKPOCKET_CONDITION;
    INFORMATION = DIA_EINAR_PICKPOCKET_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = PICKPOCKET_80;
}

func int DIA_EINAR_PICKPOCKET_CONDITION() {
    if (((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (1)) && ((SELF.AIVAR[6]) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_EINAR_PICKPOCKET_INFO() {
    INFO_CLEARCHOICES(0x13eec);
    INFO_ADDCHOICE(0x13eec, DIALOG_BACK, 0x13ef0);
    INFO_ADDCHOICE(0x13eec, DIALOG_PICKPOCKET, 0x13eef);
}

func void DIA_EINAR_PICKPOCKET_DOIT() {
    if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (2)) {
        CREATEINVITEMS(SELF, 0x904b, 2);
        B_GIVEINVITEMS(SELF, OTHER, 0x904b, 2);
        B_PICKPOCKET_AMBIENT_TIER_2();
        SELF.AIVAR[6] = TRUE;
        INFO_CLEARCHOICES(0x13eec);
    };
    AI_PLAYANI(HERO, T_CANNOTTAKE);
    PRINTSCREEN(PRINT_CANTPICKPOCKETTHISPERSON, -(1), -(1), FONT_SCREEN, 4);
    INFO_CLEARCHOICES(0x13eec);
}

func void DIA_EINAR_PICKPOCKET_BACK() {
    INFO_CLEARCHOICES(0x13eec);
}

instance DIA_EINAR_SELLPLATE(C_INFO) {
    NPC = 0xe390;
    NR = 770;
    CONDITION = DIA_EINAR_SELLPLATE_CONDITION;
    INFORMATION = DIA_EINAR_SELLPLATE_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "I have everything you need. (Sell the minecrawler armor plates)";
}

var int EINARNEEDPLATE_ENOUGH = 0;
var int EINARNEEDPLATE_COUNT = 0;
func int DIA_EINAR_SELLPLATE_CONDITION() {
    if (((EINARWANTSPLATE) == (TRUE)) && ((EINARNEEDPLATE_ENOUGH) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

var int EINAR_PLATEINSTANCE = 0;
var int EINAR_PLATEVALUE = 0;
func void DIA_EINAR_SELLPLATE_CHOICES() {
    EINAR_PLATEINSTANCE = 0x8446;
    EINAR_PLATEVALUE = VALUE_CRAWLERPLATE;
    INFO_CLEARCHOICES(0x13ef1);
    MAX = NPC_HASITEMS(HERO, EINAR_PLATEINSTANCE);
    ALL_STRING = CS4(DIALOG_ALL, " (", I2S(MAX), ")");
    INFO_ADDCHOICE(0x13ef1, ALL_STRING, 0x13efc);
    INFO_ADDCHOICE(0x13ef1, CHOICE_NUMBER_5, 0x13efe);
    INFO_ADDCHOICE(0x13ef1, CHOICE_NUMBER_1, 0x13f00);
    INFO_ADDCHOICE(0x13ef1, DIALOG_BACK, 0x13efb);
}

var int DIA_EINAR_SELLPLATE_CHOICES.MAX = 0;
var string DIA_EINAR_SELLPLATE_CHOICES.ALL_STRING = "";
func void DIA_EINAR_SELLPLATE_INFO() {
    B_SAY(OTHER, SELF, "$MARVIN_GiveItem3");
    DIA_EINAR_SELLPLATE_CHOICES();
}

func void DIA_EINAR_SELLPLATE_BACK() {
    EINAR_PLATEINSTANCE = -(1);
    EINAR_PLATEVALUE = 0;
    INFO_CLEARCHOICES(0x13ef1);
}

func void DIA_EINAR_SELLPLATE_ALL() {
    if ((NPC_HASITEMS(OTHER, EINAR_PLATEINSTANCE)) >= (1)) {
        MAX = NPC_HASITEMS(HERO, EINAR_PLATEINSTANCE);
        B_GIVEINVITEMS(OTHER, SELF, EINAR_PLATEINSTANCE, MAX);
        CREATEINVITEMS(SELF, 0x859b, ((MAX) * (EINAR_PLATEVALUE)) / (2));
        B_GIVEINVITEMS(SELF, OTHER, 0x859b, ((MAX) * (EINAR_PLATEVALUE)) / (2));
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        B_SAY(SELF, OTHER, "$REWARD_CALM");
        AI_RESETFACEANI(SELF);
        if ((EINAR_PLATEINSTANCE) == (0x8446)) {
            EINARNEEDPLATE_COUNT = (EINARNEEDPLATE_COUNT) + (MAX);
            if ((EINARNEEDPLATE_COUNT) >= (20)) {
                EINARNEEDPLATE_ENOUGH = TRUE;
                if ((EINARNEEDPLATE_COUNT) > (20)) {
                    AI_FUNCTION(SELF, 0x13f01);
                };
            };
        };
        if (((EINAR_PLATEINSTANCE) == (0x8446)) && ((EINARNEEDPLATE_ENOUGH) == (FALSE))) {
            DIA_EINAR_SELLPLATE_CHOICES();
        } else {
            DIA_EINAR_SELLPLATE_BACK();
        } else {
            /* set_instance(0) */;
        };
    };
    DIA_EINAR_SELLPLATE_BACK();
    B_SAY(SELF, OTHER, "$NOITEMS");
}

var int DIA_EINAR_SELLPLATE_ALL.MAX = 0;
func void DIA_EINAR_SELLPLATE_5() {
    if ((NPC_HASITEMS(OTHER, EINAR_PLATEINSTANCE)) >= (5)) {
        B_GIVEINVITEMS(OTHER, SELF, EINAR_PLATEINSTANCE, 5);
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        B_SAY(SELF, OTHER, "$REWARD_CALM");
        AI_RESETFACEANI(SELF);
        CREATEINVITEMS(SELF, 0x859b, ((5) * (EINAR_PLATEVALUE)) / (2));
        if ((EINAR_PLATEINSTANCE) == (0x8446)) {
            EINARNEEDPLATE_COUNT = (EINARNEEDPLATE_COUNT) + (5);
            if ((EINARNEEDPLATE_COUNT) >= (20)) {
                EINARNEEDPLATE_ENOUGH = TRUE;
                if ((EINARNEEDPLATE_COUNT) > (20)) {
                    AI_FUNCTION(SELF, 0x13f01);
                };
            };
        };
        if (((EINAR_PLATEINSTANCE) == (0x8446)) && ((EINARNEEDPLATE_ENOUGH) == (FALSE))) {
            DIA_EINAR_SELLPLATE_CHOICES();
        } else {
            DIA_EINAR_SELLPLATE_BACK();
        } else {
            /* set_instance(0) */;
        };
    };
    if (((NPC_HASITEMS(OTHER, EINAR_PLATEINSTANCE)) >= (1)) && ((NPC_HASITEMS(OTHER, EINAR_PLATEINSTANCE)) < (5))) {
        MAX = NPC_HASITEMS(HERO, EINAR_PLATEINSTANCE);
        B_GIVEINVITEMS(OTHER, SELF, EINAR_PLATEINSTANCE, MAX);
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        B_SAY(SELF, OTHER, "$REWARD_CALM");
        AI_RESETFACEANI(SELF);
        CREATEINVITEMS(SELF, 0x859b, ((MAX) * (EINAR_PLATEVALUE)) / (2));
        if ((EINAR_PLATEINSTANCE) == (0x8446)) {
            EINARNEEDPLATE_COUNT = (EINARNEEDPLATE_COUNT) + (MAX);
            if ((EINARNEEDPLATE_COUNT) >= (20)) {
                EINARNEEDPLATE_ENOUGH = TRUE;
                if ((EINARNEEDPLATE_COUNT) > (20)) {
                    AI_FUNCTION(SELF, 0x13f01);
                };
            };
        };
        if (((EINAR_PLATEINSTANCE) == (0x8446)) && ((EINARNEEDPLATE_ENOUGH) == (FALSE))) {
            DIA_EINAR_SELLPLATE_CHOICES();
        } else {
            DIA_EINAR_SELLPLATE_BACK();
        } else {
            /* set_instance(0) */;
        };
    };
    if ((NPC_HASITEMS(OTHER, EINAR_PLATEINSTANCE)) == (0)) {
        DIA_EINAR_SELLPLATE_BACK();
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
}

var int DIA_EINAR_SELLPLATE_5.MAX = 0;
func void DIA_EINAR_SELLPLATE_1() {
    if ((NPC_HASITEMS(OTHER, EINAR_PLATEINSTANCE)) >= (1)) {
        B_GIVEINVITEMS(OTHER, SELF, EINAR_PLATEINSTANCE, 1);
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        B_SAY(SELF, OTHER, "$REWARD_CALM");
        AI_RESETFACEANI(SELF);
        CREATEINVITEMS(SELF, 0x859b, (EINAR_PLATEVALUE) / (2));
        if ((EINAR_PLATEINSTANCE) == (0x8446)) {
            EINARNEEDPLATE_COUNT = (EINARNEEDPLATE_COUNT) + (1);
            if ((EINARNEEDPLATE_COUNT) >= (20)) {
                EINARNEEDPLATE_ENOUGH = TRUE;
                if ((EINARNEEDPLATE_COUNT) > (20)) {
                    AI_FUNCTION(SELF, 0x13f01);
                };
            };
        };
        if (((EINAR_PLATEINSTANCE) == (0x8446)) && ((EINARNEEDPLATE_ENOUGH) == (FALSE))) {
            DIA_EINAR_SELLPLATE_CHOICES();
        } else {
            DIA_EINAR_SELLPLATE_BACK();
        } else {
            /* set_instance(0) */;
        };
    };
    if ((NPC_HASITEMS(OTHER, EINAR_PLATEINSTANCE)) == (0)) {
        DIA_EINAR_SELLPLATE_BACK();
        B_SAY(SELF, OTHER, "$NOITEMS");
    };
}

func void EINAR_GIVEBACKSTUFF_PLATE() {
    NPC_REMOVEINVITEMS(DJG_10004_EINAR, 0x859b, ((VALUE_CRAWLERPLATE) / (2)) * ((EINARNEEDPLATE_COUNT) - (20)));
    PRINTSCREENS(PRINT_EINARPLATE, -(1), -(1), FONT_SCREENSMALL, 4);
    B_GIVEINVITEMS(HERO, DJG_10004_EINAR, 0x859b, ((VALUE_CRAWLERPLATE) / (2)) * ((EINARNEEDPLATE_COUNT) - (20)));
}

