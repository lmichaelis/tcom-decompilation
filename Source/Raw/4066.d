instance DIA_INGOLF_EXIT(C_INFO) {
    NPC = 0xdd64;
    NR = 999;
    CONDITION = DIA_INGOLF_EXIT_CONDITION;
    INFORMATION = DIA_INGOLF_EXIT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_ENDE;
}

func int DIA_INGOLF_EXIT_CONDITION() {
    return TRUE;
}

func void DIA_INGOLF_EXIT_INFO() {
    AI_STOPPROCESSINFOS(SELF);
    RUNESTRADE_CHECKBOUGHTRUNES();
}

instance DIA_INGOLF_Q601_PEACEKEEPER(C_INFO) {
    NPC = 0xdd64;
    NR = 1;
    CONDITION = DIA_INGOLF_Q601_PEACEKEEPER_CONDITION;
    INFORMATION = DIA_INGOLF_Q601_PEACEKEEPER_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_INGOLF_Q601_PEACEKEEPER_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q601)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x13826))) && ((NPC_GETDISTTOWP(SELF, "PART8_MONASTERY_MAGEROOM2_06")) <= (300))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_INGOLF_Q601_PEACEKEEPER_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_Q601_PeaceKeeper_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_Q601_PeaceKeeper_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_Q601_PeaceKeeper_03_03");
    AI_LOGENTRY(TOPIC_Q601, LOG_Q601_INGOLF_SEARCH);
    AI_STOPPROCESSINFOS(SELF);
    RUNESTRADE_CHECKBOUGHTRUNES();
    NPC_EXCHANGEROUTINE(SELF, "Q601_SEARCH");
    WLD_INSERTITEM(0x92f8, "FP_Q601_INGOLFBOOK");
}

instance DIA_INGOLF_Q601_FOUNDBOOK(C_INFO) {
    NPC = 0xdd64;
    NR = 1;
    CONDITION = DIA_INGOLF_Q601_FOUNDBOOK_CONDITION;
    INFORMATION = DIA_INGOLF_Q601_FOUNDBOOK_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_INGOLF_Q601_FOUNDBOOK_CONDITION() {
    if ((((NPC_KNOWSINFO(OTHER, 0x1384e)) && ((LOG_GETSTATUS(MIS_Q601)) == (LOG_RUNNING))) && ((NPC_HASITEMS(OTHER, 0x92f8)) >= (1))) && (NPC_ISINSTATE(SELF, 0xf09f))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_INGOLF_Q601_FOUNDBOOK_INFO() {
    AI_FUNCTION(SELF, 0x13854);
    AI_OUTPUT(OTHER, SELF, "DIA_Ingolf_Q601_FoundBook_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_Q601_FoundBook_03_02");
    B_USEFAKESCROLL();
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_Q601_FoundBook_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_Q601_FoundBook_03_04");
    AI_FUNCTION(SELF, 0x13855);
    AI_STOPPROCESSINFOS(SELF);
    RUNESTRADE_CHECKBOUGHTRUNES();
    NPC_EXCHANGEROUTINE(SELF, "Q601_INGOLFHOUSE");
}

func void INGOLF_Q601_TELEPORTNOTGER() {
    TELEPORTNPCTOWP(0xdd5d, "PART8_MONASTERY_112");
    B_STARTOTHERROUTINE(KDW_215_NOTGER, "Q601_WAIT");
    NPC_REFRESH(KDW_215_NOTGER);
    TELEPORTNPCTOWP(0xdda8, "PART8_MONASTERY_113");
    B_STARTOTHERROUTINE(NOV_203_NOVIZE, "Q601_SWEEPING");
    NPC_REFRESH(NOV_203_NOVIZE);
}

func void INGOLF_Q601_CHANGERTNNOTGER() {
    Q601_CHANGERTNNOTGER = 1;
}

instance DIA_INGOLF_SQ510_HELLO(C_INFO) {
    NPC = 0xdd64;
    NR = 1;
    CONDITION = DIA_INGOLF_SQ510_HELLO_CONDITION;
    INFORMATION = DIA_INGOLF_SQ510_HELLO_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_INGOLF_SQ510_HELLO_CONDITION() {
    if (NPC_ISINSTATE(SELF, 0xf09f)) {
        if (((Q501_MARVINGOTOSLEEP) == (4)) || ((Q501_MARVINGOTOSLEEP) == (5))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_INGOLF_SQ510_HELLO_INFO() {
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Hello_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Hello_03_02");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Hello_03_03");
    INFO_CLEARCHOICES(0x13856);
    INFO_ADDCHOICE(0x13856, "I just want to stop a dangerous man!", 0x1385a);
    INFO_ADDCHOICE(0x13856, "What do you mean?", 0x13859);
}

func void DIA_INGOLF_SQ510_HELLO_WHAT() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Ingolf_SQ510_Hello_What_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Hello_What_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Hello_What_03_03");
    AI_RESETFACEANI(OTHER);
}

func void DIA_INGOLF_SQ510_HELLO_VOLKER() {
    AI_STARTFACEANI(OTHER, S_ANGRY, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Ingolf_SQ510_Hello_Volker_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Hello_Volker_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Hello_Volker_03_03");
    AI_RESETFACEANI(OTHER);
    INFO_CLEARCHOICES(0x13856);
    INFO_ADDCHOICE(0x13856, "You're wrong. You don't know anything about me.", 0x1385c);
    INFO_ADDCHOICE(0x13856, "Maybe you're right...", 0x1385d);
}

func void DIA_INGOLF_SQ510_HELLO_NEXT() {
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
    B_STANDUP();
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Hello_Next_03_01");
    AI_STOPPROCESSINFOS(SELF);
    RUNESTRADE_CHECKBOUGHTRUNES();
    INFO_CLEARCHOICES(0x13856);
    AI_FUNCTION(SELF, 0xf781);
}

func void DIA_INGOLF_SQ510_HELLO_VOLKER_NO() {
    AI_STARTFACEANI(OTHER, S_ANGRY, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Ingolf_SQ510_Hello_No_15_01");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Hello_No_03_02");
    DIA_INGOLF_SQ510_HELLO_NEXT();
}

func void DIA_INGOLF_SQ510_HELLO_VOLKER_YES() {
    AI_STARTFACEANI(OTHER, S_TIRED, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Ingolf_SQ510_Hello_Yes_15_01");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Hello_Yes_03_02");
    DIA_INGOLF_SQ510_HELLO_NEXT();
}

instance DIA_INGOLF_SQ510_FINISH(C_INFO) {
    NPC = 0xdd64;
    NR = 1;
    CONDITION = DIA_INGOLF_SQ510_FINISH_CONDITION;
    INFORMATION = DIA_INGOLF_SQ510_FINISH_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_INGOLF_SQ510_FINISH_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_SQ510)) == (LOG_RUNNING)) && ((SQ510_FINISHSTAGE) == (TRUE))) && ((LOG_GETSTATUS(MIS_Q514)) != (LOG_SUCCESS))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_INGOLF_SQ510_FINISH_INFO() {
    INFO_CLEARCHOICES(0x1385e);
    INFO_ADDCHOICE(0x1385e, "What was that supposed to teach me?", 0x13866);
    INFO_ADDCHOICE(0x1385e, "You could have killed me!", 0x13865);
}

var int INGOLF_SQ510_FINISH_MISTAKE = 0;
var int INGOLF_SQ510_FINISH_NOTHING = 0;
func void DIA_INGOLF_SQ510_FINISH_CHOICES() {
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    INFO_CLEARCHOICES(0x1385e);
    if (((INGOLF_SQ510_FINISH_MISTAKE) == (TRUE)) || ((INGOLF_SQ510_FINISH_NOTHING) == (TRUE))) {
        INFO_ADDCHOICE(0x1385e, "I've had enough of this nonsense.", 0x1386b);
        INFO_ADDCHOICE(0x1385e, "Thank you for your advice.", 0x1386a);
    };
    if ((INGOLF_SQ510_FINISH_MISTAKE) == (FALSE)) {
        INFO_ADDCHOICE(0x1385e, "Do you think I'm making a mistake doing what I'm doing?", 0x13868);
    };
    if ((INGOLF_SQ510_FINISH_NOTHING) == (FALSE)) {
        INFO_ADDCHOICE(0x1385e, "So it's best to do nothing?", 0x13867);
    };
}

func void DIA_INGOLF_SQ510_FINISH_NEXT() {
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Next_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Next_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Next_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Next_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Next_03_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Next_03_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Next_03_07");
    DIA_INGOLF_SQ510_FINISH_CHOICES();
}

func void DIA_INGOLF_SQ510_FINISH_KILL() {
    AI_STARTFACEANI(OTHER, S_ANGRY, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Ingolf_SQ510_Finish_Kill_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Kill_03_02");
    DIA_INGOLF_SQ510_FINISH_NEXT();
}

func void DIA_INGOLF_SQ510_FINISH_TEACH() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Ingolf_SQ510_Finish_Teach_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Teach_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Teach_03_03");
    DIA_INGOLF_SQ510_FINISH_NEXT();
}

func void DIA_INGOLF_SQ510_FINISH_TEACH_NEXT_NOTHING() {
    INGOLF_SQ510_FINISH_NOTHING = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Ingolf_SQ510_Finish_Nothing_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Nothing_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Nothing_03_03");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Nothing_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Nothing_03_05");
    DIA_INGOLF_SQ510_FINISH_CHOICES();
}

func void DIA_INGOLF_SQ510_FINISH_TEACH_NEXT_MISTAKE() {
    INGOLF_SQ510_FINISH_MISTAKE = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Ingolf_SQ510_Finish_Mistake_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Mistake_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Mistake_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Mistake_03_04");
    DIA_INGOLF_SQ510_FINISH_CHOICES();
}

func void DIA_INGOLF_SQ510_FINISHQUEST() {
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
    INFO_CLEARCHOICES(0x1385e);
    AI_LOGENTRY(TOPIC_SQ510, LOG_SQ510_FINISH);
    LOG_SETSTATUS(_@(MIS_SQ510), TOPIC_SQ510, LOG_SUCCESS);
    B_GIVEPLAYERXP(XP_SQ510_FINISH);
}

func void DIA_INGOLF_SQ510_FINISH_TEACH_NEXT_THANKS() {
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Ingolf_SQ510_Finish_Thanks_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Thanks_03_02");
    DIA_INGOLF_SQ510_FINISHQUEST();
}

func void DIA_INGOLF_SQ510_FINISH_TEACH_NEXT_ENOUGH() {
    AI_STARTFACEANI(OTHER, S_ANGRY, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Ingolf_SQ510_Finish_Enough_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_SQ510_Finish_Enough_03_02");
    DIA_INGOLF_SQ510_FINISHQUEST();
}

instance DIA_INGOLF_AMBIENT(C_INFO) {
    NPC = 0xdd64;
    NR = 990;
    CONDITION = DIA_INGOLF_AMBIENT_CONDITION;
    INFORMATION = DIA_INGOLF_AMBIENT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "How are you doing?";
}

func int DIA_INGOLF_AMBIENT_CONDITION() {
    if ((!(NPC_KNOWSINFO(OTHER, 0x1384e))) && ((LOG_GETSTATUS(MIS_Q514)) != (LOG_SUCCESS))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_INGOLF_AMBIENT_INFO() {
    B_SAY(OTHER, SELF, "$MARVIN_WhatNew2");
    if ((LOG_GETSTATUS(MIS_SQ510)) != (LOG_SUCCESS)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_Ambient_03_01");
    };
    if ((LOG_GETSTATUS(MIS_SQ510)) == (LOG_SUCCESS)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_Ambient_03_02");
    };
}

instance DIA_INGOLF_WHATCANIFINDHERE(C_INFO) {
    NPC = 0xdd64;
    NR = 2;
    CONDITION = DIA_INGOLF_WHATCANIFINDHERE_CONDITION;
    INFORMATION = DIA_INGOLF_WHATCANIFINDHERE_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "What can I find here?";
}

func int DIA_INGOLF_WHATCANIFINDHERE_CONDITION() {
    if ((!(NPC_KNOWSINFO(OTHER, 0x1384e))) && ((LOG_GETSTATUS(MIS_Q514)) != (LOG_SUCCESS))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_INGOLF_WHATCANIFINDHERE_INFO() {
    B_SAY(OTHER, SELF, "$MARVIN_WhatCanIFindHere");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_WhatCanIFindHere_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_WhatCanIFindHere_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_WhatCanIFindHere_03_03");
}

instance DIA_INGOLF_CANSELL(C_INFO) {
    NPC = 0xdd64;
    NR = 1;
    CONDITION = DIA_INGOLF_CANSELL_CONDITION;
    INFORMATION = DIA_INGOLF_CANSELL_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Could you sell me some magic items?";
}

func int DIA_INGOLF_CANSELL_CONDITION() {
    if (((NPC_KNOWSINFO(OTHER, 0x136b4)) && (!(NPC_KNOWSINFO(OTHER, 0x1384e)))) && ((LOG_GETSTATUS(MIS_Q514)) != (LOG_SUCCESS))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_INGOLF_CANSELL_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Ingolf_CanSell_15_01");
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_CanSell_03_02");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_CanSell_03_03");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    LOG_CREATETOPIC(TOPIC_MONASTERYTRADER, LOG_NOTE);
    AI_LOGENTRY(TOPIC_MONASTERYTRADER, LOG_TRADER_INGOLF);
}

instance DIA_INGOLF_TRADE(C_INFO) {
    NPC = 0xdd64;
    NR = 100;
    CONDITION = DIA_INGOLF_TRADE_CONDITION;
    INFORMATION = DIA_INGOLF_TRADE_INFO;
    PERMANENT = TRUE;
    TRADE = TRUE;
    DESCRIPTION = "Let's trade!";
}

func int DIA_INGOLF_TRADE_CONDITION() {
    if (((NPC_KNOWSINFO(OTHER, 0x13872)) && (!(NPC_KNOWSINFO(OTHER, 0x1384e)))) && ((LOG_GETSTATUS(MIS_Q514)) != (LOG_SUCCESS))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_INGOLF_TRADE_INFO() {
    B_SAY(OTHER, SELF, "$MARVIN_LetsTrade");
    B_GIVETRADEINV(SELF);
}

instance DIA_INGOLF_CANYOUTEACH(C_INFO) {
    NPC = 0xdd64;
    NR = 1;
    CONDITION = DIA_INGOLF_CANYOUTEACH_CONDITION;
    INFORMATION = DIA_INGOLF_CANYOUTEACH_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Could you teach me something about magic?";
}

func int DIA_INGOLF_CANYOUTEACH_CONDITION() {
    if ((((NPC_KNOWSINFO(OTHER, 0x136b4)) && (!(NPC_KNOWSINFO(OTHER, 0x1384e)))) && ((LOG_GETSTATUS(MIS_Q514)) != (LOG_SUCCESS))) && (!(NPC_KNOWSINFO(OTHER, 0x1387b)))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_INGOLF_CANYOUTEACH_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Ingolf_CanYouTeach_15_01");
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_CanYouTeach_03_02");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
}

instance DIA_INGOLF_ONEOFUS(C_INFO) {
    NPC = 0xdd64;
    NR = 1;
    CONDITION = DIA_INGOLF_ONEOFUS_CONDITION;
    INFORMATION = DIA_INGOLF_ONEOFUS_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_INGOLF_ONEOFUS_CONDITION() {
    if ((!(NPC_KNOWSINFO(OTHER, 0x1384e))) && ((LOG_GETSTATUS(MIS_Q514)) != (LOG_SUCCESS))) {
        if ((((LOG_GETSTATUS(MIS_Q601)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x13826))) && ((NPC_GETDISTTOWP(SELF, "PART8_MONASTERY_MAGEROOM2_06")) <= (300))) {
            return FALSE;
        };
        if (((SQ504_JOINEDWATERCIRCLE) == (TRUE)) && ((SQ504_WEARINGRING) == (TRUE))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_INGOLF_ONEOFUS_INFO() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_OneOfUs_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_OneOfUs_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_OneOfUs_03_03");
    CREATEINVITEMS(SELF, 0x934e, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x934e, 1);
    CREATEINVITEMS(SELF, 0x9352, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x9352, 1);
    CREATEINVITEMS(SELF, 0x9356, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x9356, 1);
    CREATEINVITEMS(SELF, 0x9346, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x9346, 1);
    CREATEINVITEMS(SELF, 0x934a, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x934a, 1);
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_OneOfUs_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Ingolf_OneOfUs_03_05");
    AI_RESETFACEANI(SELF);
    LOG_CREATETOPIC(TOPIC_MONASTERYTEACHER, LOG_NOTE);
    AI_LOGENTRY(TOPIC_MONASTERYTEACHER, LOG_TEACHMONASTERY_INGOLF);
}

instance DIA_INGOLF_TEACHMANA(C_INFO) {
    NPC = 0xdd64;
    NR = 50;
    CONDITION = DIA_INGOLF_TEACHMANA_CONDITION;
    INFORMATION = DIA_INGOLF_TEACHMANA_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "Pass me some of your knowledge.";
}

var int INGOLF_CANTEACH = 0;
func int DIA_INGOLF_TEACHMANA_CONDITION() {
    if ((((NPC_KNOWSINFO(OTHER, 0x1387b)) && (!(NPC_KNOWSINFO(OTHER, 0x1384e)))) && ((INGOLF_CANTEACH) == (FALSE))) && ((LOG_GETSTATUS(MIS_Q514)) != (LOG_SUCCESS))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_INGOLF_TEACHMANA_CHOICES() {
    INGOLF_GOLDCOST = 0;
    INFO_CLEARCHOICES(0x1387e);
    INFO_ADDCHOICE(0x1387e, DIALOG_BACK, 0x13885);
    INFO_ADDCHOICE(0x1387e, B_BUILDLEARNSTRING2(PRINT_LEARNMANA1, B_GETLEARNCOSTATTRIBUTE(OTHER, ATR_MANA_MAX, 1), INGOLF_GOLDCOST), 0x13886);
    INFO_ADDCHOICE(0x1387e, B_BUILDLEARNSTRING2(PRINT_LEARNMANA5, B_GETLEARNCOSTATTRIBUTE(OTHER, ATR_MANA_MAX, 5), (INGOLF_GOLDCOST) * (5)), 0x13887);
}

var int DIA_INGOLF_TEACHMANA_CHOICES.INGOLF_GOLDCOST = 0;
func void DIA_INGOLF_TEACHMANA_CHECKLEVEL() {
    if ((HERO.AIVAR[83]) >= (200)) {
        INGOLF_CANTEACH = TRUE;
        INFO_CLEARCHOICES(0x1387e);
    };
    DIA_INGOLF_TEACHMANA_CHOICES();
}

func void DIA_INGOLF_TEACHMANA_INFO() {
    B_SAY(OTHER, SELF, "$MARVIN_TeachMeMystic");
    DIA_INGOLF_TEACHMANA_CHOICES();
}

func void DIA_INGOLF_TEACHMANA_BACK() {
    INFO_CLEARCHOICES(0x1387e);
}

func void DIA_INGOLF_TEACHMANA1() {
    B_TEACHATTRIBUTEPOINTS(SELF, OTHER, ATR_MANA_MAX, 1, 200);
    DIA_INGOLF_TEACHMANA_CHECKLEVEL();
}

func void DIA_INGOLF_TEACHMANA5() {
    B_TEACHATTRIBUTEPOINTS(SELF, OTHER, ATR_MANA_MAX, 5, 200);
    DIA_INGOLF_TEACHMANA_CHECKLEVEL();
}

instance DIA_INGOLF_PICKPOCKET(C_INFO) {
    NPC = 0xdd64;
    NR = 900;
    CONDITION = DIA_INGOLF_PICKPOCKET_CONDITION;
    INFORMATION = DIA_INGOLF_PICKPOCKET_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = PICKPOCKET_80;
}

func int DIA_INGOLF_PICKPOCKET_CONDITION() {
    if ((((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (1)) && ((SELF.AIVAR[6]) == (FALSE))) && ((LOG_GETSTATUS(MIS_Q514)) != (LOG_SUCCESS))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_INGOLF_PICKPOCKET_INFO() {
    INFO_CLEARCHOICES(0x13888);
    INFO_ADDCHOICE(0x13888, DIALOG_BACK, 0x1388c);
    INFO_ADDCHOICE(0x13888, DIALOG_PICKPOCKET, 0x1388b);
}

func void DIA_INGOLF_PICKPOCKET_DOIT() {
    if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (2)) {
        CREATEINVITEMS(SELF, 0x878d, 1);
        B_GIVEINVITEMS(SELF, OTHER, 0x878d, 1);
        B_PICKPOCKET_AMBIENT_TIER_2();
        SELF.AIVAR[6] = TRUE;
        INFO_CLEARCHOICES(0x13888);
    };
    AI_PLAYANI(HERO, T_CANNOTTAKE);
    PRINTSCREEN(PRINT_CANTPICKPOCKETTHISPERSON, -(1), -(1), FONT_SCREEN, 4);
    INFO_CLEARCHOICES(0x13888);
}

func void DIA_INGOLF_PICKPOCKET_BACK() {
    INFO_CLEARCHOICES(0x13888);
}

instance DIA_INGOLF_Q601_LETSGO(C_INFO) {
    NPC = 0xdd64;
    NR = 1;
    CONDITION = DIA_INGOLF_Q601_LETSGO_CONDITION;
    INFORMATION = DIA_INGOLF_Q601_LETSGO_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Then let's go.";
}

func int DIA_INGOLF_Q601_LETSGO_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x13835)) && ((LOG_GETSTATUS(MIS_Q601)) == (LOG_RUNNING))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_INGOLF_Q601_LETSGO_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_WhatHappend_Finally_15_06");
    AI_WAITTILLEND(SELF, OTHER);
    AI_STOPPROCESSINFOS(SELF);
    RUNESTRADE_CHECKBOUGHTRUNES();
    AI_FUNCTION(SELF, 0x13890);
}

func void NOTGER_Q601_TELEPORTMARVIN() {
    FADESCREENTOBLACKF(2, 0x13891, 1000);
}

func void NOTGER_Q601_TELEPORTMARVIN_FADESCREEN() {
    Q601_MARVINTELEPORT = 1;
    WLD_SETTIME(19, 0);
    NPC_EXCHANGEROUTINE(KDW_215_NOTGER, START);
    NPC_EXCHANGEROUTINE(KDW_216_INGOLF, "Q601_TOWER_WAIT");
    NPC_EXCHANGEROUTINE(NOV_203_NOVIZE, START);
    TELEPORTNPCTOWP(0x71b, "PART15_PATH_57");
    TELEPORTNPCTOWP(0xdd64, "PART15_PATH_58");
    Q601_SPAWNWOLFSSON();
    Q601_REMOVEMONSTERS();
    WLD_SENDTRIGGER("KM_Q601_TOWER");
    HERO.AIVAR[4] = FALSE;
    FADESCREENFROMBLACK(2);
}

instance DIA_NOTGER_Q601_TOWER(C_INFO) {
    NPC = 0xdd64;
    NR = 1;
    CONDITION = DIA_NOTGER_Q601_TOWER_CONDITION;
    INFORMATION = DIA_NOTGER_Q601_TOWER_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_NOTGER_Q601_TOWER_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q601)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x13835))) && ((NPC_GETDISTTOWP(SELF, "PART15_PATH_58")) <= (0x7d0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_NOTGER_Q601_TOWER_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Tower_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Tower_03_02");
    AI_STOPPROCESSINFOS(SELF);
    RUNESTRADE_CHECKBOUGHTRUNES();
    SELF.AIVAR[15] = TRUE;
    NPC_EXCHANGEROUTINE(SELF, "Q601_TOWER_GUIDE");
}

instance DIA_NOTGER_Q601_AFTERFIGHT(C_INFO) {
    NPC = 0xdd64;
    NR = 1;
    CONDITION = DIA_NOTGER_Q601_AFTERFIGHT_CONDITION;
    INFORMATION = DIA_NOTGER_Q601_AFTERFIGHT_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_NOTGER_Q601_AFTERFIGHT_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q601)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x13892))) && ((NPC_GETDISTTOWP(SELF, "PART15_PATH_75")) <= (300))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_NOTGER_Q601_AFTERFIGHT_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_AfterFight_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_AfterFight_03_02");
    AI_STOPPROCESSINFOS(SELF);
    RUNESTRADE_CHECKBOUGHTRUNES();
    NPC_EXCHANGEROUTINE(SELF, "Q601_TOWER_GUIDE2");
}

instance DIA_NOTGER_Q601_VILLAGE(C_INFO) {
    NPC = 0xdd64;
    NR = 1;
    CONDITION = DIA_NOTGER_Q601_VILLAGE_CONDITION;
    INFORMATION = DIA_NOTGER_Q601_VILLAGE_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_NOTGER_Q601_VILLAGE_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q601)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x13895))) && ((NPC_GETDISTTOWP(SELF, "PART15_TOWER_LOOKOUT01")) <= (450))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_NOTGER_Q601_VILLAGE_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Village_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Village_03_02");
    AI_STOPPROCESSINFOS(SELF);
    RUNESTRADE_CHECKBOUGHTRUNES();
    NPC_EXCHANGEROUTINE(SELF, "Q601_TOWER_GUIDE3");
}

instance DIA_NOTGER_Q601_DECISION(C_INFO) {
    NPC = 0xdd64;
    NR = 1;
    CONDITION = DIA_NOTGER_Q601_DECISION_CONDITION;
    INFORMATION = DIA_NOTGER_Q601_DECISION_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_NOTGER_Q601_DECISION_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q601)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x13898))) && ((NPC_GETDISTTOWP(SELF, "PART15_TOWER_06")) <= (300))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_NOTGER_Q601_DECISION_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_03_01");
    INFO_CLEARCHOICES(0x1389b);
    INFO_ADDCHOICE(0x1389b, "What thing?", 0x1389e);
}

func void DIA_NOTGER_Q601_DECISION_STEP() {
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Step_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_03_01_A");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_03_01_B");
    INFO_CLEARCHOICES(0x1389b);
    INFO_ADDCHOICE(0x1389b, "Ulryk attacked the city?", 0x138a2);
}

var int NOTGER_Q601_DECISION_WHY = 0;
var int NOTGER_Q601_DECISION_ARMY = 0;
func void DIA_NOTGER_Q601_DECISION_CHOICES() {
    INFO_CLEARCHOICES(0x1389b);
    if (((NOTGER_Q601_DECISION_WHY) == (TRUE)) && ((NOTGER_Q601_DECISION_ARMY) == (TRUE))) {
        if (((LOG_GETSTATUS(MIS_SQ503)) == (0)) && ((Q509_CORTEZVOLFZACKE) == (0))) {
            INFO_ADDCHOICE(0x1389b, "This is not my city. I have no one here. (Escape from the island)", 0x138a9);
        };
        INFO_ADDCHOICE(0x1389b, "I'm sick of fighting and killing. (Wait it out)", 0x138a8);
        INFO_ADDCHOICE(0x1389b, "I know a lot of people from the city. We have to help them somehow!", 0x138a7);
        INFO_ADDCHOICE(0x1389b, "This is the perfect time to bring the Usurer to justice.", 0x138a5);
    };
    if ((NOTGER_Q601_DECISION_WHY) == (FALSE)) {
        INFO_ADDCHOICE(0x1389b, "Why would Ulryk commit treason?", 0x138a3);
    };
    if ((NOTGER_Q601_DECISION_ARMY) == (FALSE)) {
        INFO_ADDCHOICE(0x1389b, "He set off somewhere with most of his unit.", 0x138a4);
    };
}

func void DIA_NOTGER_Q601_DECISION_STEP_ULRYK() {
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Ulryk_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Ulryk_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Ulryk_03_03");
    DIA_NOTGER_Q601_DECISION_CHOICES();
}

func void DIA_NOTGER_Q601_DECISION_STEP_ULRYK_WHY() {
    NOTGER_Q601_DECISION_WHY = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Why_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Why_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Why_03_03");
    DIA_NOTGER_Q601_DECISION_CHOICES();
}

func void DIA_NOTGER_Q601_DECISION_STEP_ULRYK_ARMY() {
    NOTGER_Q601_DECISION_ARMY = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Army_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Army_15_02");
    DIA_NOTGER_Q601_DECISION_CHOICES();
}

func void DIA_NOTGER_Q601_DECISION_STEP_ULRYK_ARMY_VOLKER() {
    Q601_VOLKERMUSTDIE = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Volker_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Volker_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Volker_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Volker_03_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Volker_15_05");
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Volker_15_06");
    INFO_CLEARCHOICES(0x1389b);
    AI_STOPPROCESSINFOS(SELF);
    RUNESTRADE_CHECKBOUGHTRUNES();
    AI_FUNCTION(SELF, 0x138a6);
}

func void NOTGER_Q601_TELEPORTCITY() {
    FADESCREENTOBLACKCHANGEWORLD(1, "ARCHOLOS_ENDGAME.ZEN", "Q602_START");
}

func void DIA_NOTGER_Q601_DECISION_STEP_ULRYK_ARMY_HELP() {
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Help_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Help_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Help_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Help_03_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Help_15_05");
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Help_15_06");
    INFO_CLEARCHOICES(0x1389b);
    AI_STOPPROCESSINFOS(SELF);
    RUNESTRADE_CHECKBOUGHTRUNES();
    AI_FUNCTION(SELF, 0x138a6);
}

func void DIA_NOTGER_Q601_DECISION_STEP_ULRYK_ARMY_LEAVE() {
    if ((Q305_JAVAD_WENTTONEWHOME) != (2)) {
        Q602_LORENZOISDEAD = TRUE;
    };
    Q601_HIDEENDING = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Leave_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Leave_15_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Leave_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Leave_03_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Leave_15_05");
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Leave_15_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Leave_03_07");
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Leave_15_08");
    INFO_CLEARCHOICES(0x1389b);
    AI_STOPPROCESSINFOS(SELF);
    RUNESTRADE_CHECKBOUGHTRUNES();
    AI_FUNCTION(SELF, 0x16f03);
}

func void DIA_NOTGER_Q601_DECISION_STEP_ULRYK_ARMY_FLEE() {
    if ((Q305_JAVAD_WENTTONEWHOME) != (2)) {
        Q602_LORENZOISDEAD = TRUE;
    };
    Q601_FLEEHAVENENDING = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Flee_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Flee_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Flee_03_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Flee_15_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Notger_Q601_Decision_Flee_15_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Flee_03_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Flee_03_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Flee_03_08");
    AI_OUTPUT(SELF, OTHER, "DIA_Notger_Q601_Decision_Flee_03_09");
    INFO_CLEARCHOICES(0x1389b);
    AI_STOPPROCESSINFOS(SELF);
    RUNESTRADE_CHECKBOUGHTRUNES();
    AI_FUNCTION(SELF, 0x16f03);
}

