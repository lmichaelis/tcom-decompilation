func int CATINV_NEXTNONACTIVEITEM(var int LIST, var int MAX) {
    I = 0;
    WHILE((LIST) && ((I) < (MAX)));
    L = _^(LIST);
    if (HLP_IS_OCITEM(L.DATA)) {
        ITM = _^(L.DATA);
        if (((ITM.FLAGS) & (ITEM_ACTIVE)) != (ITEM_ACTIVE)) {
            BREAK;
        };
        I += 1;
    };
    LIST = L.NEXT;
    END;
    return I;
}

var int CATINV_NEXTNONACTIVEITEM.I = 0;
instance CATINV_NEXTNONACTIVEITEM.L(ZCLISTSORT)
instance CATINV_NEXTNONACTIVEITEM.ITM(C_ITEM)
func int CATINV_LASTNONACTIVEITEM(var int LIST, var int MAX) {
    I = 0;
    J = MAX;
    WHILE((LIST) && ((I) < (MAX)));
    L = _^(LIST);
    if (HLP_IS_OCITEM(L.DATA)) {
        ITM = _^(L.DATA);
        if (((ITM.FLAGS) & (ITEM_ACTIVE)) != (ITEM_ACTIVE)) {
            J = I;
        };
        I += 1;
    };
    LIST = L.NEXT;
    END;
    return J;
}

var int CATINV_LASTNONACTIVEITEM.I = 0;
var int CATINV_LASTNONACTIVEITEM.J = 0;
instance CATINV_LASTNONACTIVEITEM.L(ZCLISTSORT)
instance CATINV_LASTNONACTIVEITEM.ITM(C_ITEM)
func void CATINV_RIGHT() {
    CONTAINER = _^(ESI);
    SWITCHVIEW = 0;
    SELLASTCOL = TRUE;
    if ((CATINV_G1MODE) && (MEM_READINT(OCNPC__GAME_MODE))) {
        SWITCHVIEW = 0;
    };
    if ((MEM_KEYPRESSED(KEY_LSHIFT)) || (MEM_KEYPRESSED(KEY_RSHIFT))) {
        SWITCHVIEW = -(1);
        SELLASTCOL = FALSE;
        DUMP = CATINV_SHIFTCATEGORY(1);
    };
    if (CATINV_CHANGEONLAST) {
        CONTENTS = CONTAINER.CONTENTS;
        if (CALL_BEGIN(CALL)) {
            CALL_PUTRETVALTO(_@(NUMITEMS));
            CALL__THISCALL(_@(CONTENTS), ZCLISTSORT_OCITEM___GETNUMINLIST);
            CALL = CALL_END();
        };
        if (((((CONTAINER.SELECTEDITEM) + (1)) % (CONTAINER.MAXSLOTSCOL)) == (0)) || (((CONTAINER.SELECTEDITEM) + (1)) >= (NUMITEMS))) {
            if ((!(CATINV_G1MODE)) || (CONTAINER.RIGHT)) {
                if (CATINV_SHIFTCATEGORY(1)) {
                    SWITCHVIEW = -(1);
                };
            };
        } else if (CONTAINER.M_BMANIPULATEITEMSDISABLED) {
            COLTOGO = (CONTAINER.MAXSLOTSCOL) - (((CONTAINER.SELECTEDITEM) + (1)) % (CONTAINER.MAXSLOTSCOL));
            LIST = LIST_NODES(CONTAINER.CONTENTS, (((CONTAINER.SELECTEDITEM) + (1)) + (1)) + (1));
            if ((CATINV_NEXTNONACTIVEITEM(LIST, COLTOGO)) == (COLTOGO)) {
                if ((!(CATINV_G1MODE)) || (CONTAINER.RIGHT)) {
                    if (CATINV_SHIFTCATEGORY(1)) {
                        SWITCHVIEW = -(1);
                    };
                };
            };
        };
    };
    if ((SWITCHVIEW) == (-(1))) {
        if (SELLASTCOL) {
            CONTAINER.SELECTEDITEM += ((CONTAINER.MAXSLOTSCOL) - ((CONTAINER.SELECTEDITEM) % (CONTAINER.MAXSLOTSCOL))) - (1);
        };
        MEM_WRITEINT((ESP) + (12), CONTAINER.SELECTEDITEM);
        MEM_WRITEINT((ESP) + (8), CONTAINER.OFFSET);
        MEM_WRITEBYTE(OCITEMCONTAINER__NEXTITEM_CHECK1, ASMINT_OP_NOP);
        MEM_WRITEBYTE((OCITEMCONTAINER__NEXTITEM_CHECK1) + (1), ASMINT_OP_JMP);
        MEM_WRITEBYTE(OCITEMCONTAINER__NEXTITEM_CHECK2, 132);
    };
    if ((SWITCHVIEW) == (1)) {
        MEM_WRITEBYTE(OCITEMCONTAINER__NEXTITEM_CHECK1, 235);
        MEM_WRITEBYTE((OCITEMCONTAINER__NEXTITEM_CHECK1) + (1), 35);
        MEM_WRITEBYTE(OCITEMCONTAINER__NEXTITEM_CHECK2, 133);
    };
    MEM_WRITEBYTE(OCITEMCONTAINER__NEXTITEM_CHECK1, 15);
    MEM_WRITEBYTE((OCITEMCONTAINER__NEXTITEM_CHECK1) + (1), 141);
    MEM_WRITEBYTE(OCITEMCONTAINER__NEXTITEM_CHECK2, 133);
}

instance CATINV_RIGHT.CONTAINER(OCITEMCONTAINER)
var int CATINV_RIGHT.SWITCHVIEW = 0;
var int CATINV_RIGHT.SELLASTCOL = 0;
var int CATINV_RIGHT.DUMP = 0;
var int CATINV_RIGHT.NUMITEMS = 0;
var int CATINV_RIGHT.CONTENTS = 0;
const int CATINV_RIGHT.CALL = 0;
var int CATINV_RIGHT.COLTOGO = 0;
var int CATINV_RIGHT.LIST = 0;
func void CATINV_LEFT() {
    CONTAINER = _^(ESI);
    SWITCHVIEW = 0;
    if ((CATINV_G1MODE) && (MEM_READINT(OCNPC__GAME_MODE))) {
        SWITCHVIEW = 0;
    };
    if ((MEM_KEYPRESSED(KEY_LSHIFT)) || (MEM_KEYPRESSED(KEY_RSHIFT))) {
        SWITCHVIEW = -(1);
        DUMP = CATINV_SHIFTCATEGORY(-(1));
    };
    if (CATINV_CHANGEONLAST) {
        if ((((CONTAINER.SELECTEDITEM) % (CONTAINER.MAXSLOTSCOL)) == (0)) || ((CONTAINER.SELECTEDITEM) <= (0))) {
            if (CATINV_SHIFTCATEGORY(-(1))) {
                SWITCHVIEW = -(1);
            };
        } else if (CONTAINER.M_BMANIPULATEITEMSDISABLED) {
            COLTOGO = (CONTAINER.SELECTEDITEM) - ((CONTAINER.SELECTEDITEM) % (CONTAINER.MAXSLOTSCOL));
            LIST = LIST_NODES(CONTAINER.CONTENTS, ((COLTOGO) + (1)) + (1));
            if (((CATINV_NEXTNONACTIVEITEM(LIST, CONTAINER.SELECTEDITEM)) + (COLTOGO)) == (CONTAINER.SELECTEDITEM)) {
                if (CATINV_SHIFTCATEGORY(-(1))) {
                    SWITCHVIEW = -(1);
                };
            };
        };
    };
    if ((SWITCHVIEW) == (-(1))) {
        MEM_WRITEINT((ESP) + (16), CONTAINER.SELECTEDITEM);
        MEM_WRITEINT((ESP) + (12), CONTAINER.OFFSET);
        MEM_WRITEBYTE(OCITEMCONTAINER__PREVITEM_CHECK1, ASMINT_OP_NOP);
        MEM_WRITEBYTE((OCITEMCONTAINER__PREVITEM_CHECK1) + (1), ASMINT_OP_JMP);
        MEM_WRITEBYTE(OCITEMCONTAINER__PREVITEM_CHECK2, 132);
    };
    if ((SWITCHVIEW) == (1)) {
        MEM_WRITEBYTE(OCITEMCONTAINER__PREVITEM_CHECK1, 235);
        MEM_WRITEBYTE((OCITEMCONTAINER__PREVITEM_CHECK1) + (1), 34);
        MEM_WRITEBYTE(OCITEMCONTAINER__PREVITEM_CHECK2, 133);
    };
    MEM_WRITEBYTE(OCITEMCONTAINER__PREVITEM_CHECK1, 15);
    MEM_WRITEBYTE((OCITEMCONTAINER__PREVITEM_CHECK1) + (1), 142);
    MEM_WRITEBYTE(OCITEMCONTAINER__PREVITEM_CHECK2, 133);
}

instance CATINV_LEFT.CONTAINER(OCITEMCONTAINER)
var int CATINV_LEFT.SWITCHVIEW = 0;
var int CATINV_LEFT.DUMP = 0;
var int CATINV_LEFT.COLTOGO = 0;
var int CATINV_LEFT.LIST = 0;
func int CATINV_SWITCHCONTAINER(var int CONTAINER) {
    if (MEM_READINT(OCNPC__GAME_MODE)) {
        return 0;
    };
    CON = _^(CONTAINER);
    DIR = -(CON.RIGHT);
    if (CALL_BEGIN(CALL)) {
        CALL_INTPARAM(_@(DIR));
        CALL_PUTRETVALTO(_@(RET));
        CALL__THISCALL(_@(CONTAINER), OCITEMCONTAINER__ACTIVATENEXTCONTAINER);
        CALL = CALL_END();
    };
    return +(RET);
}

instance CATINV_SWITCHCONTAINER.CON(OCITEMCONTAINER)
var int CATINV_SWITCHCONTAINER.DIR = 0;
const int CATINV_SWITCHCONTAINER.CALL = 0;
var int CATINV_SWITCHCONTAINER.RET = 0;
func int CATINV_KEYBINDINGISTOGGLED(var int KEYSTROKE, var int KEYBINDING) {
    ZPTR = MEM_READINT(ZCINPUT_ZINPUT);
    if (CALL_BEGIN(CALL)) {
        CALL_INTPARAM(_@(KEYSTROKE));
        CALL_INTPARAM(_@(KEYBINDING));
        CALL_PUTRETVALTO(_@(RET));
        CALL__THISCALL(_@(ZPTR), ZCINPUT__ISBINDEDTOGGLED);
        CALL = CALL_END();
    };
    return +(RET);
}

var int CATINV_KEYBINDINGISTOGGLED.ZPTR = 0;
const int CATINV_KEYBINDINGISTOGGLED.CALL = 0;
var int CATINV_KEYBINDINGISTOGGLED.RET = 0;
func void CATINV_HANDLEEVENT(var int KEYSTROKE, var int CONTAINER) {
    if ((KEYSTROKE) == (KEY_HOME)) {
        if ((MEM_KEYPRESSED(KEY_LSHIFT)) || (MEM_KEYPRESSED(KEY_RSHIFT))) {
            if ((!(CATINV_G1MODE)) || (!(MEM_READINT(OCNPC__GAME_MODE)))) {
                DUMP = CATINV_SETCATEGORYFIRST();
            };
        } else {
            CATINV_SETSELECTIONFIRST(CONTAINER);
        } else {
            /* set_instance(0) */;
        };
    };
    if ((KEYSTROKE) == (KEY_END)) {
        if ((MEM_KEYPRESSED(KEY_LSHIFT)) || (MEM_KEYPRESSED(KEY_RSHIFT))) {
            if ((!(CATINV_G1MODE)) || (!(MEM_READINT(OCNPC__GAME_MODE)))) {
                DUMP = CATINV_SETCATEGORYLAST();
            };
        } else {
            CATINV_SETSELECTIONLAST(CONTAINER);
        } else {
            /* set_instance(0) */;
        };
    };
    if (CATINV_KEYBINDINGISTOGGLED(KEYSTROKE, ZOPT_GAMEKEY_WEAPON)) {
        DUMP = CATINV_SWITCHCONTAINER(CONTAINER);
    };
}

var int CATINV_HANDLEEVENT.DUMP = 0;
func void CATINV_HANDLEEVENTEDI() {
    CATINV_HANDLEEVENT(EDI, ESI);
}

func void CATINV_HANDLEEVENTEBX() {
    if (MEM_READINT((EBP) + (OCVIEWDIALOGTRADE_RIGHT_OFFSET))) {
        VIEWDIAITMCON = MEM_READINT((EBP) + (OCVIEWDIALOGTRADE_CONTAINERRIGHT_OFFSET));
    };
    VIEWDIAITMCON = MEM_READINT((EBP) + (OCVIEWDIALOGTRADE_CONTAINERLEFT_OFFSET));
    CATINV_HANDLEEVENT(EBX, MEM_READINT((VIEWDIAITMCON) + (OCVIEWDIALOGITEMCONTAINER_ITEMCONTAINER_OFFSET)));
}

var int CATINV_HANDLEEVENTEBX.VIEWDIAITMCON = 0;
func void CATINV_HANDLEEVENTNPCINVENTORY() {
    EAX = CATINV_KEYBINDINGISTOGGLED(ESI, ZOPT_GAMEKEY_WEAPON);
    if (EAX) {
        EAX = !(CATINV_SWITCHCONTAINER(EBP));
    };
    if ((ESI) == (KEY_HOME)) {
        if ((MEM_KEYPRESSED(KEY_LSHIFT)) || (MEM_KEYPRESSED(KEY_RSHIFT))) {
            if ((!(CATINV_G1MODE)) || (!(MEM_READINT(OCNPC__GAME_MODE)))) {
                EAX = CATINV_SETCATEGORYFIRST();
            };
        } else {
            CATINV_SETSELECTIONFIRST(EBP);
        } else {
            EAX = 0;
        } else {
            /* set_instance(0) */;
        };
    };
    if ((ESI) == (KEY_END)) {
        if ((MEM_KEYPRESSED(KEY_LSHIFT)) || (MEM_KEYPRESSED(KEY_RSHIFT))) {
            if ((!(CATINV_G1MODE)) || (!(MEM_READINT(OCNPC__GAME_MODE)))) {
                EAX = CATINV_SETCATEGORYLAST();
            };
        } else {
            CATINV_SETSELECTIONLAST(EBP);
        } else {
            EAX = 0;
        };
    };
    MEM_WRITEBYTE(OCNPCINVENTORY__HANDLEEVENT_KEYWEAPONJZ, (18) + ((!(EAX)) * (2)));
}

func void CATINV_DELAYMOBCAMERA() {
    if (CALL_BEGIN(CALL)) {
        CALL_INTPARAM(_@(ZOPT_GAMEKEY_WEAPON));
        CALL__THISCALL(_@(ECX), ZCINPUT_WIN32__GETSTATE);
        CALL_PUTRETVALTO(_@(EAX));
        CALL__CDECL(__FTOL);
        CALL = CALL_END();
    };
    if (!(EAX)) {
        TIMER = 0;
    };
    if ((TIMER) < (500)) {
        EAX = 0;
        TIMER += MEM_TIMER.FRAMETIME;
    };
}

const int CATINV_DELAYMOBCAMERA.CALL = 0;
var int CATINV_DELAYMOBCAMERA.TIMER = 0;
func void CATINV_CLAMPCATEGORY() {
    CONTAINER = _^(ESI);
    ITM = _^(ECX);
    EAX = 0;
    if (!(CONTAINER.M_BMANIPULATEITEMSDISABLED)) {
        return;
    };
    if (((ITM.FLAGS) & (ITEM_ACTIVE)) != (ITEM_ACTIVE)) {
        return;
    };
    LIST = LIST_NODES(CONTAINER.CONTENTS, ((CONTAINER.SELECTEDITEM) + (1)) + (1));
    NUMITEMS = LIST_LENGTHS(LIST);
    IPOS = CATINV_NEXTNONACTIVEITEM(LIST, NUMITEMS);
    if ((IPOS) != (NUMITEMS)) {
        CONTAINER.SELECTEDITEM += IPOS;
        return;
    };
    LIST = LIST_NODES(CONTAINER.CONTENTS, (1) + (1));
    IPOS = CATINV_LASTNONACTIVEITEM(LIST, CONTAINER.SELECTEDITEM);
    if ((IPOS) != (CONTAINER.SELECTEDITEM)) {
        CONTAINER.SELECTEDITEM = IPOS;
        return;
    };
    CONTAINER.SELECTEDITEM = -(1);
}

instance CATINV_CLAMPCATEGORY.CONTAINER(OCITEMCONTAINER)
instance CATINV_CLAMPCATEGORY.ITM(C_ITEM)
var int CATINV_CLAMPCATEGORY.LIST = 0;
var int CATINV_CLAMPCATEGORY.NUMITEMS = 0;
var int CATINV_CLAMPCATEGORY.IPOS = 0;
