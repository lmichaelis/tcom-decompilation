instance DIA_MIL_FMQ002(C_INFO) {
    NR = 3;
    CONDITION = DIA_MIL_FMQ002_CONDITION;
    INFORMATION = DIA_MIL_FMQ002_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Roderich told me to get myself a sword. Any ideas?";
}

func int DIA_MIL_FMQ002_CONDITION() {
    if (((LOG_GETSTATUS(MIS_FMQ002)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x101e7))) {
        if ((FMQ002_KNOWSODGAR) == (0)) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_MIL_FMQ002_INFO() {
    FMQ002_KNOWSODGAR = 1;
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_FMQ002_15_01");
    B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_04_02");
    AI_LOGENTRY(TOPIC_FMQ002, LOG_FMQ002_ODGAR);
}

instance DIA_MIL_FMQ002_CANUSHOW(C_INFO) {
    NR = 1;
    CONDITION = DIA_MIL_FMQ002_CANUSHOW_CONDITION;
    INFORMATION = DIA_MIL_FMQ002_CANUSHOW_INFO;
    PERMANENT = TRUE;
    IMPORTANT = FALSE;
    DESCRIPTION = "Could I see your sword?";
}

func int DIA_MIL_FMQ002_CANUSHOW_CONDITION() {
    if (((LOG_GETSTATUS(MIS_FMQ002)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x101e7))) {
        if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_SMITH)) > (0)) {
            if ((FMQ002_NN_ABOUTSCHEME) == (FALSE)) {
                if ((SELF.AIVAR[93]) <= (WLD_GETDAY())) {
                    return TRUE;
                };
            };
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_MIL_FMQ002_CANUSHOW_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_FMQ002_CanUShow_15_01");
    if ((NPC_HASITEMS(SELF, 0x9a8c)) >= (1)) {
        B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_YouIdiot_04_01");
    };
    B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_CanUShow_04_02");
    INFO_CLEARCHOICES(0xa52d);
    INFO_ADDCHOICE(0xa52d, "Come on, don't talk.", 0xa530);
    INFO_ADDCHOICE(0xa52d, "I need one to be a guard.", 0xa531);
    INFO_ADDCHOICE(0xa52d, "I would like to learn about its construction so I can forge one myself.", 0xa532);
    SELF.AIVAR[93] = (WLD_GETDAY()) + (1);
}

func void DIA_MIL_FMQ002_CANUSHOW_RUDE() {
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_FMQ002_CanUShow_Rude_15_03");
    B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_CanUShow_Rude_04_04");
    INFO_CLEARCHOICES(0xa52d);
    AI_STOPPROCESSINFOS(SELF);
}

func void DIA_MIL_FMQ002_NEEDSWORD() {
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_FMQ002_NeedSword_15_01");
    B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_NeedSword_04_02");
    B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_NeedSword_04_03");
    INFO_CLEARCHOICES(0xa52d);
    INFO_ADDCHOICE(0xa52d, "Come on, don't talk.", 0xa530);
    INFO_ADDCHOICE(0xa52d, "I would like to learn about its construction so I can forge one myself.", 0xa532);
}

func void DIA_MIL_FMQ002_SWORDSCHEME() {
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_FMQ002_SwordScheme_15_01");
    B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_SwordScheme_04_02");
    INFO_CLEARCHOICES(0xa52d);
    INFO_ADDCHOICE(0xa52d, "You have to trust me, I want to join you.", 0xa533);
    INFO_ADDCHOICE(0xa52d, "How about I give you a few gold pieces as collateral?", 0xa534);
}

func void DIA_MIL_FMQ002_SWORDSCHEME_WANTTOJOIN() {
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_FMQ002_WantToJoin_15_01");
    B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_WantToJoin_04_02");
    INFO_CLEARCHOICES(0xa52d);
}

func void DIA_MIL_FMQ002_SWORDSCHEME_HAVEGOLD() {
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_FMQ002_HaveGold_15_01");
    B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_HaveGold_04_02");
    INFO_CLEARCHOICES(0xa52d);
    INFO_ADDCHOICE(0xa52d, "Forget it.", 0xa535);
    if ((NPC_HASITEMS(OTHER, 0x859b)) >= (FMQ002_GOLDFORSWORD)) {
        INFO_ADDCHOICE(0xa52d, DIALOG_AGREE50G, 0xa536);
    };
}

func void DIA_MIL_FMQ002_SWORDSCHEME_NO() {
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_FMQ002_SwordScheme_No_15_01");
    B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_SwordScheme_No_04_02");
    INFO_CLEARCHOICES(0xa52d);
}

func void DIA_MIL_FMQ002_SWORDSCHEME_YES() {
    AI_UNEQUIPWEAPONS(SELF);
    B_GIVEINVITEMS(OTHER, SELF, 0x859b, FMQ002_GOLDFORSWORD);
    B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_SwordScheme_Yes_04_01");
    AI_REMOVEWEAPON(OTHER);
    CREATEINVITEM(SELF, 0x8cc0);
    B_GIVEINVITEMS(SELF, OTHER, 0x8cc0, 1);
    AI_USEITEMTOSTATE(OTHER, 0x8cc0, 1);
    AI_WAIT(OTHER, 0x41700000);
    INFO_CLEARCHOICES(0xa52d);
    INFO_ADDCHOICE(0xa52d, "(Give up the sword)", 0xa537);
}

func void DIA_MIL_FMQ002_SWORDSCHEME_CHECKOUT() {
    FMQ002_KNOWSSCHEME = 1;
    FMQ002_NN_ABOUTSCHEME = TRUE;
    FMQ002_KNOWSREALSCHEME = 1;
    if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_SMITH)) >= (2)) {
        LEARNWEAPONRECIPE(0x9398);
    };
    LEARNWEAPONRECIPE(0x938e);
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_FMQ002_SwordScheme_Yes_15_02");
    B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_SwordScheme_Yes_04_03");
    NPC_REMOVEINVITEM(SELF, 0x8cc0);
    AI_LOGENTRY(TOPIC_FMQ002, LOG_FMQ002_SHOWSWORD);
    B_GIVEINVITEMS(OTHER, SELF, 0x8cc0, 1);
    INFO_CLEARCHOICES(0xa52d);
    B_GIVEINVITEMS(SELF, OTHER, 0x859b, FMQ002_MISSINGGOLD);
    INFO_ADDCHOICE(0xa52d, "Thanks for your help.", 0xa538);
    INFO_ADDCHOICE(0xa52d, "Hey! Give me the rest!", 0xa539);
}

func void DIA_MIL_FMQ002_SWORDSCHEME_THANKS() {
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_FMQ002_SwordScheme_Thanks_15_01");
    B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_SwordScheme_Thanks_04_02");
    INFO_CLEARCHOICES(0xa52d);
}

func void DIA_MIL_FMQ002_SWORDSCHEME_MISSINGGOLD() {
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_FMQ002_SwordScheme_MissingGold_15_01");
    B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_SwordScheme_MissingGold_04_02");
    B_SAY(SELF, OTHER, "$DIA_MIL_FMQ002_SwordScheme_MissingGold_04_03");
    INFO_CLEARCHOICES(0xa52d);
}

instance DIA_MIL_LENNARTLOOKINGFORUS(C_INFO) {
    NR = 1;
    CONDITION = DIA_MIL_LENNARTLOOKINGFORUS_CONDITION;
    INFORMATION = DIA_MIL_LENNARTLOOKINGFORUS_INFO;
    PERMANENT = TRUE;
    IMPORTANT = TRUE;
}

func int DIA_MIL_LENNARTLOOKINGFORUS_CONDITION() {
    if ((HERO.GUILD) == (GIL_MIL)) {
        if ((OTHER.AIVAR[93]) <= (WLD_GETDAY())) {
            if ((((KAPITEL) >= (3)) && ((LOG_GETSTATUS(MIS_QM201)) == (LOG_SUCCESS))) && ((NPC_KNOWSINFO(OTHER, 0x10c5b)) == (FALSE))) {
                return TRUE;
            };
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_MIL_LENNARTLOOKINGFORUS_INFO() {
    AMBIENT_ASKWHOYOUARE();
    B_SAY(SELF, OTHER, "$GUILDAMBIENT_Militia_LennartLooking");
    OTHER.AIVAR[93] = (WLD_GETDAY()) + (1);
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_MIL_RODERICHLOOKINGFORUS(C_INFO) {
    NR = 1;
    CONDITION = DIA_MIL_RODERICHLOOKINGFORUS_CONDITION;
    INFORMATION = DIA_MIL_RODERICHLOOKINGFORUS_INFO;
    PERMANENT = TRUE;
    IMPORTANT = TRUE;
}

func int DIA_MIL_RODERICHLOOKINGFORUS_CONDITION() {
    if ((HERO.GUILD) == (GIL_MIL)) {
        if ((OTHER.AIVAR[93]) <= (WLD_GETDAY())) {
            if ((((((((((KAPITEL) == (5)) && ((NPC_KNOWSINFO(OTHER, 0x1028b)) == (FALSE))) || ((((((LOG_GETSTATUS(MIS_QM201)) == (LOG_SUCCESS)) && ((LOG_GETSTATUS(MIS_QM303)) == (LOG_SUCCESS))) && ((QM303_FINISH) == (TRUE))) && ((QM303_FINISH_DAY) <= ((WLD_GETDAY()) - (1)))) && ((NPC_KNOWSINFO(OTHER, 0x102ec)) == (FALSE)))) || ((((((LOG_GETSTATUS(MIS_QM202)) == (LOG_SUCCESS)) && ((LOG_GETSTATUS(MIS_QM304)) == (LOG_SUCCESS))) && ((QM304_FINISH) == (TRUE))) && ((QM304_FINISH_DAY) <= ((WLD_GETDAY()) - (1)))) && ((NPC_KNOWSINFO(OTHER, 0x102ec)) == (FALSE)))) || ((((((((MARVIN_MILITIASPECIALIZATION) == (MILITIA_SPECIALIZATION_NONE)) && ((MARVIN_MILITIASPECIALIZATION_CANJOIN_FIGHTER) == (TRUE))) && ((MARVIN_MILITIASPECIALIZATION_CANJOIN_CROSSBOWMAN) == (FALSE))) && ((LOG_GETSTATUS(MIS_QM201)) == (LOG_SUCCESS))) && ((LOG_GETSTATUS(MIS_QM303)) == (LOG_SUCCESS))) && ((QM303_FINISH) == (TRUE))) && ((QM303_FINISH_DAY) <= ((WLD_GETDAY()) - (1))))) || ((((((((MARVIN_MILITIASPECIALIZATION) == (MILITIA_SPECIALIZATION_NONE)) && ((MARVIN_MILITIASPECIALIZATION_CANJOIN_FIGHTER) == (FALSE))) && ((MARVIN_MILITIASPECIALIZATION_CANJOIN_CROSSBOWMAN) == (TRUE))) && ((LOG_GETSTATUS(MIS_QM202)) == (LOG_SUCCESS))) && ((LOG_GETSTATUS(MIS_QM304)) == (LOG_SUCCESS))) && ((QM304_FINISH) == (TRUE))) && ((QM304_FINISH_DAY) <= ((WLD_GETDAY()) - (1))))) || ((((((((((((MARVIN_MILITIASPECIALIZATION) == (MILITIA_SPECIALIZATION_FIGHTER)) && ((LOG_GETSTATUS(MIS_QM305)) == (LOG_SUCCESS))) && ((LOG_GETSTATUS(MIS_QM401)) == (LOG_SUCCESS))) && ((LOG_GETSTATUS(MIS_KQ402)) == (LOG_SUCCESS))) && ((QM401_FINISH) == (TRUE))) && ((QM401_FINISH_DAY) <= ((WLD_GETDAY()) - (1)))) && ((QM305_FINISH) == (TRUE))) && ((QM305_FINISH_DAY) <= ((WLD_GETDAY()) - (1)))) && ((KQ402_FINISH) == (TRUE))) && ((KQ402_FINISH_DAY) <= ((WLD_GETDAY()) - (1)))) && ((NPC_KNOWSINFO(OTHER, 0x102f9)) == (FALSE)))) || ((((((((((((MARVIN_MILITIASPECIALIZATION) == (MILITIA_SPECIALIZATION_CROSSBOWMAN)) && ((LOG_GETSTATUS(MIS_QM301)) == (LOG_SUCCESS))) && ((LOG_GETSTATUS(MIS_QM401)) == (LOG_SUCCESS))) && ((LOG_GETSTATUS(MIS_KQ402)) == (LOG_SUCCESS))) && ((QM401_FINISH) == (TRUE))) && ((QM401_FINISH_DAY) <= ((WLD_GETDAY()) - (1)))) && ((QM301_FINISH) == (TRUE))) && ((QM301_FINISH_DAY) <= ((WLD_GETDAY()) - (1)))) && ((KQ402_FINISH) == (TRUE))) && ((KQ402_FINISH_DAY) <= ((WLD_GETDAY()) - (1)))) && ((NPC_KNOWSINFO(OTHER, 0x102f9)) == (FALSE)))) || ((((((KAPITEL) == (5)) && ((MARVIN_MILITIASPECIALIZATION) >= (3))) && ((SQ503_GUILDFINALTIER) == (TRUE))) && ((SQ503_GUILDFINALTIER_DAY) <= ((WLD_GETDAY()) - (1)))) && ((NPC_KNOWSINFO(OTHER, 0x102ca)) == (FALSE)))) {
                return TRUE;
            };
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_MIL_RODERICHLOOKINGFORUS_INFO() {
    AMBIENT_ASKWHOYOUARE();
    B_SAY(SELF, OTHER, "$GUILDAMBIENT_Militia_RoderichLooking");
    OTHER.AIVAR[93] = (WLD_GETDAY()) + (1);
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_MIL_RODERICH(C_INFO) {
    NR = 1;
    CONDITION = DIA_MIL_RODERICH_CONDITION;
    INFORMATION = DIA_MIL_RODERICH_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_MIL_RODERICH_CONDITION() {
    if ((((Q404_MARVINFINISHEDMINE) == (2)) && ((LOG_GETSTATUS(MIS_Q402)) == (LOG_RUNNING))) && ((HERO.GUILD) == (GIL_MIL))) {
        if ((Q402_MILITIA_MESSAGE) == (FALSE)) {
            if (!(NPC_KNOWSINFO(OTHER, 0x102a5))) {
                return TRUE;
            };
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_MIL_RODERICH_INFO() {
    B_STANDUP();
    AI_PLAYANI(SELF, "T_STAND_2_MILSTAND_HERO");
    B_SAY(SELF, OTHER, "$DIA_MIL_Roderich_03_01");
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_Roderich_15_02");
    AI_WAITTILLEND(SELF, OTHER);
    AI_PLAYANI(SELF, "T_MILSTAND_2_MILJOIN_HERO");
    B_SAY(SELF, OTHER, "$DIA_MIL_Roderich_03_03");
    B_SAY(SELF, OTHER, "$DIA_MIL_Roderich_03_04");
    INFO_CLEARCHOICES(0xa540);
    INFO_ADDCHOICE(0xa540, "A visitation from the Royal Envoy?", 0xa543);
    INFO_ADDCHOICE(0xa540, "Thank you for reporting.", 0xa546);
}

func void DIA_MIL_RODERICH_WHAT() {
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_Roderich_What_15_01");
    B_SAY(SELF, OTHER, "$DIA_MIL_Roderich_What_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_Roderich_What_15_03");
    AI_WAITTILLEND(SELF, OTHER);
    AI_PLAYANI(SELF, "T_REMOVE_MILJOIN");
    B_SAY(SELF, OTHER, "$DIA_MIL_Roderich_What_03_04");
    INFO_CLEARCHOICES(0xa540);
    AI_STOPPROCESSINFOS(SELF);
    CITYAFTERMINE_MILITIA_LOGENTRY();
}

func void DIA_MIL_MARVIN_GOODBYE() {
    RNGANWSER = HLP_RANDOM(3);
    if ((RNGANWSER) == (0)) {
        AI_OUTPUT(OTHER, SELF, "DIA_MIL_Roderich_Go_15_02");
    };
}

var int DIA_MIL_MARVIN_GOODBYE.RNGANWSER = 0;
func void DIA_MIL_RODERICH_GO() {
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_Roderich_Go_15_01");
    AI_WAITTILLEND(SELF, OTHER);
    AI_PLAYANI(SELF, "T_REMOVE_MILJOIN");
    INFO_CLEARCHOICES(0xa540);
    AI_STOPPROCESSINFOS(SELF);
    CITYAFTERMINE_MILITIA_LOGENTRY();
}

instance DIA_MIL_LATE(C_INFO) {
    NR = 1;
    CONDITION = DIA_MIL_LATE_CONDITION;
    INFORMATION = DIA_MIL_LATE_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_MIL_LATE_CONDITION() {
    if ((((Q402_MARVINISLATE) == (TRUE)) && ((LOG_GETSTATUS(MIS_Q402)) == (LOG_RUNNING))) && ((HERO.GUILD) == (GIL_MIL))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MIL_LATE_INFO() {
    AMBIENT_ASKWHOYOUARE();
    B_SAY(SELF, OTHER, "$DIA_MIL_Late_03_03");
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_Late_15_04");
    AI_STOPPROCESSINFOS(SELF);
    CITYAFTERMINE_MILITIA_LATE_LOGENTRY();
}

instance DIA_MIL_GIVEARMORBACK(C_INFO) {
    NR = 1;
    CONDITION = DIA_MIL_GIVEARMORBACK_CONDITION;
    INFORMATION = DIA_MIL_GIVEARMORBACK_INFO;
    PERMANENT = TRUE;
    IMPORTANT = TRUE;
}

func int DIA_MIL_GIVEARMORBACK_CONDITION() {
    if ((MARVIN_LOSTGUILDMILITA) == (TRUE)) {
        if (NPC_HASGUILDARMORINEQ(HERO, GIL_MIL)) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_MIL_GIVEARMORBACK_INFO() {
    B_SAY(SELF, OTHER, "$DIA_MIL_GiveArmorBack_03_01");
    AI_OUTPUT(OTHER, SELF, "DIA_MIL_GiveArmorBack_15_02");
    if ((MARVIN_LOSTGUILDMILITA) == (TRUE)) {
        B_SAY(SELF, OTHER, "$DIA_MIL_GiveArmorBack_03_04");
        NPC_REMOVEALLGUILDARMORS(HERO, GIL_MIL);
    };
    B_SAY(SELF, OTHER, "$DIA_MIL_GiveArmorBack_03_05");
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_MIL_SQ317_HOMER(C_INFO) {
    NR = 1;
    CONDITION = DIA_MIL_SQ317_HOMER_CONDITION;
    INFORMATION = DIA_MIL_SQ317_HOMER_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_MIL_SQ317_HOMER_CONDITION() {
    if (((LOG_GETSTATUS(MIS_SQ317)) == (LOG_RUNNING)) && ((SQ317_HOMERESCAPED) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_MIL_SQ317_HOMER_INFO() {
    AMBIENT_ASKWHOYOUARE();
    B_SAY(SELF, OTHER, "$DIA_MIL_SQ317_Homer_03_01");
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_SQ317, LOG_SQ317_MILITIA_HOMERINPRISON);
}

func void B_ASSIGNAMBIENTINFOS_MIL_CITY(var C_NPC SLF) {
    DIA_MIL_FMQ002.NPC = HLP_GETINSTANCEID(SLF);
    DIA_MIL_FMQ002_CANUSHOW.NPC = HLP_GETINSTANCEID(SLF);
    DIA_MIL_LENNARTLOOKINGFORUS.NPC = HLP_GETINSTANCEID(SLF);
    DIA_MIL_RODERICHLOOKINGFORUS.NPC = HLP_GETINSTANCEID(SLF);
    DIA_MIL_RODERICH.NPC = HLP_GETINSTANCEID(SLF);
    DIA_MIL_LATE.NPC = HLP_GETINSTANCEID(SLF);
    DIA_MIL_GIVEARMORBACK.NPC = HLP_GETINSTANCEID(SLF);
    DIA_MIL_SQ317_HOMER.NPC = HLP_GETINSTANCEID(SLF);
}

