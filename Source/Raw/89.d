const int FADESCREENVIEWPTR = 0;
var int FADESCREENCURRA = 0;
var int FADEINSCREENSPEED = 0;
var int FADEINFUNC = 0;
var int FADEINFUNCPTR = 0;
var int FADEINDELAY = 0;
var int FADEOUTSCREENSPEED = 0;
var int FADEOUTFUNC = 0;
var int FADEOUTFUNCPTR = 0;
var int FADEOUTDELAY = 0;
var int FADESCREENSTATE = 0;
var int FADESCREENANI = 0;
var int SCREENFADED = 0;
instance HPBAR(OCVIEWSTATUSBAR)
instance FOCUSBAR(OCVIEWSTATUSBAR)
const int FADESCREENWORLDCHANGE = 0;
const string FADESCREENWORLDCHANGENAME = "empty";
const string FADESCREENWORLDCHANGESTART = "empty";
func void FADESCREENINIT() {
    FADESCREENVIEWPTR = VIEWPTR_CREATE(0, 0, 0x2000, 0x2000);
    VIEWPTR_SETTEXTURE(FADESCREENVIEWPTR, "default.tga");
    VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, 0));
    VIEWPTR_TOP(FADESCREENVIEWPTR);
    VIEWPTR_OPEN(FADESCREENVIEWPTR);
    HPBAR = _^(MEM_GAME.HPBAR);
    FOCUSBAR = _^(MEM_GAME.FOCUSBAR);
}

func void FADESCREENTOBLACKF(var int SPEED, var func FNC, var int DELAY) {
    FADEOUTFUNCPTR = MEM_GETFUNCPTR(0x505d);
    FADEOUTFUNC = TRUE;
    FADEOUTSCREENSPEED = SPEED;
    FADEOUTDELAY = DELAY;
    FF_APPLYGT(0x5073);
}

func void FADESCREENTOBLACK(var int SPEED) {
    FADEOUTSCREENSPEED = SPEED;
    FADEOUTFUNC = FALSE;
    FADEOUTDELAY = 0;
    FF_APPLYGT(0x5073);
}

func void FADESCREENTOBLACKCHANGEWORLD(var int SPEED, var string WORLDNAME, var string START) {
    FADEOUTSCREENSPEED = SPEED;
    FADEOUTFUNC = FALSE;
    FADEOUTDELAY = 0;
    FADESCREENWORLDCHANGE = TRUE;
    FADESCREENWORLDCHANGENAME = WORLDNAME;
    FADESCREENWORLDCHANGESTART = START;
    FF_APPLYGT(0x5073);
}

func void FADESCREENTOBLACKCHANGEWORLDF(var int SPEED, var func FNC, var string WORLDNAME, var string START) {
    FADEOUTFUNCPTR = MEM_GETFUNCPTR(0x5067);
    FADEOUTFUNC = TRUE;
    FADEOUTDELAY = 0;
    FADESCREENWORLDCHANGE = TRUE;
    FADESCREENWORLDCHANGENAME = WORLDNAME;
    FADESCREENWORLDCHANGESTART = START;
    FADEOUTSCREENSPEED = SPEED;
    FF_APPLYGT(0x5073);
}

func void FADESCREENFROMBLACKF(var int SPEED, var func FNC, var int DELAY) {
    FADEINFUNCPTR = MEM_GETFUNCPTR(0x506c);
    FADEINFUNC = TRUE;
    FADEINSCREENSPEED = SPEED;
    FADEINDELAY = DELAY;
    FF_APPLYGT(0x5078);
}

func void FADESCREENFROMBLACK(var int SPEED) {
    FADEINSCREENSPEED = SPEED;
    FADEINFUNC = FALSE;
    FADEINDELAY = 0;
    FF_APPLYGT(0x5078);
}

func void FADESCREENCHANGEWORLD() {
    CALL_ZSTRINGPTRPARAM(FADESCREENWORLDCHANGESTART);
    CALL_ZSTRINGPTRPARAM(FADESCREENWORLDCHANGENAME);
    CALL__THISCALL(MEM_INSTTOPTR(0x1685), OCGAME__TRIGGERCHANGELEVEL);
}

func void FADEOUTFINISH() {
    if (FF_ACTIVE(0x5073)) {
        FF_REMOVE(0x5073);
    };
    FADESCREENSTATE = 0;
    SCREENFADED = TRUE;
    if (FADESCREENWORLDCHANGE) {
        HER = HLP_GETNPC(0x71b);
        HER.BITFIELD[0] = (HER.BITFIELD[0]) & (~(OCNPC_BITFIELD0_MOVLOCK));
        SCREENFADED = FALSE;
        FADESCREENWORLDCHANGE = FALSE;
        VIEWPTR_SETALPHAALL(MEM_GAME.HPBAR, 255);
        VIEWPTR_SETALPHAALL(MEM_GAME.FOCUSBAR, 255);
        VIEWPTR_SETALPHAALL(HPBAR.RANGE_BAR, 255);
        VIEWPTR_SETALPHAALL(HPBAR.VALUE_BAR, 255);
        VIEWPTR_SETALPHAALL(FOCUSBAR.RANGE_BAR, 255);
        VIEWPTR_SETALPHAALL(FOCUSBAR.VALUE_BAR, 255);
        FADESCREENCHANGEWORLD();
    };
}

instance FADEOUTFINISH.HER(OCNPC)
func void FADESCREENTOBLACKLOOP() {
    if ((FADESCREENSTATE) == (0)) {
        HER = HLP_GETNPC(0x71b);
        HER.BITFIELD[0] = (HER.BITFIELD[0]) | (OCNPC_BITFIELD0_MOVLOCK);
        VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, 0));
        FADESCREENCURRA = 0;
        FADESCREENSTATE = 1;
        FADESCREENANI = ANIM8_NEW(0, FALSE);
        ANIM8(FADESCREENANI, 255, (FADEOUTSCREENSPEED) * (1000), A8_CONSTANT);
    };
    if ((FADESCREENSTATE) == (1)) {
        FADESCREENCURRA = ANIM8_GET(FADESCREENANI);
        VIEWPTR_SETALPHAALL(MEM_GAME.HPBAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(MEM_GAME.FOCUSBAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(HPBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(HPBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(FOCUSBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(FOCUSBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, FADESCREENCURRA));
        if ((FADESCREENCURRA) >= (255)) {
            if ((FADEOUTFUNC) == (TRUE)) {
                MEM_CALLBYPTR(FADEOUTFUNCPTR);
            };
            ANIM8_DELETE(FADESCREENANI);
            FADESCREENCURRA = 255;
            VIEWPTR_SETALPHAALL(MEM_GAME.HPBAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(MEM_GAME.FOCUSBAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(HPBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(HPBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(FOCUSBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(FOCUSBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, FADESCREENCURRA));
            if ((FADEOUTDELAY) > (0)) {
                FADESCREENSTATE = 3;
                FF_APPLYONCEEXT(0x5071, FADEOUTDELAY, 1);
            } else {
                FADEOUTFINISH();
            };
        };
    };
}

instance FADESCREENTOBLACKLOOP.HER(OCNPC)
func void FADEINFINISH() {
    if (FF_ACTIVE(0x5078)) {
        FF_REMOVE(0x5078);
    };
    FADESCREENSTATE = 0;
    SCREENFADED = FALSE;
    HER = HLP_GETNPC(0x71b);
    HER.BITFIELD[0] = (HER.BITFIELD[0]) & (~(OCNPC_BITFIELD0_MOVLOCK));
}

instance FADEINFINISH.HER(OCNPC)
func void FADESCREENFROMBLACKNOW() {
    FADESCREENCURRA = 0;
    VIEWPTR_SETALPHAALL(MEM_GAME.HPBAR, 255);
    VIEWPTR_SETALPHAALL(MEM_GAME.FOCUSBAR, 255);
    VIEWPTR_SETALPHAALL(HPBAR.RANGE_BAR, 255);
    VIEWPTR_SETALPHAALL(HPBAR.VALUE_BAR, 255);
    VIEWPTR_SETALPHAALL(FOCUSBAR.RANGE_BAR, 255);
    VIEWPTR_SETALPHAALL(FOCUSBAR.VALUE_BAR, 255);
    VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, FADESCREENCURRA));
    FADESCREENSTATE = 0;
    FADEINFINISH();
}

func void FADESCREENFROMBLACKLOOP() {
    if ((FADESCREENSTATE) == (0)) {
        VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, 255));
        FADESCREENCURRA = 255;
        FADESCREENSTATE = 2;
        FADESCREENANI = ANIM8_NEW(255, FALSE);
        ANIM8(FADESCREENANI, 0, (FADEINSCREENSPEED) * (1000), A8_CONSTANT);
    };
    if ((FADESCREENSTATE) == (2)) {
        FADESCREENCURRA = ANIM8_GET(FADESCREENANI);
        VIEWPTR_SETALPHAALL(MEM_GAME.HPBAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(MEM_GAME.FOCUSBAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(HPBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(HPBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(FOCUSBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(FOCUSBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, FADESCREENCURRA));
        if ((FADESCREENCURRA) <= (0)) {
            if ((FADEINFUNC) == (TRUE)) {
                MEM_CALLBYPTR(FADEINFUNCPTR);
            };
            ANIM8_DELETE(FADESCREENANI);
            FADESCREENCURRA = 0;
            VIEWPTR_SETALPHAALL(MEM_GAME.HPBAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(MEM_GAME.FOCUSBAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(HPBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(HPBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(FOCUSBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(FOCUSBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, FADESCREENCURRA));
            if ((FADEINDELAY) > (0)) {
                FADESCREENSTATE = 3;
                FF_APPLYONCEEXT(0x5075, FADEINDELAY, 1);
            } else {
                FADEINFINISH();
            };
        };
    };
}

