instance DIA_JORN_Q102_NOTNOWTOSILBACH(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q102_NOTNOWTOSILBACH_CONDITION;
    INFORMATION = DIA_JORN_Q102_NOTNOWTOSILBACH_INFO;
    IMPORTANT = TRUE;
    PERMANENT = TRUE;
}

func int DIA_JORN_Q102_NOTNOWTOSILBACH_CONDITION() {
    if ((NPC_ISINSTATE(SELF, 0xf09f)) && ((LOG_GETSTATUS(MIS_Q102)) == (LOG_RUNNING))) {
        if ((!(NPC_KNOWSINFO(OTHER, 0x16307))) && ((NPC_GETDISTTOWP(SELF, "PART_13_JORN_RIVER_01")) <= (500))) {
            return FALSE;
        };
        if ((!(NPC_KNOWSINFO(OTHER, 0x1630a))) && ((NPC_GETDISTTOWP(SELF, "PART_13_NAV_57")) <= (500))) {
            return FALSE;
        };
        if ((!(NPC_KNOWSINFO(OTHER, 0x1630d))) && ((NPC_GETDISTTOWP(SELF, "PART_13_NAV_73")) <= (500))) {
            return FALSE;
        };
        if (((!(NPC_KNOWSINFO(OTHER, 0x16313))) && ((NPC_GETDISTTOWP(SELF, "PART_13_HUT_02")) <= (500))) && (Q102_JORNRUINEDHOUSEAUTOTALK)) {
            return FALSE;
        };
        if ((!(NPC_KNOWSINFO(OTHER, 0x16316))) && ((NPC_GETDISTTOWP(SELF, "PART13_PATH_10")) <= (500))) {
            return FALSE;
        };
        if ((NPC_GETDISTTOWP(SELF, "PART_13_NAV_03")) <= (500)) {
            return FALSE;
        };
        if ((JORN_Q102_GUIDETOVILLAGE) == (TRUE)) {
            return FALSE;
        };
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q102_NOTNOWTOSILBACH_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_NotNow_01_00");
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_JORN_Q102_BEACH(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q102_BEACH_CONDITION;
    INFORMATION = DIA_JORN_Q102_BEACH_INFO;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q102_BEACH_CONDITION() {
    if ((Q101_AFTERJUMP) == (TRUE)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q102_BEACH_INFO() {
    Q102_JORNDISTANCELIMIT = TRUE;
    WLD_SENDTRIGGER("Q101_BLOCKCAVE");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_Beach_01_00");
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q102_Beach_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_Beach_01_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q102_Beach_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_Beach_01_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_Beach_01_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_Beach_01_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_Beach_01_07");
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q102_Beach_15_08");
    Q102_BLOCKSILBACH();
    FF_APPLYONCEEXTGT(0xf24b, 0, -(1));
    LOG_SETSTATUS(_@(MIS_Q101), TOPIC_Q101, LOG_SUCCESS);
    LOG_CREATETOPIC(TOPIC_Q102, LOG_MISSION);
    LOG_SETSTATUS(_@(MIS_Q102), TOPIC_Q102, LOG_RUNNING);
    AI_LOGENTRY(TOPIC_Q102, LOG_Q102_BEACH);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "GUIDE00");
    Q102_JORNCHECKRTN = 1;
    B_CHAPTERCHANGE(1, ARCHOLOS_ZEN, TRUE);
}

instance DIA_JORN_Q102_EZEKIEL(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q102_EZEKIEL_CONDITION;
    INFORMATION = DIA_JORN_Q102_EZEKIEL_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q102_EZEKIEL_CONDITION() {
    if ((NPC_GETDISTTOWP(SELF, "PART_13_NAV_03")) <= (500)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q102_EZEKIEL_INFO() {
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_Ezekiel_01_01");
    AI_LOGENTRY(TOPIC_Q102, LOG_Q102_EZEKIEL);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "WAIT");
}

instance DIA_JORN_SQ118_WHYEZEKIEL(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_SQ118_WHYEZEKIEL_CONDITION;
    INFORMATION = DIA_JORN_SQ118_WHYEZEKIEL_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_SQ118_WHYEZEKIEL_CONDITION() {
    if ((Q102_EZEKIELREFUSED) == (1)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_SQ118_WHYEZEKIEL_INFO() {
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_SQ118_WhyEzekiel_01_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_SQ118_WhyEzekiel_15_02");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_SQ118_WhyEzekiel_01_03");
    AI_RESETFACEANI(SELF);
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_Q102, LOG_Q102_JORN_FAILED);
    NPC_EXCHANGEROUTINE(SELF, "GUIDE01");
    Q102_JORNCHECKRTN = 2;
}

instance DIA_JORN_Q102_RIVER(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q102_RIVER_CONDITION;
    INFORMATION = DIA_JORN_Q102_RIVER_INFO;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q102_RIVER_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x162fe)) && ((NPC_GETDISTTOWP(SELF, "PART_13_JORN_RIVER_01")) <= (500))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q102_RIVER_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_River_01_00");
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(NONE_1_JORN, "Guide03");
    Q102_JORNCHECKRTN = 4;
    AI_FUNCTION(SELF, 0xf25c);
}

instance DIA_JORN_Q102_KEEPTOGETHER(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q102_KEEPTOGETHER_CONDITION;
    INFORMATION = DIA_JORN_Q102_KEEPTOGETHER_INFO;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q102_KEEPTOGETHER_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x16307)) && ((NPC_GETDISTTOWP(SELF, "PART_13_NAV_57")) <= (500))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q102_KEEPTOGETHER_INFO() {
    AI_LOGENTRY(TOPIC_Q102, LOG_Q102_KEEPTOGETHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_KeepTogether_01_00");
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q102_KeepTogether_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_KeepTogether_01_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q102_KeepTogether_15_03");
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(NONE_1_JORN, "House01");
    Q102_JORNCHECKRTN = 5;
}

instance DIA_JORN_Q102_RUINEDHOUSE(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q102_RUINEDHOUSE_CONDITION;
    INFORMATION = DIA_JORN_Q102_RUINEDHOUSE_INFO;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q102_RUINEDHOUSE_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x1630a)) && ((NPC_GETDISTTOWP(SELF, "PART_13_NAV_73")) <= (500))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q102_RUINEDHOUSE_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_RuinedHouse_01_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_RuinedHouse_01_01");
    INFO_ADDCHOICE(0x1630d, "What if we find bandits or some wild beast there?", 0x16311);
    INFO_ADDCHOICE(0x1630d, "Good idea.", 0x16312);
}

func void DIA_JORN_Q102_RUINEDHOUSE_COMEON() {
    INFO_CLEARCHOICES(0x1630d);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_RuinedHouse_ComeOn_01_01");
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0xf258);
}

func void DIA_JORN_Q102_RUINEDHOUSE_BANDITS() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q102_RuinedHouse_Bandits_15_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_RuinedHouse_Bandits_01_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q102_RuinedHouse_Bandits_15_02");
    DIA_JORN_Q102_RUINEDHOUSE_COMEON();
}

func void DIA_JORN_Q102_RUINEDHOUSE_GOODIDEA() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q102_RuinedHouse_GoodIdea_15_00");
    DIA_JORN_Q102_RUINEDHOUSE_COMEON();
}

instance DIA_JORN_Q102_MOVEON(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q102_MOVEON_CONDITION;
    INFORMATION = DIA_JORN_Q102_MOVEON_INFO;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q102_MOVEON_CONDITION() {
    if ((NPC_REFUSETALK(SELF)) == (TRUE)) {
        return FALSE;
    };
    if (((NPC_KNOWSINFO(OTHER, 0x1630d)) && ((NPC_REFUSETALK(SELF)) == (FALSE))) && (Q102_JORNRUINEDHOUSEAUTOTALK)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q102_MOVEON_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_MoveOn_01_00");
    CREATEINVITEMS(SELF, 0x84d0, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x84d0, 1);
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q102_MoveOn_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_MoveOn_01_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q102_MoveOn_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_MoveOn_01_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_MoveOn_01_05");
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0xf259);
    AI_FUNCTION(SELF, 0xf25a);
}

instance DIA_JORN_Q102_BLOODFLIES(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q102_BLOODFLIES_CONDITION;
    INFORMATION = DIA_JORN_Q102_BLOODFLIES_INFO;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q102_BLOODFLIES_CONDITION() {
    if (((NPC_KNOWSINFO(OTHER, 0x16307)) && ((NPC_GETDISTTOWP(SELF, "PART13_PATH_10")) <= (500))) && ((Q102_CHANGEJORNRTN_02) == (2))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

var int JORN_Q102_GUIDETOVILLAGE = 0;
func void DIA_JORN_Q102_BLOODFLIES_INFO() {
    JORN_Q102_GUIDETOVILLAGE = TRUE;
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_Bloodflies_01_00");
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q102_Bloodflies_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_Bloodflies_01_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q102_Bloodflies_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_Bloodflies_01_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_Bloodflies_01_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_Bloodflies_01_06");
    AI_LOGENTRY(TOPIC_Q102, LOG_Q102_BLOODFLIES);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(NONE_1_JORN, "Guide05");
}

instance DIA_JORN_Q102_WRONGWAY(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q102_WRONGWAY_CONDITION;
    INFORMATION = DIA_JORN_Q102_WRONGWAY_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q102_WRONGWAY_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q102)) == (LOG_RUNNING)) && ((JORN_Q102_GUIDETOVILLAGE) == (TRUE))) && ((NPC_GETDISTTOWP(SELF, "PART13_PATH_02")) >= (0x1d4c))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q102_WRONGWAY_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_WrongWay_01_01");
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_JORN_Q102_CHANGELEAD(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q102_CHANGELEAD_CONDITION;
    INFORMATION = DIA_JORN_Q102_CHANGELEAD_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q102_CHANGELEAD_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q102)) == (LOG_RUNNING)) && ((JORN_Q102_GUIDETOVILLAGE) == (TRUE))) && ((NPC_GETDISTTOWP(SELF, "PART13_PATH_02")) >= (0x2008))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q102_CHANGELEAD_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q102_ChangeLead_01_01");
    NPC_EXCHANGEROUTINE(SELF, "Q102_ToSilbach01");
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_JORN_Q103_VILLAGE(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q103_VILLAGE_CONDITION;
    INFORMATION = DIA_JORN_Q103_VILLAGE_INFO;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q103_VILLAGE_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q103)) == (LOG_RUNNING)) && ((HARRYGATETESTPASSED) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q103_VILLAGE_INFO() {
    if ((LOG_GETSTATUS(MIS_Q102)) == (LOG_RUNNING)) {
        Q102_JORNDISTANCELIMIT = FALSE;
        B_LOGENTRY(TOPIC_Q102, LOG_Q102_REACHSILBACH);
        LOG_SETSTATUS(_@(MIS_Q102), TOPIC_Q102, LOG_SUCCESS);
        Q102_FIRSTTIMEINSILBACH = TRUE;
    };
    JORN_Q102_GUIDETOVILLAGE = FALSE;
    NONE_1_JORN.FIGHT_TACTIC = FAI_HUMAN_STRONG;
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Village_01_00");
    AI_LOGENTRY(TOPIC_Q103, LOG_Q103_GOTOTAVERN);
    NPC_EXCHANGEROUTINE(SELF, "ToSilbachPub");
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_JORN_Q103_PUB(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q103_PUB_CONDITION;
    INFORMATION = DIA_JORN_Q103_PUB_INFO;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q103_PUB_CONDITION() {
    if (((((LOG_GETSTATUS(MIS_Q103)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x16320))) && ((NPC_GETDISTTOWP(SELF, "VILLAGE_PUB_ENTRY")) <= (700))) && ((Q102_CHANGEJORNRTN_04) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q103_PUB_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Pub_01_00");
    if ((Q101_FABIOFIGHT) != (0)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Pub_01_01");
        AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Pub_01_02");
    };
    INFO_CLEARCHOICES(0x16323);
    INFO_ADDCHOICE(0x16323, "If they start provoking me...", 0x16327);
    INFO_ADDCHOICE(0x16323, "I'll try.", 0x16328);
}

func void JORN_Q103_TOPUB() {
    NPC_EXCHANGEROUTINE(SELF, "SilbachPub");
    AI_STOPPROCESSINFOS(SELF);
}

func void DIA_JORN_Q103_PUB_FIGHT() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q103_Pub_Fight_15_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Pub_Fight_01_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q103_Pub_Fight_15_02");
    JORN_Q103_TOPUB();
}

func void DIA_JORN_Q103_PUB_WILLTRY() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q103_Pub_WillTry_15_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Pub_WillTry_01_01");
    JORN_Q103_TOPUB();
}

instance DIA_JORN_Q103_HOWAREYOU(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q103_HOWAREYOU_CONDITION;
    INFORMATION = DIA_JORN_Q103_HOWAREYOU_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q103_HOWAREYOU_CONDITION() {
    if (((((LOG_GETSTATUS(MIS_Q103)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x157c0))) && (NPC_ISINSTATE(SELF, 0xf09f))) && ((SILBACHSLEEP) < (2))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q103_HOWAREYOU_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q103_HowAreYou_15_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_HowAreYou_01_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_HowAreYou_01_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_HowAreYou_01_03");
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "SilbachPub2");
}

instance DIA_JORN_Q103_ALLRIGHT(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q103_ALLRIGHT_CONDITION;
    INFORMATION = DIA_JORN_Q103_ALLRIGHT_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q103_ALLRIGHT_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q103)) == (LOG_RUNNING)) && (NPC_ISINSTATE(SELF, 0xf09f))) && (NPC_KNOWSINFO(OTHER, 0x15844))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q103_ALLRIGHT_INFO() {
    AI_STARTFACEANI(OTHER, S_TIRED, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q103_Allright_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Allright_01_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Allright_01_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Allright_01_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Allright_01_05");
    AI_RESETFACEANI(OTHER);
    INFO_CLEARCHOICES(0x1632c);
    INFO_ADDCHOICE(0x1632c, "We split up.", 0x16331);
    INFO_ADDCHOICE(0x1632c, "Did you manage to find our uncle?", 0x16332);
}

func void DIA_JORN_Q103_ALLRIGHT_RESULT() {
    JORN_Q103_RESULT_COUNT = (JORN_Q103_RESULT_COUNT) + (1);
    if ((JORN_Q103_RESULT_COUNT) == (2)) {
        SILBACHSLEEP = TRUE;
        AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Allright_Kurt_01_04");
        AI_LOGENTRY(TOPIC_Q103, LOG_Q103_FABIOWAY_JORNSLEEP);
        INFO_CLEARCHOICES(0x1632c);
        NPC_EXCHANGEROUTINE(SELF, "SilbachPub2");
    };
}

var int DIA_JORN_Q103_ALLRIGHT_RESULT.JORN_Q103_RESULT_COUNT = 0;
func void DIA_JORN_Q103_ALLRIGHT_SPLITUP() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q103_Allright_SplitUp_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Allright_SplitUp_01_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Allright_SplitUp_01_03");
    DIA_JORN_Q103_ALLRIGHT_RESULT();
}

func void DIA_JORN_Q103_ALLRIGHT_KURT() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q103_Allright_Kurt_15_01");
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Allright_Kurt_01_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Allright_Kurt_01_03");
    DIA_JORN_Q103_ALLRIGHT_RESULT();
}

instance DIA_JORN_Q103_FEEL(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q103_FEEL_CONDITION;
    INFORMATION = DIA_JORN_Q103_FEEL_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "How are you feeling today?";
}

func int DIA_JORN_Q103_FEEL_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q103)) == (LOG_RUNNING)) && ((SILBACHSLEEP) == (2))) && ((NPC_KNOWSINFO(OTHER, 0x156ee)) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q103_FEEL_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q103_Feel_15_01");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q103_Feel_01_02");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
}

instance DIA_JORN_Q104_FEEL(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q104_FEEL_CONDITION;
    INFORMATION = DIA_JORN_Q104_FEEL_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q104_FEEL_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q104)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x1568f))) && (NPC_ISINSTATE(SELF, 0xf09f))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q104_FEEL_INFO() {
    AI_STARTFACEANI(OTHER, S_TIRED, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q104_Feel_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q104_Feel_01_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q104_Feel_01_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q104_Feel_01_04");
    AI_RESETFACEANI(OTHER);
    INFO_CLEARCHOICES(0x16336);
    INFO_ADDCHOICE(0x16336, "The village seems quite nice, but its inhabitants not so much.", 0x16339);
    INFO_ADDCHOICE(0x16336, "The Village Elder has agreed to protect us.", 0x1633b);
}

func void DIA_JORN_Q104_FEEL_GOOD() {
    AI_STARTFACEANI(OTHER, S_DOUBT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q104_Feel_Good_15_01");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q104_Feel_Good_01_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q104_Feel_Good_01_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q104_Feel_Good_01_04");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
}

func void DIA_JORN_Q104_ALBYNNEEDHELP() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q104_Feel_Albyn_15_01");
}

func void DIA_JORN_Q104_FEEL_ALBYN() {
    DIA_JORN_Q104_ALBYNNEEDHELP();
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q104_Feel_Albyn_01_02");
    AI_LOGENTRY(TOPIC_Q104, LOG_Q104_JORN_HELP);
    NPC_EXCHANGEROUTINE(SELF, "SilbachPub2");
}

instance DIA_JORN_Q105_START(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q105_START_CONDITION;
    INFORMATION = DIA_JORN_Q105_START_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q105_START_CONDITION() {
    if ((LOG_GETSTATUS(MIS_Q105)) == (LOG_RUNNING)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q105_START_INFO() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Start_01_01");
    AI_FUNCTION(SELF, 0xf26b);
    INFO_CLEARCHOICES(0x1633c);
    INFO_ADDCHOICE(0x1633c, "Shouldn't you be peeling turnips or resting right now?", 0x1633f);
}

func void DIA_JORN_Q105_START_BEET() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_Start_Beet_15_01");
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Start_Beet_01_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Start_Beet_01_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Start_Beet_01_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Start_Beet_01_05");
    INFO_CLEARCHOICES(0x1633c);
    INFO_ADDCHOICE(0x1633c, "Let's think about your health first. You need to recover.", 0x16341);
    INFO_ADDCHOICE(0x1633c, "Yeah, I'm craving a little normalcy too.", 0x16342);
}

func void DIA_JORN_Q105_START_NEXT() {
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Start_Next_01_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Start_Next_01_02");
    AI_LOGENTRY(TOPIC_Q105, LOG_Q105_JORN_LETSGO);
    INFO_CLEARCHOICES(0x1633c);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "Q105_SEEFIGHT");
}

func void DIA_JORN_Q105_START_BEET_HELATH() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_Start_Helath_15_01");
    DIA_JORN_Q105_START_NEXT();
}

func void DIA_JORN_Q105_START_BEET_LETSGO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_Start_LetsGo_15_01");
    DIA_JORN_Q105_START_NEXT();
}

instance DIA_JORN_Q105_FIGHT(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q105_FIGHT_CONDITION;
    INFORMATION = DIA_JORN_Q105_FIGHT_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q105_FIGHT_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q105)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x1633c))) {
        if (((NPC_GETDISTTOWP(SELF, SELF.WP)) <= (300)) || (((NPC_GETDISTTOWP(SELF, SELF.WP)) <= (600)) && (NPC_ISINSTATE(SELF, 0xf09f)))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q105_GOBAKER() {
    Q105_GOTOBAKER = TRUE;
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Fight_GoBaker_01_01");
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_Fight_GoBaker_15_02");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Fight_GoBaker_01_03");
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
    NPC_EXCHANGEROUTINE(SELF, "Q105_SEEBAKER");
    INFO_CLEARCHOICES(0x16343);
    AI_STOPPROCESSINFOS(SELF);
}

func void DIA_JORN_Q105_FIGHT_INFO() {
    if ((Q105_CHANGEJORNRTN) != (1)) {
        Q105_CHANGEJORNRTN = 1;
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Fight_01_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Fight_01_02");
    INFO_CLEARCHOICES(0x16343);
    INFO_ADDCHOICE(0x16343, "If you insist.", 0x16348);
    INFO_ADDCHOICE(0x16343, "I have no intention of fighting with you.", 0x16349);
}

func void Q105_FIGHTWITHJORN_DISABLEEQ() {
    PLAYERLOCKINVENTORY = TRUE;
    EQUIPWEAPON_TOGGLESEQUIP = 0;
    EQUIPWEAPON(NONE_1_JORN, 0x84d0);
    EQUIPWEAPON(HERO, 0x84d0);
    EQUIPWEAPON_TOGGLESEQUIP = 1;
}

func void DIA_JORN_Q105_FIGHT_YES() {
    JORN_Q105_ARENAFIGHT = TRUE;
    AI_STARTFACEANI(OTHER, S_SMUG, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_Fight_Yes_15_01");
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
    SELF.AIVAR[45] = AF_RUNNING;
    SELF.AIVAR[96] = 3;
    SELF.FLAGS = NPC_FLAG_IMPORTANT;
    AI_FUNCTION(SELF, 0x16347);
    INFO_CLEARCHOICES(0x16343);
    AI_WAITTILLEND(SELF, OTHER);
    AI_READYMELEEWEAPON(OTHER);
    AI_READYMELEEWEAPON(SELF);
    AI_PLAYANI(SELF, "T_1HJUMPB");
    AI_PLAYANI(OTHER, "T_1HJUMPB");
    AI_STOPPROCESSINFOS(SELF);
    B_ATTACK(SELF, OTHER, 0, 0);
}

func void DIA_JORN_Q105_FIGHT_NO() {
    AI_STARTFACEANI(OTHER, S_ANGRY, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_Fight_No_15_01");
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Fight_No_01_02");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Fight_No_01_03");
    AI_LOGENTRY(TOPIC_Q105, LOG_Q105_JORN_NOFIGHT);
    DIA_JORN_Q105_GOBAKER();
}

instance DIA_JORN_Q105_AFTERFIGHT(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q105_AFTERFIGHT_CONDITION;
    INFORMATION = DIA_JORN_Q105_AFTERFIGHT_INFO;
    PERMANENT = TRUE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q105_AFTERFIGHT_CONDITION() {
    if (((JORN_Q105_ARENAFIGHT) == (2)) && ((LOG_GETSTATUS(MIS_Q105)) == (LOG_RUNNING))) {
        if (((SELF.AIVAR[64]) == (FALSE)) && ((SELF.AIVAR[0]) != (FIGHT_NONE))) {
            if ((SELF.AIVAR[45]) != (AF_NONE)) {
                return TRUE;
            };
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q105_AFTERFIGHT_INFO() {
    Q105_HEALJORN();
    PLAYERLOCKINVENTORY = FALSE;
    SELF.FLAGS = 2;
    if ((SELF.AIVAR[0]) == (FIGHT_LOST)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_AfterFight_01_01");
    };
    if ((SELF.AIVAR[0]) == (FIGHT_WON)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_AfterFight_01_02");
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_AfterFight_01_03");
    SELF.AIVAR[45] = AF_NONE;
    SELF.AIVAR[64] = TRUE;
    INFO_CLEARCHOICES(0x1634a);
    INFO_ADDCHOICE(0x1634a, "I have always preferred crossbows. (Combat bonus +2%)", 0x16350);
    INFO_ADDCHOICE(0x1634a, "Bowstring and arrows did not let me down. (Combat bonus +2%)", 0x16351);
    INFO_ADDCHOICE(0x1634a, "Nothing like a heavy axe on your back. (Combat bonus +2%)", 0x1634f);
    INFO_ADDCHOICE(0x1634a, "I like lightweight and comfortable weapons. (Combat bonus +2%)", 0x1634e);
}

func void DIA_JORN_Q105_AFTERFIGHT_LOGENTRY() {
    AI_LOGENTRY(TOPIC_Q105, LOG_Q105_JORN_AFTERFIGHT);
    DIA_JORN_Q105_GOBAKER();
}

func void DIA_JORN_Q105_AFTERFIGHT_SWORD() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_AfterFight_15_04");
    B_RAISEFIGHTTALENT(OTHER, NPC_TALENT_1H, 2);
    PRINTSCREEN(PRINT_LEARN1H2, -(1), -(1), FONT_SCREEN, 2);
    DIA_JORN_Q105_AFTERFIGHT_LOGENTRY();
}

func void DIA_JORN_Q105_AFTERFIGHT_AXE() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_AfterFight_15_05");
    B_RAISEFIGHTTALENT(OTHER, NPC_TALENT_2H, 2);
    PRINTSCREEN(PRINT_LEARN2H2, -(1), -(1), FONT_SCREEN, 2);
    DIA_JORN_Q105_AFTERFIGHT_LOGENTRY();
}

func void DIA_JORN_Q105_AFTERFIGHT_CROSSBOW() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_AfterFight_15_07");
    B_RAISEFIGHTTALENT(OTHER, NPC_TALENT_CROSSBOW, 2);
    PRINTSCREEN(PRINT_LEARNCROSSBOW2, -(1), -(1), FONT_SCREEN, 2);
    DIA_JORN_Q105_AFTERFIGHT_LOGENTRY();
}

func void DIA_JORN_Q105_AFTERFIGHT_BOW() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_AfterFight_15_06");
    B_RAISEFIGHTTALENT(OTHER, NPC_TALENT_BOW, 2);
    PRINTSCREEN(PRINT_LEARNBOW2, -(1), -(1), FONT_SCREEN, 2);
    DIA_JORN_Q105_AFTERFIGHT_LOGENTRY();
}

instance DIA_JORN_Q105_LEAVEBAKER(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q105_LEAVEBAKER_CONDITION;
    INFORMATION = DIA_JORN_Q105_LEAVEBAKER_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q105_LEAVEBAKER_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 0x15adf)) && ((LOG_GETSTATUS(MIS_Q105)) == (LOG_RUNNING))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q105_STEALBREAD_END() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_StealBread_End_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_StealBread_End_01_02");
    AI_LOGENTRY(TOPIC_Q105, LOG_Q105_JORN_BAKER);
    AI_STOPLOOKAT(OTHER);
    NPC_EXCHANGEROUTINE(SELF, "Q105_RUNTOHUT");
    B_STARTOTHERROUTINE(BAU_719_BAKER, START);
    NPC_REFRESH(BAU_719_BAKER);
    AI_STOPPROCESSINFOS(SELF);
}

func void DIA_JORN_Q105_LEAVEBAKER_INFO() {
    if ((Q105_CHANGEJORNRTN) != (2)) {
        Q105_CHANGEJORNRTN = 2;
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_LeaveBaker_01_00");
    DIA_JORN_Q105_STEALBREAD_END();
}

instance DIA_JORN_Q105_STEALBREAD(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q105_STEALBREAD_CONDITION;
    INFORMATION = DIA_JORN_Q105_STEALBREAD_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q105_STEALBREAD_CONDITION() {
    return FALSE;
}

func void DIA_JORN_Q105_STEALBREAD_GIVE() {
    CREATEINVITEMS(NONE_1_JORN, 0x84b2, 2);
    B_GIVEINVITEMS(NONE_1_JORN, HERO, 0x84b2, 1);
}

func void DIA_JORN_Q105_STEALBREAD_INFO() {
    DIACAM_DISABLE();
    WLD_SENDTRIGGER("KM_BREAD");
    TELEPORTNPCTOWP(0xc8ef, "VILLAGE_Q105_STEALBREAD_JORN");
    TELEPORTNPCTOWP(0x71b, "VILLAGE_Q105_STEALBREAD_HERO");
    AI_TURNTONPC(SELF, OTHER);
    AI_TURNTONPC(OTHER, SELF);
    AI_LOOKATNPC(OTHER, SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_StealBread_01_00");
    AI_WAITTILLEND(OTHER, SELF);
    AI_WAITTILLEND(SELF, OTHER);
    AI_GOTOWP(SELF, "VILLAGE_HOUSE_06_PATH02");
    AI_PLAYANI(SELF, T_PLUNDER);
    AI_TURNTONPC(SELF, BAU_724_PAULUS);
    AI_GOTOWP(SELF, SELF.WP);
    AI_WAIT(OTHER, 0x4019999a);
    AI_TURNTONPC(OTHER, BAU_719_BAKER);
    AI_PLAYANI(OTHER, R_SCRATCHHEAD);
    AI_WAITTILLEND(OTHER, SELF);
    AI_WAITTILLEND(SELF, OTHER);
    AI_TURNTONPC(SELF, OTHER);
    AI_TURNTONPC(OTHER, SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_StealBread_01_01");
    AI_FUNCTION(SELF, 0x16358);
    AI_STOPLOOKAT(SELF);
    AI_USEITEM(SELF, 0x84b2);
    INFO_CLEARCHOICES(0x16356);
    INFO_ADDCHOICE(0x16356, "Why did you rob this man?", 0x1635b);
    INFO_ADDCHOICE(0x16356, "(Eat bread)", 0x1635c);
}

func void DIA_JORN_Q105_STEALBREAD_STOPCAMERA() {
    WLD_SENDUNTRIGGER("KM_BREAD");
    DIACAM_ENABLE();
}

func void DIA_JORN_Q105_STEALBREAD_WHY() {
    DIA_JORN_Q105_STEALBREAD_STOPCAMERA();
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_StealBread_Why_15_00");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_StealBread_Why_01_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_StealBread_Why_01_02");
    DIA_JORN_Q105_STEALBREAD_END();
}

func void DIA_JORN_Q105_STEALBREAD_EAT() {
    DIA_JORN_Q105_STEALBREAD_STOPCAMERA();
    AI_USEITEM(OTHER, 0x84b2);
    AI_WAITTILLEND(SELF, OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_StealBread_Eat_01_01");
    DIA_JORN_Q105_STEALBREAD_END();
}

instance DIA_JORN_Q105_BEERS(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q105_BEERS_CONDITION;
    INFORMATION = DIA_JORN_Q105_BEERS_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q105_BEERS_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q105)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x16352))) {
        if (((NPC_GETDISTTOWP(SELF, SELF.WP)) <= (350)) || (((NPC_GETDISTTOWP(SELF, SELF.WP)) <= (500)) && (NPC_ISINSTATE(SELF, 0xf09f)))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q105_BEERS_INFO() {
    if ((Q105_CHANGEJORNRTN) != (3)) {
        Q105_CHANGEJORNRTN = 3;
    };
    Q105_SEARCHINGBEER = 1;
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Beers_01_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Beers_01_02");
    AI_LOGENTRY(TOPIC_Q105, LOG_Q105_GOBOTTLES);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "Q105_RIVER");
    Q104_GOTOWORK();
}

instance DIA_JORN_Q105_NOBEER(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q105_NOBEER_CONDITION;
    INFORMATION = DIA_JORN_Q105_NOBEER_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "All the wine bottles are empty.";
}

func int DIA_JORN_Q105_NOBEER_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q105)) == (LOG_RUNNING)) && ((Q105_SEARCHINGBEER) == (2))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q105_NOBEER_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_NoBeer_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_NoBeer_01_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_NoBeer_01_03");
    AI_LOGENTRY(TOPIC_Q105, LOG_Q105_NOWKURT);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "Q105_KURTHOUSE");
}

instance DIA_JORN_Q105_KURTHOUSE(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q105_KURTHOUSE_CONDITION;
    INFORMATION = DIA_JORN_Q105_KURTHOUSE_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q105_KURTHOUSE_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q105)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x16360))) {
        if (((NPC_GETDISTTOWP(SELF, SELF.WP)) <= (350)) || (((NPC_GETDISTTOWP(SELF, SELF.WP)) <= (500)) && (NPC_ISINSTATE(SELF, 0xf09f)))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q105_KURTHOUSE_INFO() {
    if ((Q105_CHANGEJORNRTN) != (4)) {
        Q105_CHANGEJORNRTN = 4;
    };
    Q105_PREPAREMEAL = 1;
    AI_PLAYANI(SELF, T_SEARCH);
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_KurtHouse_01_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_KurtHouse_01_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_KurtHouse_01_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_KurtHouse_01_04");
    CREATEINVITEMS(SELF, 0x85f2, 2);
    B_GIVEINVITEMS(SELF, OTHER, 0x85f2, 2);
    CREATEINVITEMS(SELF, 0x8c1b, 1);
    B_GIVEINVITEMS(SELF, OTHER, 0x8c1b, 1);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_KurtHouse_01_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_KurtHouse_01_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_KurtHouse_01_07");
    NPC_EXCHANGEROUTINE(SELF, "Q105_SEARCH");
    AI_LOGENTRY(TOPIC_Q105, LOG_Q105_JORN_COOKING);
}

instance DIA_JORN_Q105_WHEREKURT(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q105_WHEREKURT_CONDITION;
    INFORMATION = DIA_JORN_Q105_WHEREKURT_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Where's Kurt?";
}

func int DIA_JORN_Q105_WHEREKURT_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q105)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 0x16363))) && ((Q105_PREPAREMEAL) < (3))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q105_WHEREKURT_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_WhereKurt_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_WhereKurt_01_02");
    AI_RESETFACEANI(OTHER);
}

instance DIA_JORN_Q105_CHEST(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q105_CHEST_CONDITION;
    INFORMATION = DIA_JORN_Q105_CHEST_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q105_CHEST_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q105)) == (LOG_RUNNING)) && ((NPC_HASITEMS(OTHER, 0x8f12)) >= (1))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q105_CHEST_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Chest_01_01");
    B_GIVEINVITEMS(OTHER, SELF, 0x8f12, 1);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Chest_01_02");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Chest_01_03");
    INFO_CLEARCHOICES(0x16369);
    INFO_ADDCHOICE(0x16369, "We'll rob our own uncle?", 0x1636e);
    INFO_ADDCHOICE(0x16369, "Will you show me how to open chests?", 0x1636f);
}

func void JORN_Q105_TEACHLOCKPICKING() {
    B_TEACHTHIEFTALENT(NONE_1_JORN, HERO, NPC_TALENT_PICKLOCK, 1);
}

func void DIA_JORN_Q105_CHEST_NEXT() {
    Q105_OPENCHEST = 1;
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Chest_Next_01_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Chest_Next_01_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Chest_Next_01_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Chest_Next_01_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Chest_Next_01_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Chest_Next_01_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Chest_Next_01_07");
    AI_FUNCTION(SELF, 0x1636c);
    INFO_CLEARCHOICES(0x16369);
    AI_LOGENTRY(TOPIC_Q105, LOG_Q105_JORN_TEACHCHEST);
    CREATEINVITEMS(SELF, 0x84ca, 6);
    B_GIVEINVITEMS(SELF, OTHER, 0x84ca, 6);
    NPC_EXCHANGEROUTINE(SELF, "Q105_TEACH");
}

func void DIA_JORN_Q105_CHEST_STEAL() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_Chest_Steal_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Chest_Steal_01_02");
    DIA_JORN_Q105_CHEST_NEXT();
}

func void DIA_JORN_Q105_CHEST_OPEN() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_Chest_Open_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_Chest_Open_01_02");
    DIA_JORN_Q105_CHEST_NEXT();
}

instance DIA_JORN_SQ105_NOMOREPICKLOCK(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_SQ105_NOMOREPICKLOCK_CONDITION;
    INFORMATION = DIA_JORN_SQ105_NOMOREPICKLOCK_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I'm out of lock picks.";
}

func int DIA_JORN_SQ105_NOMOREPICKLOCK_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_Q105)) == (LOG_RUNNING)) && ((Q105_OPENCHEST) == (1))) && ((NPC_HASITEMS(OTHER, 0x84ca)) == (0))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_SQ105_NOMOREPICKLOCK_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_SQ105_NoMorePicklock_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_SQ105_NoMorePicklock_03_02");
    CREATEINVITEMS(SELF, 0x84ca, 6);
    B_GIVEINVITEMS(SELF, OTHER, 0x84ca, 6);
}

instance DIA_JORN_Q105_LETSDRINK(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q105_LETSDRINK_CONDITION;
    INFORMATION = DIA_JORN_Q105_LETSDRINK_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q105_LETSDRINK_CONDITION() {
    if (((((LOG_GETSTATUS(MIS_Q105)) == (LOG_RUNNING)) && ((Q105_OPENCHEST) == (2))) && ((NPC_HASITEMS(OTHER, 0x84c4)) >= (4))) && (NPC_ISINSTATE(SELF, 0xf09f))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_Q105_LETSDRINK_INFO() {
    Q105_JORNVINETRIP = TRUE;
    SELF.AIVAR[15] = TRUE;
    if ((NPC_HASITEMS(SELF, 0x84d0)) >= (0)) {
        CREATEINVITEMS(SELF, 0x84d0, 1);
        AI_EQUIPBESTMELEEWEAPON(SELF);
    };
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_LetsDrink_01_01");
    B_GIVEINVITEMS(OTHER, SELF, 0x84c4, 4);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_LetsDrink_01_02");
    if ((NPC_KNOWSINFO(OTHER, 0x16370)) && (NPC_HASITEMS(OTHER, (0x84ca) >= (7)))) {
        AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_LetsDrink_01_03");
        AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_LetsDrink_01_04");
        B_GIVEINVITEMS(OTHER, SELF, 0x84ca, 6);
    };
    AI_LOGENTRY(TOPIC_Q105, LOG_Q105_JORN_LESDRINK);
    AI_STOPPROCESSINFOS(SELF);
    NPC_EXCHANGEROUTINE(SELF, "Q105_BRIDGE");
}

instance DIA_JORN_Q105_DRINKWINE(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_Q105_DRINKWINE_CONDITION;
    INFORMATION = DIA_JORN_Q105_DRINKWINE_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_Q105_DRINKWINE_CONDITION() {
    if ((((NPC_GETDISTTOWP(SELF, "PART15_PATH_12")) <= (175)) && (NPC_KNOWSINFO(OTHER, 0x16373))) || (((NPC_GETDISTTOWP(SELF, "PART15_PATH_12")) <= (450)) && (NPC_ISINSTATE(SELF, 0xf09f)))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORNDRINKWINE_END2() {
    Q105_REMOVENPC();
    FADESCREENFROMBLACK(1);
}

func void DIA_JORNDRINKWINE_END() {
    Q105_MARVINDRUNKKURTHOUSE = TRUE;
    AI_USEMOB(HERO, "BEDLOW", 1);
    FF_APPLYONCEEXTGT(0x16378, 0x1388, 1);
}

func void DIA_JORNDRINKWINE_TELEPORT3() {
    WLD_SENDUNTRIGGER("KM_DRUNK");
    DIACAM_ENABLE();
    NPC_CLEARAIQUEUE(HERO);
    MDL_REMOVEOVERLAYMDS(HERO, HUMANSDRUNKENMDS);
    MDL_REMOVEOVERLAYMDS(NONE_1_JORN, HUMANSDRUNKENMDS);
    B_STARTOTHERROUTINE(NONE_1_JORN, "KurtHut");
    NPC_REFRESH(NONE_1_JORN);
    NPC_EXCHANGEROUTINE(BAU_701_KURT, "KurtinHut");
    WLD_SETTIME(8, 0);
    AI_TELEPORT(HERO, "VILLAGE_KURTHOUSE_06");
    FF_APPLYONCEEXTGT(0x16379, 800, 1);
}

func void DIA_JORNDRINKWINE_CAMERA() {
    if ((Q105_JORNDRUNK_CAMERACOUNT) == (0)) {
        DIACAM_DISABLE();
        if ((WLD_GETTIMEHOUR()) < (17)) {
            WLD_SETTIME(17, 0);
        };
    };
    if ((Q105_JORNDRUNK_CAMERACOUNT) == (1)) {
        WLD_SENDTRIGGER("KM_DRUNK");
        AI_SETWALKMODE(NONE_1_JORN, NPC_RUN);
        AI_SETWALKMODE(HERO, NPC_RUN);
        AI_GOTOWP(HERO, "PART15_PATH_04");
        AI_SETWALKMODE(NONE_1_JORN, NPC_WALK);
        AI_GOTOWP(NONE_1_JORN, "PART15_PATH_04");
        NPC_EXCHANGEROUTINE(NONE_1_JORN, "DrunkenCam");
        FADESCREENFROMBLACK(3);
    };
    if ((Q105_JORNDRUNK_CAMERACOUNT) == (11)) {
        FADESCREENTOBLACKF(5, 0x1637a, 0x4b0);
    };
    Q105_JORNDRUNK_CAMERACOUNT = (Q105_JORNDRUNK_CAMERACOUNT) + (1);
}

func void DIA_JORNDRINKWINE_FADE() {
    WLD_SENDUNTRIGGER("KM_JORN");
    NPC_EXCHANGEROUTINE(NONE_1_JORN, "Drunken");
    AI_TELEPORT(HERO, NONE_1_JORN.WP);
    AI_TELEPORT(NONE_1_JORN, NONE_1_JORN.WP);
    MDL_APPLYOVERLAYMDS(HERO, HUMANSDRUNKENMDS);
    MDL_APPLYOVERLAYMDS(NONE_1_JORN, HUMANSDRUNKENMDS);
    FF_APPLYONCEEXT(0x1637b, 1000, 15);
}

var int JORN_Q105_BRIDGEDIALOGUE = 0;
func void DIA_JORN_Q105_DRINKWINE_INFO() {
    JORN_Q105_BRIDGEDIALOGUE = TRUE;
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_01_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_01_02");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_01_03");
    INFO_CLEARCHOICES(0x16376);
    INFO_ADDCHOICE(0x16376, "We are here and now. Exactly as we are.", 0x16380);
    INFO_ADDCHOICE(0x16376, DIALOG_BESILENT, 0x16381);
}

func void DIA_JORN_Q105_DRINKWINE_NEXT() {
    AI_WAITTILLEND(SELF, OTHER);
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Next_01_01");
    Q105_DRINKWINE();
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_Next_15_02");
    AI_RESETFACEANI(OTHER);
    AI_STARTFACEANI(SELF, S_SAD, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Next_01_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Next_01_04");
    INFO_CLEARCHOICES(0x16376);
    INFO_ADDCHOICE(0x16376, "I don't want to talk about it.", 0x16383);
    INFO_ADDCHOICE(0x16376, "We stole the amulet from our own mother's grave.", 0x16384);
}

func void DIA_JORN_Q105_DRINKWINE_HERE() {
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_Here_15_01");
    DIA_JORN_Q105_DRINKWINE_NEXT();
}

func void DIA_JORN_Q105_DRINKWINE_SILENCE() {
    AI_WAIT(OTHER, 0x3f4ccccd);
    DIA_JORN_Q105_DRINKWINE_NEXT();
}

func void DIA_JORN_Q105_DRINKWINE_NEXT2() {
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Next2_01_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Next2_01_02");
    Q105_DRINKWINE();
    INFO_CLEARCHOICES(0x16376);
    INFO_ADDCHOICE(0x16376, "How do you feel after an adventurous day?", 0x1638d);
}

func void DIA_JORN_Q105_DRINKWINE_DONTTALK() {
    AI_STARTFACEANI(OTHER, S_TIRED, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_DontTalk_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_DontTalk_01_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_DontTalk_01_03");
    DIA_JORN_Q105_DRINKWINE_NEXT2();
}

func void DIA_JORN_Q105_DRINKWINE_AMULET() {
    AI_STARTFACEANI(OTHER, S_SAD, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_Amulet_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Amulet_01_02");
    AI_STARTFACEANI(OTHER, S_TIRED, 1, -(1));
    INFO_CLEARCHOICES(0x16376);
    INFO_ADDCHOICE(0x16376, "You're right, staying on Londram would be suicide.", 0x16385);
    INFO_ADDCHOICE(0x16376, "Maybe if we were left to defend our own island...", 0x16386);
}

func void DIA_JORN_Q105_DRINKWINE_IDEA() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_Idea_15_01");
    DIA_JORN_Q105_DRINKWINE_NEXT2();
}

func void DIA_JORN_Q105_DRINKWINE_STAY() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_Stay_15_01");
    DIA_JORN_Q105_DRINKWINE_NEXT2();
}

var int JORN_Q105_QUESTIONS_KURT = 0;
var int JORN_Q105_QUESTIONS_RUN = 0;
var int JORN_Q105_QUESTIONS_MISS = 0;
var int JORN_Q105_QUESTIONS_LONDRAM = 0;
func void DIA_JORN_Q105_DRINKWINE_QUESTIONS_CHOICES() {
    INFO_CLEARCHOICES(0x16376);
    INFO_ADDCHOICE(0x16376, DIALOG_BACK, 0x1638c);
    if ((JORN_Q105_QUESTIONS_KURT) == (FALSE)) {
        INFO_ADDCHOICE(0x16376, "What do you think of Kurt?", 0x16395);
    };
    if ((JORN_Q105_QUESTIONS_RUN) == (FALSE)) {
        INFO_ADDCHOICE(0x16376, "What made you think of running away just now?", 0x16394);
    };
    if ((JORN_Q105_QUESTIONS_MISS) == (FALSE)) {
        INFO_ADDCHOICE(0x16376, "Don't you miss the rest of our family?", 0x16390);
    };
    if ((JORN_Q105_QUESTIONS_LONDRAM) == (FALSE)) {
        INFO_ADDCHOICE(0x16376, "Do you think we'll ever go back to Londram again?", 0x1638f);
    };
    INFO_CLEARCHOICES(0x1639c);
    INFO_ADDCHOICE(0x1639c, DIALOG_BACK, 0x1639f);
    if ((JORN_Q105_QUESTIONS_KURT) == (FALSE)) {
        INFO_ADDCHOICE(0x1639c, "What do you think of Kurt?", 0x16395);
    };
    if ((JORN_Q105_QUESTIONS_RUN) == (FALSE)) {
        INFO_ADDCHOICE(0x1639c, "What made you think of running away just now?", 0x16394);
    };
    if ((JORN_Q105_QUESTIONS_MISS) == (FALSE)) {
        INFO_ADDCHOICE(0x1639c, "Don't you miss the rest of our family?", 0x16390);
    };
    if ((JORN_Q105_QUESTIONS_LONDRAM) == (FALSE)) {
        INFO_ADDCHOICE(0x1639c, "Do you think we'll ever go back to Londram again?", 0x1638f);
    };
}

func void DIA_JORN_Q105_DRINKWINE_CHOICES() {
    INFO_CLEARCHOICES(0x16376);
    INFO_ADDCHOICE(0x16376, "We should get back.", 0x16399);
    INFO_ADDCHOICE(0x16376, "Let's have another drink.", 0x16397);
    if (((((JORN_Q105_QUESTIONS_KURT) == (FALSE)) || ((JORN_Q105_QUESTIONS_RUN) == (FALSE))) || ((JORN_Q105_QUESTIONS_MISS) == (FALSE))) || ((JORN_Q105_QUESTIONS_LONDRAM) == (FALSE))) {
        INFO_ADDCHOICE(0x16376, "I have a few questions for you...", 0x1638e);
    };
}

func void DIA_JORN_Q105_DRINKWINE_FEEL() {
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_Feel_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Feel_01_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Feel_01_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Feel_01_04");
    AI_STOPLOOKAT(SELF);
    AI_USEITEM(SELF, 0x8f12);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Feel_01_05");
    AI_RESETFACEANI(OTHER);
    DIA_JORN_Q105_DRINKWINE_CHOICES();
}

func void DIA_JORN_Q105_DRINKWINE_QUESTIONS() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_Questions_15_01");
    DIA_JORN_Q105_DRINKWINE_QUESTIONS_CHOICES();
}

func void DIA_JORN_Q105_DRINKWINE_FEEL_QUESTIONS_LONDRAM() {
    JORN_Q105_QUESTIONS_LONDRAM = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_Londram_15_01");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Londram_01_02");
    AI_STARTFACEANI(SELF, S_DOUBT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Londram_01_03");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Londram_01_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Londram_01_05");
    DIA_JORN_Q105_DRINKWINE_QUESTIONS_CHOICES();
}

func void DIA_JORN_Q105_DRINKWINE_FEEL_QUESTIONS_MISS() {
    JORN_Q105_QUESTIONS_MISS = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_Miss_15_01");
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Miss_01_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Miss_01_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Miss_01_04");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Miss_01_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Miss_01_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Miss_01_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Miss_01_08");
    if ((JORN_Q105_BRIDGEDIALOGUE) == (TRUE)) {
        Q105_DRINKWINE_ONLYJORN();
    };
    INFO_CLEARCHOICES(0x16376);
    INFO_ADDCHOICE(0x16376, DIALOG_BESILENT, 0x16392);
    INFO_ADDCHOICE(0x16376, "Accident?", 0x16393);
    INFO_CLEARCHOICES(0x1639c);
    INFO_ADDCHOICE(0x1639c, DIALOG_BESILENT, 0x16392);
    INFO_ADDCHOICE(0x1639c, "Accident?", 0x16393);
}

func void DIA_JORN_Q105_DRINKWINE_FEEL_QUESTIONS_MISS_NEXT() {
    AI_WAITTILLEND(SELF, OTHER);
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Next3_01_01");
    DIA_JORN_Q105_DRINKWINE_QUESTIONS_CHOICES();
}

func void DIA_JORN_Q105_DRINKWINE_MISS_SILENCE2() {
    AI_WAIT(HERO, 0x3f4ccccd);
    DIA_JORN_Q105_DRINKWINE_FEEL_QUESTIONS_MISS_NEXT();
}

func void DIA_JORN_Q105_DRINKWINE_MISS_DISASTER() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_Disaster_15_01");
    AI_RESETFACEANI(OTHER);
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Disaster_01_02");
    DIA_JORN_Q105_DRINKWINE_FEEL_QUESTIONS_MISS_NEXT();
}

func void DIA_JORN_Q105_DRINKWINE_FEEL_QUESTIONS_RUN() {
    JORN_Q105_QUESTIONS_RUN = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_Run_15_01");
    AI_RESETFACEANI(OTHER);
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Run_01_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Run_01_03");
    DIA_JORN_Q105_DRINKWINE_QUESTIONS_CHOICES();
}

func void DIA_JORN_Q105_DRINKWINE_FEEL_QUESTIONS_KURT() {
    JORN_Q105_QUESTIONS_KURT = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_Kurt_15_01");
    AI_RESETFACEANI(OTHER);
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Kurt_01_02");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_Kurt_01_03");
    DIA_JORN_Q105_DRINKWINE_QUESTIONS_CHOICES();
}

func void DIA_JORN_Q105_DRINKWINE_FEEL_QUESTIONS_BACK() {
    DIA_JORN_Q105_DRINKWINE_CHOICES();
}

func void DIA_JORN_Q105_DRINKWINE_LETSDRINK() {
    AI_STARTFACEANI(OTHER, S_SMILE, 1, -(1));
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_LetsDrink_15_01");
    RND = HLP_RANDOM(2);
    if ((RND) == (0)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_LetsDrink_01_02");
    };
    if ((RND) == (1)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_LetsDrink_01_03");
    };
    Q105_DRINKWINE();
    DIA_JORN_Q105_DRINKWINE_CHOICES();
}

var int DIA_JORN_Q105_DRINKWINE_LETSDRINK.RND = 0;
func void DIA_JORN_Q105_DRINKWINE_COMEBACK() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_ComeBack_15_01");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_ComeBack_01_02");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_Q105_DrinkWine_ComeBack_01_03");
    INFO_CLEARCHOICES(0x16376);
    INFO_ADDCHOICE(0x16376, "All right, give me that wine.", 0x1639a);
}

func void DIA_JORN_Q105_DRINKWINE_GIVE() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_Q105_DrinkWine_Give_15_01");
    SELF.AIVAR[15] = FALSE;
    AI_WAITTILLEND(OTHER, SELF);
    AI_WAITTILLEND(SELF, OTHER);
    AI_FUNCTION(SELF, 0x1639b);
    Q105_DRINKWINE();
    AI_WAITTILLEND(OTHER, SELF);
    AI_WAITTILLEND(SELF, OTHER);
    LOG_SETSTATUS(_@(MIS_Q105), TOPIC_Q105, LOG_SUCCESS);
    AI_STOPPROCESSINFOS(SELF);
    AI_LOGENTRY(TOPIC_Q105, LOG_Q105_AFTERBRIDGE);
    B_HEALNPC_OTHER();
    B_GIVEPLAYERXP(XP_Q105_FINISH);
}

func void DIA_JORNDRINKWINE_FADESCREEN() {
    FADESCREENTOBLACKF(6, 0x1637c, 1000);
}

instance DIA_JORN_QUESTIONS(C_INFO) {
    NPC = 0xc8ef;
    NR = 90;
    CONDITION = DIA_JORN_QUESTIONS_CONDITION;
    INFORMATION = DIA_JORN_QUESTIONS_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "I have a few questions for you...";
}

func int DIA_JORN_QUESTIONS_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 0x16336)) {
        if ((SILBACHSLEEP) == (2)) {
            if (((LOG_GETSTATUS(MIS_Q105)) != (LOG_RUNNING)) || ((LOG_GETSTATUS(MIS_Q105)) != (LOG_SUCCESS))) {
                if (((((JORN_Q105_QUESTIONS_KURT) == (FALSE)) || ((JORN_Q105_QUESTIONS_RUN) == (FALSE))) || ((JORN_Q105_QUESTIONS_MISS) == (FALSE))) || ((JORN_Q105_QUESTIONS_LONDRAM) == (FALSE))) {
                    return TRUE;
                };
            };
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_QUESTIONS_INFO() {
    DIA_JORN_Q105_DRINKWINE_QUESTIONS();
}

func void DIA_JORN_QUESTIONS_BACK() {
    INFO_CLEARCHOICES(0x1639c);
}

instance DIA_JORN_AMBIENTNIGHT(C_INFO) {
    NPC = 0xc8ef;
    NR = 999;
    CONDITION = DIA_JORN_AMBIENTNIGHT_CONDITION;
    INFORMATION = DIA_JORN_AMBIENTNIGHT_INFO;
    IMPORTANT = TRUE;
    PERMANENT = TRUE;
}

func int DIA_JORN_AMBIENTNIGHT_CONDITION() {
    if ((Q101_AFTERJUMP) == (FALSE)) {
        return FALSE;
    };
    if (NPC_ISINSTATE(SELF, 0xf09f)) {
        if ((NPC_KNOWSINFO(OTHER, 0x16329)) && ((SILBACHSLEEP) < (2))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_AMBIENTNIGHT_INFO() {
    if ((SILBACHSLEEP) < (2)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Jorn_AmbientNight_01_00");
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_AmbientNight_01_01");
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_JORN_ABSOLUTELYAMAZING(C_INFO) {
    NPC = 0xc8ef;
    NR = 1;
    CONDITION = DIA_JORN_ABSOLUTELYAMAZING_CONDITION;
    INFORMATION = DIA_JORN_ABSOLUTELYAMAZING_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_JORN_ABSOLUTELYAMAZING_CONDITION() {
    if ((Q405_INTERESTINGEVENT) == (1)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_JORN_ABSOLUTELYAMAZING_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_AbsolutelyAmazing_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_AbsolutelyAmazing_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_AbsolutelyAmazing_03_03");
    INFO_CLEARCHOICES(0x163a3);
    INFO_ADDCHOICE(0x163a3, "(Give medicine)", 0x163a6);
}

func void DIA_JORN_DRINKQUICKLY() {
    NPC_REMOVEINVITEM(SELF, 0x936e);
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_DrinkQuickly_15_01");
    B_GIVEINVITEMS(OTHER, SELF, 0x936e, 1);
    B_USEFAKEJORNPOTION();
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_DrinkQuickly_03_02");
    INFO_CLEARCHOICES(0x163a3);
    INFO_ADDCHOICE(0x163a3, "I need to get you somewhere safe.", 0x163a8);
    INFO_ADDCHOICE(0x163a3, "What happened to you?", 0x163a7);
}

func void DIA_JORN_WHATHAPPENED() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_WhatHappened_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_WhatHappened_03_02");
}

func void DIA_JORN_SAFEPLACE() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_SafePlace_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_SafePlace_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_SafePlace_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_SafePlace_03_04");
    INFO_CLEARCHOICES(0x163a3);
    INFO_ADDCHOICE(0x163a3, "Don't worry, we can handle ourselves.", 0x163a9);
}

func void DIA_JORN_NEWADVENTURE() {
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_NewAdventure_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Jorn_NewAdventure_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Jorn_NewAdventure_03_03");
    AI_STOPPROCESSINFOS(SELF);
    AI_FUNCTION(SELF, 0x16f03);
}

