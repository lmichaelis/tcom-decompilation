const int FADESCREENVIEWPTR = 0;
var int FADESCREENCURRA;
var int FADEINSCREENSPEED;
var int FADEINFUNC;
var int FADEINFUNCPTR;
var int FADEINDELAY;
var int FADEOUTSCREENSPEED;
var int FADEOUTFUNC;
var int FADEOUTFUNCPTR;
var int FADEOUTDELAY;
var int FADESCREENSTATE;
var int FADESCREENANI;
var int SCREENFADED;
instance HPBAR(OCVIEWSTATUSBAR);
instance FOCUSBAR(OCVIEWSTATUSBAR);
const int FADESCREENWORLDCHANGE = 0;
const string FADESCREENWORLDCHANGENAME = "empty";
const string FADESCREENWORLDCHANGESTART = "empty";
func void FADESCREENINIT() {
    FADESCREENVIEWPTR = VIEWPTR_CREATE(0, 0, 8192, 8192);
    VIEWPTR_SETTEXTURE(FADESCREENVIEWPTR, "default.tga");
    VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, 0));
    VIEWPTR_TOP(FADESCREENVIEWPTR);
    VIEWPTR_OPEN(FADESCREENVIEWPTR);
    HPBAR = _^(MEM_GAME.HPBAR);
    FOCUSBAR = _^(MEM_GAME.FOCUSBAR);
}

func void FADESCREENTOBLACKF(var int SPEED, var func FNC, var int DELAY) {
    FADEOUTFUNCPTR = MEM_GETFUNCPTR(20573);
    FADEOUTFUNC = TRUE;
    FADEOUTSCREENSPEED = SPEED;
    FADEOUTDELAY = DELAY;
    FF_APPLYGT(20595);
}

func void FADESCREENTOBLACK(var int SPEED) {
    FADEOUTSCREENSPEED = SPEED;
    FADEOUTFUNC = FALSE;
    FADEOUTDELAY = 0;
    FF_APPLYGT(20595);
}

func void FADESCREENTOBLACKCHANGEWORLD(var int SPEED, var string WORLDNAME, var string START) {
    FADEOUTSCREENSPEED = SPEED;
    FADEOUTFUNC = FALSE;
    FADEOUTDELAY = 0;
    FADESCREENWORLDCHANGE = TRUE;
    FADESCREENWORLDCHANGENAME = WORLDNAME;
    FADESCREENWORLDCHANGESTART = START;
    FF_APPLYGT(20595);
}

func void FADESCREENTOBLACKCHANGEWORLDF(var int SPEED, var func FNC, var string WORLDNAME, var string START) {
    FADEOUTFUNCPTR = MEM_GETFUNCPTR(20583);
    FADEOUTFUNC = TRUE;
    FADEOUTDELAY = 0;
    FADESCREENWORLDCHANGE = TRUE;
    FADESCREENWORLDCHANGENAME = WORLDNAME;
    FADESCREENWORLDCHANGESTART = START;
    FADEOUTSCREENSPEED = SPEED;
    FF_APPLYGT(20595);
}

func void FADESCREENFROMBLACKF(var int SPEED, var func FNC, var int DELAY) {
    FADEINFUNCPTR = MEM_GETFUNCPTR(20588);
    FADEINFUNC = TRUE;
    FADEINSCREENSPEED = SPEED;
    FADEINDELAY = DELAY;
    FF_APPLYGT(20600);
}

func void FADESCREENFROMBLACK(var int SPEED) {
    FADEINSCREENSPEED = SPEED;
    FADEINFUNC = FALSE;
    FADEINDELAY = 0;
    FF_APPLYGT(20600);
}

func void FADESCREENCHANGEWORLD() {
    CALL_ZSTRINGPTRPARAM(FADESCREENWORLDCHANGESTART);
    CALL_ZSTRINGPTRPARAM(FADESCREENWORLDCHANGENAME);
    CALL__THISCALL(MEM_INSTTOPTR(5765), OCGAME__TRIGGERCHANGELEVEL);
}

func void FADEOUTFINISH() {
    var OCNPC HER;
    if (FF_ACTIVE(20595)) {
        FF_REMOVE(20595);
    };
    FADESCREENSTATE = 0;
    SCREENFADED = TRUE;
    if (FADESCREENWORLDCHANGE) {
        HER = HLP_GETNPC(1819);
        HER.BITFIELD[0] = (HER.BITFIELD[0]) & (~(OCNPC_BITFIELD0_MOVLOCK));
        SCREENFADED = FALSE;
        FADESCREENWORLDCHANGE = FALSE;
        VIEWPTR_SETALPHAALL(MEM_GAME.HPBAR, 255);
        VIEWPTR_SETALPHAALL(MEM_GAME.FOCUSBAR, 255);
        VIEWPTR_SETALPHAALL(HPBAR.RANGE_BAR, 255);
        VIEWPTR_SETALPHAALL(HPBAR.VALUE_BAR, 255);
        VIEWPTR_SETALPHAALL(FOCUSBAR.RANGE_BAR, 255);
        VIEWPTR_SETALPHAALL(FOCUSBAR.VALUE_BAR, 255);
        FADESCREENCHANGEWORLD();
    };
}

func void FADESCREENTOBLACKLOOP() {
    var OCNPC HER;
    if ((FADESCREENSTATE) == (0)) {
        HER = HLP_GETNPC(1819);
        HER.BITFIELD[0] = (HER.BITFIELD[0]) | (OCNPC_BITFIELD0_MOVLOCK);
        VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, 0));
        FADESCREENCURRA = 0;
        FADESCREENSTATE = 1;
        FADESCREENANI = ANIM8_NEW(0, FALSE);
        ANIM8(FADESCREENANI, 255, (FADEOUTSCREENSPEED) * (1000), A8_CONSTANT);
    };
    if ((FADESCREENSTATE) == (1)) {
        FADESCREENCURRA = ANIM8_GET(FADESCREENANI);
        VIEWPTR_SETALPHAALL(MEM_GAME.HPBAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(MEM_GAME.FOCUSBAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(HPBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(HPBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(FOCUSBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(FOCUSBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, FADESCREENCURRA));
        if ((FADESCREENCURRA) >= (255)) {
            if ((FADEOUTFUNC) == (TRUE)) {
                MEM_CALLBYPTR(FADEOUTFUNCPTR);
            };
            ANIM8_DELETE(FADESCREENANI);
            FADESCREENCURRA = 255;
            VIEWPTR_SETALPHAALL(MEM_GAME.HPBAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(MEM_GAME.FOCUSBAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(HPBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(HPBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(FOCUSBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(FOCUSBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, FADESCREENCURRA));
            if ((FADEOUTDELAY) > (0)) {
                FADESCREENSTATE = 3;
                FF_APPLYONCEEXT(20593, FADEOUTDELAY, 1);
            } else {
                FADEOUTFINISH();
            };
        };
    };
}

func void FADEINFINISH() {
    var OCNPC HER;
    if (FF_ACTIVE(20600)) {
        FF_REMOVE(20600);
    };
    FADESCREENSTATE = 0;
    SCREENFADED = FALSE;
    HER = HLP_GETNPC(1819);
    HER.BITFIELD[0] = (HER.BITFIELD[0]) & (~(OCNPC_BITFIELD0_MOVLOCK));
}

func void FADESCREENFROMBLACKNOW() {
    FADESCREENCURRA = 0;
    VIEWPTR_SETALPHAALL(MEM_GAME.HPBAR, 255);
    VIEWPTR_SETALPHAALL(MEM_GAME.FOCUSBAR, 255);
    VIEWPTR_SETALPHAALL(HPBAR.RANGE_BAR, 255);
    VIEWPTR_SETALPHAALL(HPBAR.VALUE_BAR, 255);
    VIEWPTR_SETALPHAALL(FOCUSBAR.RANGE_BAR, 255);
    VIEWPTR_SETALPHAALL(FOCUSBAR.VALUE_BAR, 255);
    VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, FADESCREENCURRA));
    FADESCREENSTATE = 0;
    FADEINFINISH();
}

func void FADESCREENFROMBLACKLOOP() {
    if ((FADESCREENSTATE) == (0)) {
        VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, 255));
        FADESCREENCURRA = 255;
        FADESCREENSTATE = 2;
        FADESCREENANI = ANIM8_NEW(255, FALSE);
        ANIM8(FADESCREENANI, 0, (FADEINSCREENSPEED) * (1000), A8_CONSTANT);
    };
    if ((FADESCREENSTATE) == (2)) {
        FADESCREENCURRA = ANIM8_GET(FADESCREENANI);
        VIEWPTR_SETALPHAALL(MEM_GAME.HPBAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(MEM_GAME.FOCUSBAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(HPBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(HPBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(FOCUSBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETALPHAALL(FOCUSBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
        VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, FADESCREENCURRA));
        if ((FADESCREENCURRA) <= (0)) {
            if ((FADEINFUNC) == (TRUE)) {
                MEM_CALLBYPTR(FADEINFUNCPTR);
            };
            ANIM8_DELETE(FADESCREENANI);
            FADESCREENCURRA = 0;
            VIEWPTR_SETALPHAALL(MEM_GAME.HPBAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(MEM_GAME.FOCUSBAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(HPBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(HPBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(FOCUSBAR.RANGE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETALPHAALL(FOCUSBAR.VALUE_BAR, (255) - (FADESCREENCURRA));
            VIEWPTR_SETCOLOR(FADESCREENVIEWPTR, RGBA(0, 0, 0, FADESCREENCURRA));
            if ((FADEINDELAY) > (0)) {
                FADESCREENSTATE = 3;
                FF_APPLYONCEEXT(20597, FADEINDELAY, 1);
            } else {
                FADEINFINISH();
            };
        };
    };
}

