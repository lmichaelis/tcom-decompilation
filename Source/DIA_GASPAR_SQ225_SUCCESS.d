func void DIA_GASPAR_SQ225_SUCCESS() {
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ225_success_900_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ225_success_900_02");
}

instance DIA_GASPAR_EXIT(C_INFO) {
    NPC = 58019;
    NR = 999;
    CONDITION = DIA_GASPAR_EXIT_CONDITION;
    INFORMATION = DIA_GASPAR_EXIT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_ENDE;
}

func int DIA_GASPAR_EXIT_CONDITION() {
    return TRUE;
}

func void DIA_GASPAR_EXIT_INFO() {
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_GASPAR_WHO(C_INFO) {
    NPC = 58019;
    NR = 2;
    CONDITION = DIA_GASPAR_WHO_CONDITION;
    INFORMATION = DIA_GASPAR_WHO_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Who are you?";
}

func int DIA_GASPAR_WHO_CONDITION() {
    return TRUE;
}

func void DIA_GASPAR_WHO_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_Who_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Who_900_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Who_900_03");
}

instance DIA_GASPAR_Q207_ANTONIO(C_INFO) {
    NPC = 58019;
    NR = 3;
    CONDITION = DIA_GASPAR_Q207_ANTONIO_CONDITION;
    INFORMATION = DIA_GASPAR_Q207_ANTONIO_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Do you know where I can find Antonio?";
}

func int DIA_GASPAR_Q207_ANTONIO_CONDITION() {
    if (((NPC_KNOWSINFO(OTHER, 66089)) && ((Q207_MARVINKNOWABOUTANTONIO) == (FALSE))) && ((LOG_GETSTATUS(MIS_Q207)) == (LOG_RUNNING))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_Q207_ANTONIO_INFO() {
    B_SAY(OTHER, SELF, "$Q207_SearchAntonio");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Q207_Antonio_900_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Q207_Antonio_900_03");
    AI_LOGENTRY(TOPIC_Q207, LOG_Q207_GASPAR_ANTONIO);
}

instance DIA_GASPAR_Q207_SOREN(C_INFO) {
    NPC = 58019;
    NR = 1;
    CONDITION = DIA_GASPAR_Q207_SOREN_CONDITION;
    INFORMATION = DIA_GASPAR_Q207_SOREN_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Do you know where I can find Nayla?";
}

func int DIA_GASPAR_Q207_SOREN_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q207)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 89004))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_Q207_SOREN_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_Q207_Soren_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Q207_Soren_900_02");
}

instance DIA_GASPAR_WINE(C_INFO) {
    NPC = 58019;
    NR = 5;
    CONDITION = DIA_GASPAR_WINE_CONDITION;
    INFORMATION = DIA_GASPAR_WINE_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "What kind of wine do you make here?";
}

func int DIA_GASPAR_WINE_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 86069)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_WINE_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_Wine_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_900_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_900_03");
    INFO_CLEARCHOICES(86078);
    INFO_ADDCHOICE(86078, "Are they selling well?", 86081);
}

func void DIA_GASPAR_WINE_SELL() {
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_Wine_Sell_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Sell_900_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Sell_900_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Sell_900_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Sell_900_05");
    INFO_CLEARCHOICES(86078);
    INFO_ADDCHOICE(86078, "To what does Holdwig owe its success?", 86082);
    INFO_ADDCHOICE(86078, "What do you know about this conflict?", 86083);
}

func void DIA_GASPAR_WINE_SELL_HOLDWIG() {
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_Wine_Holdwig_15_01");
    AI_STARTFACEANI(SELF, S_ANGRY, 0, 1);
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Holdwig_900_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Holdwig_900_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_Wine_Holdwig_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Holdwig_900_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Holdwig_900_06");
    AI_RESETFACEANI(BAU_900_GASPAR);
}

func void DIA_GASPAR_WINE_SELL_CONFLICT() {
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_Wine_Conflict_15_01");
    if ((LOG_GETSTATUS(MIS_SQ225)) == (LOG_SUCCESS)) {
        DIA_GASPAR_SQ225_SUCCESS();
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Conflict_900_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Conflict_900_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Conflict_900_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Conflict_900_05");
}

instance DIA_GASPAR_GIVEWINE(C_INFO) {
    NPC = 58019;
    NR = 8;
    CONDITION = DIA_GASPAR_GIVEWINE_CONDITION;
    INFORMATION = DIA_GASPAR_GIVEWINE_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Can I have some of your wine?";
}

func int DIA_GASPAR_GIVEWINE_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 86078)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_GIVEWINE_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_GiveWine_15_01");
    if ((LOG_GETSTATUS(MIS_SQ206)) == (LOG_RUNNING)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_GiveWine_900_02");
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_GiveWine_900_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_GiveWine_900_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_GiveWine_15_05");
    CREATEINVITEMS(SELF, 36393, 2);
    B_GIVEINVITEMS(SELF, OTHER, 36393, 2);
    AI_WAITTILLEND(SELF, OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_STOPLOOKAT(OTHER);
    AI_WAITTILLEND(SELF, OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_USEITEM(OTHER, 36393);
    AI_WAITTILLEND(SELF, OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_LOOKATNPC(SELF, OTHER);
    AI_WAITTILLEND(SELF, OTHER);
    AI_WAITTILLEND(OTHER, SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_GiveWine_900_06");
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_GiveWine_15_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_GiveWine_900_08");
    INFO_CLEARCHOICES(86078);
    INFO_ADDCHOICE(86078, "What does its name actually mean?", 86087);
}

func void DIA_GASPAR_WINE_SELL_WINE_NAME() {
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_Wine_Name_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Name_900_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Name_900_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Name_900_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Name_900_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Wine_Name_900_06");
}

instance DIA_GASPAR_TRADE(C_INFO) {
    NPC = 58019;
    NR = 9;
    CONDITION = DIA_GASPAR_TRADE_CONDITION;
    INFORMATION = DIA_GASPAR_TRADE_INFO;
    PERMANENT = TRUE;
    TRADE = TRUE;
    DESCRIPTION = "Show me what you have for sale.";
}

func int DIA_GASPAR_TRADE_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 86069)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_TRADE_INFO() {
    var int GASPAR_TRADE_CHECKINFO;
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_Trade_15_01");
    NPC_INITAMBIENTS(SELF, 2);
    if ((NPC_GETLASTAMBIENT(SELF)) == (1)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Trade_900_02");
    };
    if ((NPC_GETLASTAMBIENT(SELF)) == (2)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Trade_900_03");
    };
    B_GIVETRADEINV(SELF);
    if ((GASPAR_TRADE_CHECKINFO) == (FALSE)) {
        GASPAR_TRADE_CHECKINFO = TRUE;
        LOG_CREATETOPIC(TOPIC_OTHERTRADER, LOG_NOTE);
        AI_LOGENTRY(TOPIC_OTHERTRADER, LOG_TRADER_GASPAR);
    };
}

instance DIA_GASPAR_SQ120_YOUNEEDHELP(C_INFO) {
    NPC = 58019;
    NR = 1;
    CONDITION = DIA_GASPAR_SQ120_YOUNEEDHELP_CONDITION;
    INFORMATION = DIA_GASPAR_SQ120_YOUNEEDHELP_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Is there any work on your vineyard I could do?";
}

func int DIA_GASPAR_SQ120_YOUNEEDHELP_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 86069)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_SQ120_YOUNEEDHELP_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ120_YouNeedHelp_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ120_YouNeedHelp_03_02");
    AI_STARTFACEANI(OTHER, S_SURPRISE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ120_YouNeedHelp_15_03");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ120_YouNeedHelp_03_04");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ120_YouNeedHelp_03_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ120_YouNeedHelp_03_06");
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ120_YouNeedHelp_15_07");
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ120_YouNeedHelp_03_08");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
    LOG_CREATETOPIC(TOPIC_SQ120, LOG_MISSION);
    LOG_SETSTATUS(_@(MIS_SQ120), TOPIC_SQ120, LOG_RUNNING);
    AI_LOGENTRY(TOPIC_SQ120, LOG_SQ120_START);
    if (NPC_KNOWSINFO(OTHER, 86022)) {
        AI_LOGENTRY(TOPIC_SQ120, LOG_SQ120_NEKINFO);
    };
}

instance DIA_GASPAR_SQ120_FINISH(C_INFO) {
    NPC = 58019;
    NR = 4;
    CONDITION = DIA_GASPAR_SQ120_FINISH_CONDITION;
    INFORMATION = DIA_GASPAR_SQ120_FINISH_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I made a deal with Nek.";
}

func int DIA_GASPAR_SQ120_FINISH_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 86031)) && ((LOG_GETSTATUS(MIS_SQ120)) == (LOG_RUNNING))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_SQ120_FINISH_INFO() {
    SQ120_AFTERQUEST = 1;
    SQ120_AFTERQUEST_DAY = WLD_GETDAY();
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ120_Finish_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ120_Finish_03_02");
    AI_RESETFACEANI(SELF);
    CREATEINVITEMS(SELF, 34203, SQ120_REWARD);
    B_GIVEINVITEMS(SELF, OTHER, 34203, SQ120_REWARD);
    AI_LOGENTRY(TOPIC_SQ120, LOG_SQ120_FINISH);
    LOG_SETSTATUS(_@(MIS_SQ120), TOPIC_SQ120, LOG_SUCCESS);
    B_GIVEPLAYERXP(XP_SQ120_FINISH);
}

instance DIA_GASPAR_SQ206_START(C_INFO) {
    NPC = 58019;
    NR = 1;
    CONDITION = DIA_GASPAR_SQ206_START_CONDITION;
    INFORMATION = DIA_GASPAR_SQ206_START_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_GASPAR_SQ206_START_CONDITION() {
    if ((((KAPITEL) >= (2)) && ((LOG_GETSTATUS(MIS_SQ120)) == (LOG_SUCCESS))) && ((SQ120_AFTERQUEST) == (2))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_SQ206_START_INFO() {
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ206_Start_03_01");
    AI_RESETFACEANI(SELF);
}

instance DIA_GASPAR_SQ206_WHAT(C_INFO) {
    NPC = 58019;
    NR = 1;
    CONDITION = DIA_GASPAR_SQ206_WHAT_CONDITION;
    INFORMATION = DIA_GASPAR_SQ206_WHAT_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Some problem with Nek again?";
}

func int DIA_GASPAR_SQ206_WHAT_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 86098)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_SQ206_WHAT_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ206_What_15_01");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ206_What_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ206_What_03_03");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
}

instance DIA_GASPAR_SQ206_KILLANIMALS(C_INFO) {
    NPC = 58019;
    NR = 2;
    CONDITION = DIA_GASPAR_SQ206_KILLANIMALS_CONDITION;
    INFORMATION = DIA_GASPAR_SQ206_KILLANIMALS_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Okay, I'll take care of these animals.";
}

func int DIA_GASPAR_SQ206_KILLANIMALS_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 86101)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_SQ206_KILLANIMALS_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ206_KillAnimals_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ206_KillAnimals_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ206_KillAnimals_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ206_KillAnimals_03_04");
    LOG_CREATETOPIC(TOPIC_SQ206, LOG_MISSION);
    LOG_SETSTATUS(_@(MIS_SQ206), TOPIC_SQ206, LOG_RUNNING);
    AI_LOGENTRY(TOPIC_SQ206, LOG_SQ206_START);
}

instance DIA_GASPAR_SQ206_BLATTCRAWLER(C_INFO) {
    NPC = 58019;
    NR = 3;
    CONDITION = DIA_GASPAR_SQ206_BLATTCRAWLER_CONDITION;
    INFORMATION = DIA_GASPAR_SQ206_BLATTCRAWLER_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Mantises seem to like your land.";
}

func int DIA_GASPAR_SQ206_BLATTCRAWLER_CONDITION() {
    if (((NPC_KNOWSINFO(OTHER, 86104)) && ((SQ206_NEARCRAWLERS_LOGENTRY) == (TRUE))) && ((LOG_GETSTATUS(MIS_SQ206)) == (LOG_RUNNING))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_SQ206_BLATTCRAWLER_INFO() {
    WLD_SENDTRIGGER("SQ206_MOVER_REPAIR_01");
    MOB_CREATEITEMS("SQ206_WOODCHEST", 37131, 5);
    MOB_CREATEITEMS("WITHOUTRACE_VINEYARD_CHEST_02", 37131, 5);
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ206_Blattcrawler_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ206_Blattcrawler_15_02");
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ206_Blattcrawler_03_03");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ206_Blattcrawler_03_04");
    AI_LOGENTRY(TOPIC_SQ206, LOG_SQ206_WOOD);
}

instance DIA_GASPAR_SQ206_BOLES(C_INFO) {
    NPC = 58019;
    NR = 1;
    CONDITION = DIA_GASPAR_SQ206_BOLES_CONDITION;
    INFORMATION = DIA_GASPAR_SQ206_BOLES_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Some guy is extorting travelers.";
}

func int DIA_GASPAR_SQ206_BOLES_CONDITION() {
    if (((SQ206_BOLES_RESULT) >= (1)) && ((LOG_GETSTATUS(MIS_SQ206)) == (LOG_RUNNING))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_SQ206_BOLES_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ206_Boles_15_01");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ206_Boles_03_02");
    if ((SQ206_BOLES_RESULT) == (1)) {
        AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ206_Boles_15_03");
    };
    if ((SQ206_BOLES_RESULT) == (2)) {
        AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ206_Boles_15_04");
    };
    AI_STARTFACEANI(SELF, S_SERIOUS, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ206_Boles_03_05");
    AI_RESETFACEANI(SELF);
}

instance DIA_GASPAR_SQ206_FINISH(C_INFO) {
    NPC = 58019;
    NR = 2;
    CONDITION = DIA_GASPAR_SQ206_FINISH_CONDITION;
    INFORMATION = DIA_GASPAR_SQ206_FINISH_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I checked the indicated locations.";
}

func int DIA_GASPAR_SQ206_FINISH_CONDITION() {
    if ((LOG_GETSTATUS(MIS_SQ206)) == (LOG_RUNNING)) {
        if ((((SQ206_KILLEDMONSTERS_FORESTBUGS) == (TRUE)) && ((SQ206_KILLEDMONSTERS_LURKERS) == (TRUE))) && ((SQ206_REPAIRROOF) == (TRUE))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_SQ206_FINISH_INFO() {
    SQ206_AFTERQUEST = 1;
    SQ206_AFTERQUEST_DAY = WLD_GETDAY();
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ206_Finish_15_01");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ206_Finish_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ206_Finish_15_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ206_Finish_15_04");
    if (NPC_KNOWSINFO(OTHER, 86110)) {
        AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_SQ206_Finish_15_05");
    };
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_SQ206_Finish_03_06");
    AI_LOGENTRY(TOPIC_SQ206, LOG_SQ206_FINISH);
    LOG_SETSTATUS(_@(MIS_SQ206), TOPIC_SQ206, LOG_SUCCESS);
    if (NPC_KNOWSINFO(OTHER, 86110)) {
        B_GIVEPLAYERXP((XP_SQ206_FINISH) + (XP_SQ206_BONUSEXP));
        CREATEINVITEMS(SELF, 34203, (SQ206_REWARD) + (SQ206_BONUSREWARD));
    };
    B_GIVEPLAYERXP(XP_SQ206_FINISH);
    CREATEINVITEMS(SELF, 34203, SQ206_REWARD);
    B_GIVEINVITEMS(SELF, OTHER, 34203, SQ206_REWARD);
}

instance DIA_GASPAR_Q505_BUY(C_INFO) {
    NPC = 58019;
    NR = 1;
    CONDITION = DIA_GASPAR_Q505_BUY_CONDITION;
    INFORMATION = DIA_GASPAR_Q505_BUY_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Could I buy some food from you?";
}

func int DIA_GASPAR_Q505_BUY_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q505)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 80244))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

var int GASPAR_Q505_WENEEDTOPAY;
func void DIA_GASPAR_Q505_BUY_INFO() {
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Gaspar_Q505_Buy_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Q505_Buy_03_02");
    if (((LOG_GETSTATUS(MIS_SQ120)) == (LOG_SUCCESS)) && ((LOG_GETSTATUS(MIS_SQ206)) == (LOG_SUCCESS))) {
        AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Q505_Buy_03_04");
        CREATEINVITEMS(SELF, 37554, 1);
    };
    GASPAR_Q505_WENEEDTOPAY = TRUE;
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Q505_Buy_03_03");
    AI_RESETFACEANI(SELF);
    AI_RESETFACEANI(OTHER);
}

instance DIA_GASPAR_Q505_PAY(C_INFO) {
    NPC = 58019;
    NR = 1;
    CONDITION = DIA_GASPAR_Q505_PAY_CONDITION;
    INFORMATION = DIA_GASPAR_Q505_PAY_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_PROVISIONS200G;
}

func int DIA_GASPAR_Q505_PAY_CONDITION() {
    if (((NPC_KNOWSINFO(OTHER, 86116)) && ((LOG_GETSTATUS(MIS_Q505)) == (LOG_RUNNING))) && ((GASPAR_Q505_WENEEDTOPAY) == (TRUE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_Q505_PAY_INFO() {
    if ((NPC_HASITEMS(OTHER, 34203)) >= (Q505_RITAPRICE)) {
        GASPAR_Q505_WENEEDTOPAY = 0;
        NPC_REMOVEINVITEMS(SELF, 34203, Q505_RITAPRICE);
        AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
        B_GIVEINVITEMS(OTHER, SELF, 34203, Q505_RITAPRICE);
        AI_OUTPUT(SELF, OTHER, "DIA_Gaspar_Q505_Pay_03_01");
        CREATEINVITEMS(SELF, 37554, 1);
        B_GIVEINVITEMS(SELF, OTHER, 37554, 1);
        AI_RESETFACEANI(SELF);
    };
    B_SAY(SELF, OTHER, "$NOGOLD");
}

instance DIA_GASPAR_PICKPOCKET(C_INFO) {
    NPC = 58019;
    NR = 900;
    CONDITION = DIA_GASPAR_PICKPOCKET_CONDITION;
    INFORMATION = DIA_GASPAR_PICKPOCKET_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = PICKPOCKET_80_FEMALE;
}

func int DIA_GASPAR_PICKPOCKET_CONDITION() {
    if (((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (1)) && ((SELF.AIVAR[6]) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_GASPAR_PICKPOCKET_INFO() {
    INFO_CLEARCHOICES(86123);
    INFO_ADDCHOICE(86123, DIALOG_BACK, 86127);
    INFO_ADDCHOICE(86123, DIALOG_PICKPOCKET, 86126);
}

func void DIA_GASPAR_PICKPOCKET_DOIT() {
    if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (2)) {
        CREATEINVITEMS(SELF, 36393, 1);
        B_GIVEINVITEMS(SELF, OTHER, 36393, 1);
        B_PICKPOCKET_AMBIENT_TIER_2();
        SELF.AIVAR[6] = TRUE;
        INFO_CLEARCHOICES(86123);
    };
    AI_PLAYANI(HERO, T_CANNOTTAKE);
    PRINTSCREEN(PRINT_CANTPICKPOCKETTHISPERSON, -(1), -(1), FONT_SCREEN, 4);
    INFO_CLEARCHOICES(86123);
}

func void DIA_GASPAR_PICKPOCKET_BACK() {
    INFO_CLEARCHOICES(86123);
}

