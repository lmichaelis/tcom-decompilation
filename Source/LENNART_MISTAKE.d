var int LENNART_MISTAKE;
var int LENNART_WHYJOIN;
instance DIA_LENNART_EXIT(C_INFO) {
    NPC = 53001;
    NR = 999;
    CONDITION = DIA_LENNART_EXIT_CONDITION;
    INFORMATION = DIA_LENNART_EXIT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = DIALOG_ENDE;
}

func int DIA_LENNART_EXIT_CONDITION() {
    return TRUE;
}

func void DIA_LENNART_EXIT_INFO() {
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_LENNART_AMBIENT(C_INFO) {
    NPC = 53001;
    NR = 990;
    CONDITION = DIA_LENNART_AMBIENT_CONDITION;
    INFORMATION = DIA_LENNART_AMBIENT_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = "What's new?";
}

func int DIA_LENNART_AMBIENT_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 68623)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_AMBIENT_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_Ambient_15_00");
    NPC_INITAMBIENTS(SELF, 2);
    if ((HERO.GUILD) == (GIL_MIL)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Ambient_13_01");
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Ambient_13_02");
    };
    if ((NPC_GETLASTAMBIENT(SELF)) == (1)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Ambient_13_03");
    };
    if ((NPC_GETLASTAMBIENT(SELF)) == (2)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Ambient_13_04");
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Ambient_13_05");
    };
}

instance DIA_LENNART_HELLO(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_HELLO_CONDITION;
    INFORMATION = DIA_LENNART_HELLO_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Hey, what do you do here?";
}

func int DIA_LENNART_HELLO_CONDITION() {
    return TRUE;
}

func void DIA_LENNART_HELLO_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_Hello_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Hello_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_Hello_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Hello_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Hello_03_05");
    if (((FMQ001_RODEIRCHSENTTOTRAINING) == (TRUE)) && ((HERO.GUILD) != (GIL_MIL))) {
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Hello_03_06");
        AI_OUTPUT(OTHER, SELF, "DIA_Lennart_Hello_15_07");
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Hello_03_08");
}

instance DIA_LENNART_TRADE(C_INFO) {
    NPC = 53001;
    NR = 10;
    CONDITION = DIA_LENNART_TRADE_CONDITION;
    INFORMATION = DIA_LENNART_TRADE_INFO;
    PERMANENT = TRUE;
    TRADE = TRUE;
    DESCRIPTION = "Let's deal.";
}

func int DIA_LENNART_TRADE_CONDITION() {
    if ((HERO.GUILD) == (GIL_MIL)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_TRADE_INFO() {
    var int LENNART_TRADE_CHECK;
    B_SAY(OTHER, SELF, "$MARVIN_LetsTrade");
    B_GIVETRADEINV(SELF);
    if ((LENNART_TRADE_CHECK) == (FALSE)) {
        LENNART_TRADE_CHECK = TRUE;
        LOG_CREATETOPIC(TOPIC_MILITIATRADER, LOG_NOTE);
        AI_LOGENTRY(TOPIC_MILITIATRADER, LOG_TRADER_MILITIA_LENNART);
    };
}

instance DIA_LENNART_NEEDWEAPON(C_INFO) {
    NPC = 53001;
    NR = 2;
    CONDITION = DIA_LENNART_NEEDWEAPON_CONDITION;
    INFORMATION = DIA_LENNART_NEEDWEAPON_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I need equipment.";
}

func int DIA_LENNART_NEEDWEAPON_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 68623)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_NEEDWEAPON_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_NeedWeapon_15_01");
    if ((HERO.GUILD) != (GIL_MIL)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_NeedWeapon_03_02");
    };
    if ((HERO.GUILD) == (GIL_MIL)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_NeedWeapon_03_03");
        AI_OUTPUT(OTHER, SELF, "DIA_Lennart_NeedWeapon_15_04");
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_NeedWeapon_03_05");
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_NeedWeapon_03_06");
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_NeedWeapon_03_07");
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_NeedWeapon_03_08");
        AI_OUTPUT(OTHER, SELF, "DIA_Lennart_NeedWeapon_15_09");
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_NeedWeapon_03_10");
        INFO_CLEARCHOICES(68630);
        INFO_ADDCHOICE(68630, "What equipment is included in the additional allocation?", 68633);
        INFO_ADDCHOICE(68630, "I have to go now.", 68634);
    };
}

func void DIA_LENNART_NEEDWEAPON_EQ() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_NeedWeapon_EQ_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_NeedWeapon_EQ_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_NeedWeapon_EQ_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_NeedWeapon_EQ_03_04");
}

func void DIA_LENNART_NEEDWEAPON_BYE() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_NeedWeapon_Bye_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_NeedWeapon_Bye_03_02");
    INFO_CLEARCHOICES(68630);
}

instance DIA_LENNART_CQ003(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_CQ003_CONDITION;
    INFORMATION = DIA_LENNART_CQ003_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Hello. I'm here on business.";
}

func int DIA_LENNART_CQ003_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_CQ003)) == (LOG_RUNNING)) && ((NPC_HASITEMS(OTHER, 36364)) >= (1))) && (NPC_KNOWSINFO(OTHER, 68623))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_CQ003_BEFOREDRINK() {
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_CQ003_EMPTY_03_07");
}

func void DIA_LENNART_CQ003_INFO() {
    B_STANDUP();
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_CQ003_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_CQ003_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_CQ003_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_CQ003_03_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_CQ003_15_05");
    DIA_LENNART_CQ003_BEFOREDRINK();
    NPC_REMOVEINVITEM(SELF, 36364);
    AI_WAITTILLEND(SELF, OTHER);
    B_GIVEINVITEMS(OTHER, SELF, 36364, 1);
    AI_STOPLOOKAT(SELF);
    CREATEINVITEM(SELF, 36041);
    AI_USEITEMTOSTATE(SELF, 36041, 1);
    AI_WAIT(SELF, 1077936128);
    AI_USEITEMTOSTATE(SELF, 36041, -(1));
    AI_WAITTILLEND(SELF, OTHER);
    AI_LOOKATNPC(SELF, OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_CQ003_03_06");
    INFO_CLEARCHOICES(68635);
    INFO_ADDCHOICE(68635, "Everyone needs to loosen up sometimes.", 68640);
    INFO_ADDCHOICE(68635, "A guard is a human being.", 68639);
    AI_STOPLOOKAT(SELF);
}

func void DIA_LENNART_CQ003_GUARDISBRO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_CQ003_GuardIsBro_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_CQ003_GuardIsBro_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_CQ003_GuardIsBro_03_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_CQ003_GuardIsBro_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_CQ003_GuardIsBro_03_05");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_CQ003_GuardIsBro_15_06");
    INFO_CLEARCHOICES(68635);
    AI_LOGENTRY(TOPIC_CQ003, LOG_CQ003_LENNART);
    CQ003_HAPPYCUSTOMER = (CQ003_HAPPYCUSTOMER) + (1);
    CQ003_HAPPYLENNART = 1;
    CQ003_TALKED = (CQ003_TALKED) + (1);
}

func void DIA_LENNART_CQ003_PARTYTIME() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_CQ003_PartyTime_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_CQ003_PartyTime_03_02");
    MDL_STARTFACEANI(SELF, S_ANGRY, 1065353216, -1082130432);
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_CQ003_PartyTime_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_CQ003_PartyTime_03_04");
    INFO_CLEARCHOICES(68635);
    if ((NPC_HASITEMS(OTHER, 36364)) >= (1)) {
        INFO_ADDCHOICE(68635, "Yeah, sure. Here you go.", 68641);
    };
    INFO_ADDCHOICE(68635, "I don't.", 68642);
}

func void DIA_LENNART_CQ003_PARTYTIME_YES() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_CQ003_Yes_15_01");
    DIA_LENNART_CQ003_BEFOREDRINK();
    MDL_STARTFACEANI(SELF, S_NEUTRAL, 1065353216, -1082130432);
    B_GIVEINVITEMS(OTHER, SELF, 36364, 1);
    AI_WAITTILLEND(SELF, OTHER);
    AI_STOPLOOKAT(SELF);
    AI_USEITEM(SELF, 36364);
    AI_WAITTILLEND(SELF, OTHER);
    AI_LOOKATNPC(SELF, OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_CQ003_Yes_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_CQ003_Yes_15_03");
    INFO_CLEARCHOICES(68635);
    AI_LOGENTRY(TOPIC_CQ003, LOG_CQ003_LENNARTV2);
    CQ003_HAPPYCUSTOMER = (CQ003_HAPPYCUSTOMER) + (1);
    CQ003_HAPPYLENNART = 1;
    CQ003_TALKED = (CQ003_TALKED) + (1);
}

func void DIA_LENNART_CQ003_PARTYTIME_NO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_CQ003_No_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_CQ003_No_03_02");
    INFO_CLEARCHOICES(68635);
    AI_LOGENTRY(TOPIC_CQ003, LOG_CQ003_LENNARTNOTHAPPY);
    CQ003_HAPPYLENNART = 2;
    CQ003_TALKED = (CQ003_TALKED) + (1);
}

instance DIA_LENNART_Q205_ARMOR(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_Q205_ARMOR_CONDITION;
    INFORMATION = DIA_LENNART_Q205_ARMOR_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Roderich has instructed me to return this armor to you for repair.";
}

func int DIA_LENNART_Q205_ARMOR_CONDITION() {
    if (((NPC_HASITEMS(OTHER, 35509)) >= (1)) && ((LOG_GETSTATUS(MIS_Q205)) == (LOG_SUCCESS))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

var int LENNART_Q205_ARMOR_WORK;
var int LENNART_Q205_ARMOR_WORK_DAY;
func void DIA_LENNART_Q205_ARMOR_INFO() {
    LENNART_Q205_ARMOR_WORK = TRUE;
    LENNART_Q205_ARMOR_WORK_DAY = WLD_GETDAY();
    Q205_RENEGADEARMOR_SHOW();
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_Q205_Armor_15_01");
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_PLAYANI(SELF, T_STAND_2_COUNTING);
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Q205_Armor_03_02");
    AI_PLAYANI(SELF, T_COUNTING_2_STAND);
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Q205_Armor_03_03");
    Q205_RENEGADEARMOR_HIDE_LENNART();
}

instance DIA_LENNART_Q205_ARMORREADY(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_Q205_ARMORREADY_CONDITION;
    INFORMATION = DIA_LENNART_Q205_ARMORREADY_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_LENNART_Q205_ARMORREADY_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 68643)) && ((LOG_GETSTATUS(MIS_Q205)) == (LOG_SUCCESS))) {
        if (((LENNART_Q205_ARMOR_WORK) == (TRUE)) && ((LENNART_Q205_ARMOR_WORK_DAY) <= ((WLD_GETDAY()) - (1)))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_Q205_ARMORREADY_INFO() {
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Q205_ArmorReady_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Q205_ArmorReady_03_02");
    CREATEINVITEMS(SELF, 35488, 1);
    B_GIVEINVITEMS(SELF, OTHER, 35488, 1);
    AI_EQUIPARMOR(OTHER, 35488);
    Q205_WEGOTARMOR = TRUE;
}

instance DIA_LENNART_WELCOMEMIL(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_WELCOMEMIL_CONDITION;
    INFORMATION = DIA_LENNART_WELCOMEMIL_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_LENNART_WELCOMEMIL_CONDITION() {
    if (((OTHER.GUILD) == (GIL_MIL)) && ((BECOMEAGUARD_TAVERNPART) == (1))) {
        if (((NPC_GETDISTTOWP(SELF, "PARTM4_TAVERN_18")) <= (500)) && ((NPC_GETDISTTOWP(MIL_4001_OKTAV, "PARTM4_TAVERN_20")) <= (500))) {
            return TRUE;
        };
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_WELCOMEMIL_INFO() {
    TRIA_INVITE(MIL_4001_OKTAV);
    TRIA_START();
    AI_LOOKATNPC(OTHER, SELF);
    AI_LOOKATNPC(SELF, OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_WELCOMEMIL_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_WELCOMEMIL_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_WELCOMEMIL_03_03");
    TRIA_WAIT();
    TRIA_NEXT(MIL_4001_OKTAV);
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_WELCOMEMIL_03_04");
    TRIA_FINISH();
    AI_STOPLOOKAT(SELF);
    AI_STOPLOOKAT(OTHER);
    AI_STOPPROCESSINFOS(SELF);
}

instance DIA_LENNART_AFTERPARTY(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_AFTERPARTY_CONDITION;
    INFORMATION = DIA_LENNART_AFTERPARTY_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Apparently you have better armor for me.";
}

func int DIA_LENNART_AFTERPARTY_CONDITION() {
    if (NPC_KNOWSINFO(OTHER, 66077)) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_AFTERPARTY_ADDCHOICE() {
    INFO_CLEARCHOICES(68667);
    INFO_CLEARCHOICES(68664);
    INFO_CLEARCHOICES(68654);
    if ((LENNART_MISTAKE) == (FALSE)) {
        INFO_ADDCHOICE(68654, "What mistakes are you talking about?", 68659);
    };
    if ((LENNART_WHYJOIN) == (FALSE)) {
        INFO_ADDCHOICE(68654, "How did you get into the guard?", 68662);
    };
    INFO_ADDCHOICE(68654, "Thanks for talking to me, but I have to go.", 68663);
    RESTOREROUTINE_RODERICH();
    RESTOREROUTINE_OKTAV();
}

func void LENNART_GIVEHEROARMORMIL() {
    CREATEINVITEMS(NONE_2009_LENNART, 35482, 1);
    B_GIVEINVITEMS(NONE_2009_LENNART, HERO, 35482, 1);
    HERO.AIVAR[4] = FALSE;
}

func void DIA_LENNART_AFTERPARTY_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_AFTERPARTY_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_03_05");
    AI_FUNCTION(SELF, 68657);
    AI_OUTPUT(HERO, SELF, "DIA_Lennart_AFTERPARTY_15_06");
    AI_EQUIPARMOR(HERO, 35482);
    AI_PLAYANI(HERO, R_SCRATCHLSHOULDER);
    AI_WAITTILLEND(SELF, OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_03_07");
    AI_OUTPUT(HERO, SELF, "DIA_Lennart_AFTERPARTY_15_08");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_03_09");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_03_10");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_03_11");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_AFTERPARTY_15_12");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_03_13");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_03_14");
    DIA_LENNART_AFTERPARTY_ADDCHOICE();
}

func void DIA_LENNART_AFTERPARTY_MISTAKE() {
    LENNART_MISTAKE = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_AFTERPARTY_Mistake_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_Mistake_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_Mistake_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_Mistake_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_Mistake_03_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_Mistake_03_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_Mistake_03_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_Mistake_03_08");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_Mistake_03_09");
    INFO_CLEARCHOICES(68654);
    INFO_ADDCHOICE(68654, "So Roderich made a big mistake.", 68660);
    INFO_ADDCHOICE(68654, "It seems he had no other choice.", 68661);
    INFO_CLEARCHOICES(68664);
    INFO_ADDCHOICE(68664, "So Roderich made a big mistake.", 68660);
    INFO_ADDCHOICE(68664, "It seems he had no other choice.", 68661);
}

func void DIA_LENNART_AFTERPARTY_MISTAKE_RODERICH() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_AFTERPARTY_Roderich_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_AFTERPARTY_Roderich_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_Roderich_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_Roderich_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_Roderich_03_05");
    DIA_LENNART_AFTERPARTY_ADDCHOICE();
}

func void DIA_LENNART_AFTERPARTY_MISTAKE_OTHERWAY() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_AFTERPARTY_OtherWay_15_01");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_AFTERPARTY_OtherWay_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_OtherWay_03_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_AFTERPARTY_OtherWay_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_OtherWay_03_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_OtherWay_03_06");
    DIA_LENNART_AFTERPARTY_ADDCHOICE();
}

func void DIA_LENNART_AFTERPARTY_HOW() {
    LENNART_WHYJOIN = TRUE;
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_AFTERPARTY_How_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_How_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_How_03_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_How_03_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_How_03_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_How_03_06");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_AFTERPARTY_How_15_07");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_How_03_08");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_AFTERPARTY_How_03_09");
    DIA_LENNART_AFTERPARTY_ADDCHOICE();
}

func void DIA_LENNART_AFTERPARTY_GOODBYE() {
    INFO_CLEARCHOICES(68654);
    DIA_LENNART_EXIT_INFO();
    Q203_LENNART_TALKED = TRUE;
    if ((Q203_OKTAV_TALKED) == (TRUE)) {
        AI_LOGENTRY(TOPIC_Q203, LOG_Q203_LENNARTDONE);
    };
    AI_LOGENTRY(TOPIC_Q203, LOG_Q203_LENNARTDONENOOKTAV);
}

instance DIA_LENNART_RODERICHMISTAKE(C_INFO) {
    NPC = 53001;
    NR = 20;
    CONDITION = DIA_LENNART_RODERICHMISTAKE_CONDITION;
    INFORMATION = DIA_LENNART_RODERICHMISTAKE_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "What Roderich mistakes are you talking about?";
}

func int DIA_LENNART_RODERICHMISTAKE_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 68654)) && ((LENNART_MISTAKE) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_RODERICHMISTAKE_INFO() {
    DIA_LENNART_AFTERPARTY_MISTAKE();
}

instance DIA_LENNART_WHYJOIN(C_INFO) {
    NPC = 53001;
    NR = 20;
    CONDITION = DIA_LENNART_WHYJOIN_CONDITION;
    INFORMATION = DIA_LENNART_WHYJOIN_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "How did you get into the guard?";
}

func int DIA_LENNART_WHYJOIN_CONDITION() {
    if ((NPC_KNOWSINFO(OTHER, 68654)) && ((LENNART_WHYJOIN) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_WHYJOIN_INFO() {
    DIA_LENNART_AFTERPARTY_HOW();
}

instance DIA_LENNART_BOLT(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_BOLT_CONDITION;
    INFORMATION = DIA_LENNART_BOLT_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Have you seen a similar bolt head somewhere?";
}

func int DIA_LENNART_BOLT_CONDITION() {
    if (((LOG_GETSTATUS(MIS_Q309)) == (LOG_RUNNING)) && ((NPC_HASITEMS(OTHER, 37293)) >= (1))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_BOLT_INFO() {
    if ((HERO.GUILD) == (GIL_MIL)) {
        AI_OUTPUT(OTHER, SELF, "DIA_Lennart_Bolt_15_01");
    };
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_Bolt_15_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Bolt_03_03");
    AI_WAITTILLEND(SELF, OTHER);
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_Bolt_15_04");
    if ((NPC_HASITEMS(SELF, 36067)) == (0)) {
        AI_STOPLOOKAT(SELF);
        CREATEINVITEM(SELF, 36067);
        AI_USEITEMTOSTATE(SELF, 36067, 1);
        AI_WAIT(SELF, 1077936128);
        AI_USEITEMTOSTATE(SELF, 36067, -(1));
        AI_LOOKATNPC(SELF, OTHER);
    };
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Bolt_03_05");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_Bolt_15_06");
    if ((HERO.GUILD) == (GIL_MIL)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Bolt_03_07");
        AI_OUTPUT(OTHER, SELF, "DIA_Lennart_Bolt_15_08");
    };
    if ((HERO.GUILD) == (GIL_SLD)) {
        AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Bolt_03_09");
    };
    AI_LOGENTRY(TOPIC_Q309, LOG_Q309_LENNART_BOLT);
}

instance DIA_LENNART_QM302_START(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_QM302_START_CONDITION;
    INFORMATION = DIA_LENNART_QM302_START_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_LENNART_QM302_START_CONDITION() {
    if ((((KAPITEL) >= (2)) && ((LOG_GETSTATUS(MIS_Q205)) == (LOG_SUCCESS))) && ((HERO.GUILD) == (GIL_MIL))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_QM302_START_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Start_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Start_03_03");
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_Start_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Start_03_05");
    AI_RESETFACEANI(OTHER);
    INFO_CLEARCHOICES(68673);
    INFO_ADDCHOICE(68673, "Do you have any equipment in mind?", 68677);
    INFO_ADDCHOICE(68673, "This is not a good time to save money.", 68676);
}

func void DIA_LENNART_QM302_START_NOGOOD() {
    AI_STARTFACEANI(OTHER, S_ANGRY, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_Start_NoGood_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Start_NoGood_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_Start_NoGood_15_03");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Start_NoGood_03_04");
    AI_RESETFACEANI(OTHER);
    AI_RESETFACEANI(SELF);
}

func void DIA_LENNART_QM302_START_SOMETHING() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_Start_Something_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Start_Something_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Start_Something_03_03");
    INFO_ADDCHOICE(68673, "What should I do specifically?", 68678);
}

func void DIA_LENNART_QM302_START_SOMETHING_WHAT() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_Start_What_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Start_What_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_Start_What_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Start_What_03_04");
    INFO_ADDCHOICE(68673, "I'll take care of those crossbows.", 68679);
}

func void DIA_LENNART_QM302_START_SOMETHING_WHAT_DOIT() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_Start_DoIt_15_01");
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Start_DoIt_03_02");
    INFO_CLEARCHOICES(68673);
    LOG_CREATETOPIC(TOPIC_QM302, LOG_MISSION);
    LOG_SETSTATUS(_@(MIS_QM302), TOPIC_QM302, LOG_RUNNING);
    AI_LOGENTRY(TOPIC_QM302, LOG_QM302_START);
}

instance DIA_LENNART_QM302_AFTERHUNT(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_QM302_AFTERHUNT_CONDITION;
    INFORMATION = DIA_LENNART_QM302_AFTERHUNT_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_LENNART_QM302_AFTERHUNT_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_QM302)) == (LOG_RUNNING)) && (NPC_ISINSTATE(SELF, 61599))) && (NPC_KNOWSINFO(OTHER, 70696))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_QM302_AFTERHUNT_INFO() {
    AI_FUNCTION(SELF, 63503);
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_AfterHunt_03_01");
    AI_STARTFACEANI(OTHER, S_SURPRISE, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_AfterHunt_15_02");
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_AfterHunt_03_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_AfterHunt_15_04");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_AfterHunt_03_05");
    INFO_CLEARCHOICES(68680);
    INFO_ADDCHOICE(68680, "It is indeed a solid piece of equipment.", 68683);
    INFO_ADDCHOICE(68680, "No, it's not.", 68684);
}

func void DIA_LENNART_QM302_AFTERHUNT_YES() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_AfterHunt_Yes_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_AfterHunt_Yes_03_02");
    AI_STARTFACEANI(OTHER, S_TIRED, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_AfterHunt_Yes_15_03");
    AI_RESETFACEANI(OTHER);
    NPC_REMOVEINVITEMS(HERO, 37226, 1);
    INFO_CLEARCHOICES(68680);
    AI_LOGENTRY(TOPIC_QM302, LOG_QM302_FINISH_V1);
    LOG_SETSTATUS(_@(MIS_QM302), TOPIC_QM302, LOG_SUCCESS);
    B_GIVEPLAYERXP(XP_QM302_FINISH_V1);
}

func void DIA_LENNART_QM302_AFTERHUNT_NO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_AfterHunt_No_15_01");
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_AfterHunt_No_03_02");
    B_GIVEINVITEMS(OTHER, SELF, 37226, 1);
    AI_UNEQUIPWEAPONS(SELF);
    AI_STOPLOOKAT(SELF);
    AI_FUNCTION(SELF, 68686);
    AI_READYRANGEDWEAPON(SELF);
    AI_STARTFACEANI(SELF, S_THINK, 1, -(1));
    AI_PLAYANI(SELF, "T_CROSSBOWGUARD_STRETCH");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_AfterHunt_No_03_03");
    AI_REMOVEWEAPON(SELF);
    AI_FUNCTION(SELF, 68685);
    AI_STARTFACEANI(SELF, S_SMILE, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_AfterHunt_No_03_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_AfterHunt_No_15_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_AfterHunt_No_03_06");
    AI_RESETFACEANI(SELF);
    INFO_CLEARCHOICES(68680);
}

func void LENNART_QM302_REMOVECROSSBOW() {
    DUMMYFUNCWITHSTRINGPARAMETER("");
    NPC_REMOVEINVITEMS(NONE_2009_LENNART, 37226, 1);
}

func void LENNART_QM302_APPLYCROSSBOW() {
    EQUIPWEAPON(NONE_2009_LENNART, 37226);
    CREATEINVITEMS(NONE_2009_LENNART, 34384, 10);
    DUMMYFUNCWITHSTRINGPARAMETER("");
}

instance DIA_LENNART_QM302_OFFER(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_QM302_OFFER_CONDITION;
    INFORMATION = DIA_LENNART_QM302_OFFER_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I don't understand...";
}

func int DIA_LENNART_QM302_OFFER_CONDITION() {
    if (((LOG_GETSTATUS(MIS_QM302)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 68680))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_QM302_OFFER_INFO() {
    B_SAY(OTHER, SELF, "$MARVIN_DontUnderstand");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Offer_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Offer_03_03");
}

instance DIA_LENNART_QM302_ARAXOS(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_QM302_ARAXOS_CONDITION;
    INFORMATION = DIA_LENNART_QM302_ARAXOS_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "Should I require the Guild to pay for all this stuff?";
}

func int DIA_LENNART_QM302_ARAXOS_CONDITION() {
    if (((LOG_GETSTATUS(MIS_QM302)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 68687))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_QM302_ARAXOS_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_Araxos_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Araxos_03_02");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Araxos_03_03");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_Araxos_15_04");
    AI_LOGENTRY(TOPIC_QM302, LOG_QM302_LENNART_BADCROSSBOW);
}

instance DIA_LENNART_QM302_FINISH(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_QM302_FINISH_CONDITION;
    INFORMATION = DIA_LENNART_QM302_FINISH_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "We need to get people together for training. Detlow's waiting for you.";
}

func int DIA_LENNART_QM302_FINISH_CONDITION() {
    if (((LOG_GETSTATUS(MIS_QM302)) == (LOG_RUNNING)) && (NPC_KNOWSINFO(OTHER, 71118))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_QM302_FINISH_INFO() {
    QM302_DETLOWTRAINING = TRUE;
    QM302_DETLOWTRAINING_DAY = WLD_GETDAY();
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_Finish_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Finish_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_Finish_15_03");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Finish_03_04");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM302_Finish_15_05");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Finish_03_06");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Finish_03_07");
    AI_LOGENTRY(TOPIC_QM302, LOG_QM302_FINISH_V2);
    LOG_SETSTATUS(_@(MIS_QM302), TOPIC_QM302, LOG_SUCCESS);
    B_GIVEPLAYERXP(XP_QM302_FINISH_V2);
    CREATEINVITEMS(SELF, 34203, QM302_FINISH);
    B_GIVEINVITEMS(SELF, OTHER, 34203, QM302_FINISH);
    QM302_PREPAREDETLOWTRAINING();
    AI_STOPPROCESSINFOS(SELF);
    if (((KAPITEL) != (5)) && ((LOG_GETSTATUS(MIS_Q308)) != (LOG_RUNNING))) {
        B_STARTOTHERROUTINE(VLK_2261_BODOWIN, START);
        NPC_REFRESH(VLK_2261_BODOWIN);
    };
}

instance DIA_LENNART_QM302_FAILED(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_QM302_FAILED_CONDITION;
    INFORMATION = DIA_LENNART_QM302_FAILED_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_LENNART_QM302_FAILED_CONDITION() {
    if (((((KAPITEL) >= (4)) && ((LOG_GETSTATUS(MIS_QM302)) == (LOG_RUNNING))) && ((LOG_GETSTATUS(MIS_Q401)) == (LOG_SUCCESS))) && ((LOG_GETSTATUS(MIS_QM401)) != (LOG_SUCCESS))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_QM302_FAILED_INFO() {
    AI_STARTFACEANI(SELF, S_ANGRY, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Failed_03_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM302_Failed_03_02");
    AI_RESETFACEANI(SELF);
    AI_LOGENTRY(TOPIC_QM302, LOG_QM302_FAILED);
    AI_FUNCTION(SELF, 63516);
    LOG_SETSTATUS(_@(MIS_QM302), TOPIC_QM302, LOG_FAILED);
}

instance DIA_LENNART_QM303_START(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_QM303_START_CONDITION;
    INFORMATION = DIA_LENNART_QM303_START_INFO;
    PERMANENT = FALSE;
    IMPORTANT = TRUE;
}

func int DIA_LENNART_QM303_START_CONDITION() {
    if (((LOG_GETSTATUS(MIS_QM201)) == (LOG_SUCCESS)) && ((KAPITEL) >= (3))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

var int LENNART_QM303_START_HOWMANY;
var int LENNART_QM303_START_FOOD;
var int LENNART_QM303_START_ONLY;
func void DIA_LENNART_QM303_START_NEXT() {
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM303_Start_Next_03_01");
    AI_RESETFACEANI(SELF);
    LOG_CREATETOPIC(TOPIC_QM303, LOG_MISSION);
    LOG_SETSTATUS(_@(MIS_QM303), TOPIC_QM303, LOG_RUNNING);
    AI_LOGENTRY(TOPIC_QM303, LOG_QM303_START);
    INFO_CLEARCHOICES(68699);
    QM303_PREPARENPC();
}

func void DIA_LENNART_QM303_START_CHOICES() {
    INFO_CLEARCHOICES(68699);
    AI_RESETFACEANI(OTHER);
    if ((((LENNART_QM303_START_ONLY) == (TRUE)) && ((LENNART_QM303_START_FOOD) == (TRUE))) && ((LENNART_QM303_START_HOWMANY) == (TRUE))) {
        DIA_LENNART_QM303_START_NEXT();
    };
    if ((LENNART_QM303_START_ONLY) == (FALSE)) {
        INFO_ADDCHOICE(68699, "Were they supposed to take care of just that?", 68709);
    };
    if ((LENNART_QM303_START_FOOD) == (FALSE)) {
        INFO_ADDCHOICE(68699, "How much food were they supposed to bring?", 68708);
    };
    if ((LENNART_QM303_START_HOWMANY) == (FALSE)) {
        INFO_ADDCHOICE(68699, "How many were there?", 68707);
    };
}

func void DIA_LENNART_QM303_START_INFO() {
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM303_Start_03_01");
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM303_Start_15_02");
    AI_RESETFACEANI(OTHER);
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM303_Start_03_03");
    DIA_LENNART_QM303_START_CHOICES();
}

func void DIA_LENNART_QM303_START_HOWMANY() {
    LENNART_QM303_START_HOWMANY = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM303_Start_HowMany_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM303_Start_HowMany_03_02");
    DIA_LENNART_QM303_START_CHOICES();
}

func void DIA_LENNART_QM303_START_FOOD() {
    LENNART_QM303_START_FOOD = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM303_Start_Food_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM303_Start_Food_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM303_Start_Food_15_03");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM303_Start_Food_03_04");
    AI_RESETFACEANI(SELF);
    DIA_LENNART_QM303_START_CHOICES();
}

func void DIA_LENNART_QM303_START_ONLY() {
    LENNART_QM303_START_ONLY = TRUE;
    AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM303_Start_Only_15_01");
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM303_Start_Only_03_02");
    DIA_LENNART_QM303_START_CHOICES();
}

instance DIA_LENNART_QM303_FINISH(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_QM303_FINISH_CONDITION;
    INFORMATION = DIA_LENNART_QM303_FINISH_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I investigated the missing transport.";
}

func int DIA_LENNART_QM303_FINISH_CONDITION() {
    if ((((LOG_GETSTATUS(MIS_QM303)) == (LOG_RUNNING)) && ((QM303_ALLTASKDONE) == (TRUE))) && ((NPC_HASITEMS(OTHER, 37229)) >= (3))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_QM303_FINISH_INFO() {
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM303_Finish_15_01");
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM303_Finish_03_02");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM303_Finish_15_03");
    AI_STARTFACEANI(SELF, S_TIRED, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM303_Finish_03_04");
    if ((QM303_MEETSHADOWBEAST) == (FALSE)) {
        AI_STARTFACEANI(OTHER, S_WHAT, 1, -(1));
        AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM303_Finish_15_05");
    };
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM303_Finish_15_06");
    if (NPC_ISDEAD(SHADOWBEAST_QM303)) {
        AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM303_Finish_15_07");
    };
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM303_Finish_15_08");
    AI_RESETFACEANI(OTHER);
    AI_STARTFACEANI(SELF, S_WHAT, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM303_Finish_03_09");
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_QM303_Finish_15_10");
    AI_RESETFACEANI(SELF);
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_QM303_Finish_03_11");
    AI_LOGENTRY(TOPIC_QM303, LOG_QM303_FINISH);
    QM303_FINISHQUEST();
    QM303_REMOVENPC();
}

instance DIA_LENNART_PROMOTION_TIER1(C_INFO) {
    NPC = 53001;
    NR = 1;
    CONDITION = DIA_LENNART_PROMOTION_TIER1_CONDITION;
    INFORMATION = DIA_LENNART_PROMOTION_TIER1_INFO;
    PERMANENT = FALSE;
    DESCRIPTION = "I'm supposed to get new armor from you.";
}

func int DIA_LENNART_PROMOTION_TIER1_CONDITION() {
    if (((MARVIN_MILITIASPECIALIZATION) == (MILITIA_SPECIALIZATION_FIGHTER)) || ((MARVIN_MILITIASPECIALIZATION) == (MILITIA_SPECIALIZATION_CROSSBOWMAN))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_PROMOTION_TIER1_INFO() {
    if ((MARVIN_MILITIASPECIALIZATION) == (MILITIA_SPECIALIZATION_FIGHTER)) {
        CREATEINVITEMS(SELF, 35501, 1);
        B_GIVEINVITEMS(SELF, OTHER, 35501, 1);
        AI_EQUIPARMOR(SELF, 35501);
        AI_EQUIPARMOR(OTHER, 35501);
    };
    if ((MARVIN_MILITIASPECIALIZATION) == (MILITIA_SPECIALIZATION_CROSSBOWMAN)) {
        CREATEINVITEMS(SELF, 35493, 1);
        B_GIVEINVITEMS(SELF, OTHER, 35493, 1);
        AI_EQUIPARMOR(OTHER, 35493);
    };
    AI_OUTPUT(OTHER, SELF, "DIA_Lennart_Promotion_Tier1_15_01");
    AI_STARTFACEANI(SELF, S_SMUG, 1, -(1));
    AI_OUTPUT(SELF, OTHER, "DIA_Lennart_Promotion_Tier1_03_02");
}

instance DIA_LENNART_PICKPOCKET(C_INFO) {
    NPC = 53001;
    NR = 900;
    CONDITION = DIA_LENNART_PICKPOCKET_CONDITION;
    INFORMATION = DIA_LENNART_PICKPOCKET_INFO;
    PERMANENT = TRUE;
    DESCRIPTION = PICKPOCKET_80;
}

func int DIA_LENNART_PICKPOCKET_CONDITION() {
    if (((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (1)) && ((SELF.AIVAR[6]) == (FALSE))) {
        return TRUE;
    };
    return 0 /* !broken stack! */;
}

func void DIA_LENNART_PICKPOCKET_INFO() {
    INFO_CLEARCHOICES(68716);
    INFO_ADDCHOICE(68716, DIALOG_BACK, 68720);
    INFO_ADDCHOICE(68716, DIALOG_PICKPOCKET, 68719);
}

func void DIA_LENNART_PICKPOCKET_DOIT() {
    if ((NPC_GETTALENTSKILL(OTHER, NPC_TALENT_PICKPOCKET)) >= (2)) {
        CREATEINVITEMS(SELF, 35980, 1);
        B_GIVEINVITEMS(SELF, OTHER, 35980, 1);
        B_PICKPOCKET_AMBIENT_TIER_2();
        SELF.AIVAR[6] = TRUE;
        INFO_CLEARCHOICES(68716);
    };
    AI_PLAYANI(HERO, T_CANNOTTAKE);
    PRINTSCREEN(PRINT_CANTPICKPOCKETTHISPERSON, -(1), -(1), FONT_SCREEN, 4);
    INFO_CLEARCHOICES(68716);
}

func void DIA_LENNART_PICKPOCKET_BACK() {
    INFO_CLEARCHOICES(68716);
}

