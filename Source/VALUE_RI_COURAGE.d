const int VALUE_RI_COURAGE = 300;
const int RI_COURAGE_DEX = 2;
const int RI_COURAGE_STR = 2;
const int VALUE_RI_GRACE = 300;
const int RI_GRACE_HP = 12;
const int RI_GRACE_MANA = 3;
const int VALUE_RI_GAURRING = 1000;
const int GAURRING_STR = 6;
const int GAURRING_EDGE = 12;
const int VALUE_RI_NOVICE = 400;
const int NOVICERING_MANA = 5;
const int VALUE_RI_FIST = 500;
const int FISTRING_HP = 30;
const int VALUE_RI_MAGE = 1800;
const int MAGERING_MANA = 5;
const int VALUE_RI_THIEF = 400;
const int VALUE_RI_WOLFSONSET = 1000;
const int WOLFSONSET_STR = 3;
const int WOLFSONSET_PROTMAGIC = 5;
const int WOLFSONSET_2H = 5;
const int VALUE_RI_SOUTHERNERSET = 1000;
const int SOUTHERNERSET_DEX = 3;
const int SOUTHERNERSET_PROTFIRE = 5;
const int SOUTHERNERSET_2H = 5;
const int VALUE_RI_WATERMAGESET = 1000;
const int WATERMAGESET_HPMAX = 10;
const int WATERMAGESET_MANAMAX = 5;
const int VALUE_RI_WATERCRICLESET = 1000;
const int WATERCRICLESET_MANAMAX = 10;
const int WATERCRICLESET_PROTALL = 2;
const int WATERCIRCLESET_ALLWEAPON = 5;
const int VALUE_RI_PIRATESET = 1000;
const int PIRATESET_DEX = 3;
const int PIRATESET_PROTPOINT = 5;
const int PIRATESET_1H = 5;
const int VALUE_RI_NORDMARSET = 1000;
const int NORDMARSET_STR = 3;
const int NORDMARSET_HPMAX = 10;
const int NORDMARSET_1H = 5;
const int VALUE_RI_ARCHOLOSSET = 1000;
const int ARCHOLOSSET_STR = 3;
const int ARCHOLOSSET_PROTBLUNT = 5;
const int ARCHOLOSSET_CROSSBOW = 5;
const int VALUE_RI_MYRTANASET = 1000;
const int MYRTANASET_DEX = 3;
const int MYRTANASET_PROTEDGE = 5;
const int MYRTANASET_BOW = 5;
instance RINGTESTPACKET(C_ITEM) {
    NAME = "Ring Starter Pack";
    MAINFLAG = ITEM_KAT_NONE;
    VISUAL = "ItMi_Packet.3ds";
    SCEMENAME = SCEME_MAPSEALED;
    ON_STATE[0] = USE_RINGTESTPACKET;
    MATERIAL = MAT_LEATHER;
    DESCRIPTION = NAME;
}

func void USE_RINGTESTPACKET() {
    CREATEINVITEMS(HERO, 34472, 1);
    CREATEINVITEMS(HERO, 34475, 1);
    CREATEINVITEMS(HERO, 34478, 1);
    CREATEINVITEMS(HERO, 34481, 1);
    CREATEINVITEMS(HERO, 34490, 1);
    CREATEINVITEMS(HERO, 34493, 1);
    CREATEINVITEMS(HERO, 34484, 1);
    CREATEINVITEMS(HERO, 34487, 1);
    CREATEINVITEMS(HERO, 34496, 1);
    CREATEINVITEMS(HERO, 34499, 1);
    CREATEINVITEMS(HERO, 34502, 1);
    CREATEINVITEMS(HERO, 34505, 1);
    CREATEINVITEMS(HERO, 34508, 1);
    CREATEINVITEMS(HERO, 34511, 1);
    CREATEINVITEMS(HERO, 34514, 1);
    CREATEINVITEMS(HERO, 34517, 1);
    CREATEINVITEMS(HERO, 34520, 1);
    CREATEINVITEMS(HERO, 34523, 1);
    CREATEINVITEMS(HERO, 34526, 1);
    CREATEINVITEMS(HERO, 34529, 1);
    CREATEINVITEMS(HERO, 34532, 1);
    CREATEINVITEMS(HERO, 34535, 1);
    CREATEINVITEMS(HERO, 37146, 1);
    CREATEINVITEMS(HERO, 38003, 1);
    CREATEINVITEMS(HERO, 38012, 2);
    CREATEINVITEMS(HERO, 38015, 2);
    CREATEINVITEMS(HERO, 38021, 2);
    CREATEINVITEMS(HERO, 38024, 2);
    CREATEINVITEMS(HERO, 38027, 2);
    CREATEINVITEMS(HERO, 38030, 2);
    CREATEINVITEMS(HERO, 38033, 2);
    CREATEINVITEMS(HERO, 38036, 2);
    CREATEINVITEMS(HERO, 38040, 2);
    CREATEINVITEMS(HERO, 38043, 2);
    CREATEINVITEMS(HERO, 38046, 2);
    CREATEINVITEMS(HERO, 38049, 2);
    CREATEINVITEMS(HERO, 38006, 1);
    CREATEINVITEMS(HERO, 38009, 1);
    SND_PLAY(GELDBEUTEL);
}

instance ITRI_COURAGE_01(C_ITEM) {
    NAME = RINGNAME_COURAGE_01;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_COURAGE;
    VISUAL = "ItMi_SilverRing.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_ITRI_COURAGE_01;
    ON_UNEQUIP = UNEQUIP_ITRI_COURAGE_01;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[2] = NAME_BONUS_STR;
    COUNT[2] = RI_COURAGE_STR;
    TEXT[3] = NAME_BONUS_DEX;
    COUNT[3] = RI_COURAGE_DEX;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

func void EQUIP_ITRI_COURAGE_01() {
    NPC_CHANGEATTRIBUTE(SELF, ATR_STRENGTH, +(RI_COURAGE_STR));
    NPC_CHANGEATTRIBUTE(SELF, ATR_DEXTERITY, +(RI_COURAGE_DEX));
}

func void UNEQUIP_ITRI_COURAGE_01() {
    NPC_CHANGEATTRIBUTE(SELF, ATR_STRENGTH, -(RI_COURAGE_STR));
    NPC_CHANGEATTRIBUTE(SELF, ATR_DEXTERITY, -(RI_COURAGE_DEX));
}

instance ITRI_INNOSGRACE_01(C_ITEM) {
    NAME = RINGNAME_INNOSGRACE_01;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_GRACE;
    VISUAL = "itri_prot_total_02.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_ITRI_INNOSGRACE_01;
    ON_UNEQUIP = UNEQUIP_ITRI_INNOSGRACE_01;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[0] = ITEMDESC_ITRI_INNOSGRACE_01_1;
    TEXT[1] = ITEMDESC_ITRI_INNOSGRACE_01_2;
    TEXT[3] = NAME_BONUS_HPMAX;
    COUNT[3] = RI_GRACE_HP;
    TEXT[4] = NAME_BONUS_MANAMAX;
    COUNT[4] = RI_GRACE_MANA;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

func void EQUIP_ITRI_INNOSGRACE_01() {
    NPC_CHANGEATTRIBUTE(SELF, ATR_HITPOINTS_MAX, +(RI_GRACE_HP));
    MARVINTRANSFORMHP = (MARVINTRANSFORMHP) + (RI_GRACE_HP);
    NPC_CHANGEATTRIBUTE(SELF, ATR_MANA_MAX, +(RI_GRACE_MANA));
    B_BLESSFROMINNOS();
}

func void UNEQUIP_ITRI_INNOSGRACE_01() {
    NPC_CHANGEATTRIBUTE(SELF, ATR_HITPOINTS_MAX, -(RI_GRACE_HP));
    MARVINTRANSFORMHP = (MARVINTRANSFORMHP) - (RI_GRACE_HP);
    NPC_CHANGEATTRIBUTE(SELF, ATR_MANA_MAX, -(RI_GRACE_MANA));
    B_BLESSFROMINNOSISNOLONGER();
}

instance ITRI_GAURRING(C_ITEM) {
    NAME = RINGNAME_GAURRING;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_GAURRING;
    VISUAL = "ItRi_Hp_Mana_01.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_ITRI_GAURRING;
    ON_UNEQUIP = UNEQUIP_ITRI_GAURRING;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[2] = NAME_BONUS_STR;
    COUNT[2] = GAURRING_STR;
    TEXT[3] = NAME_PROT_EDGE;
    COUNT[3] = GAURRING_EDGE;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

func void EQUIP_ITRI_GAURRING() {
    NPC_CHANGEATTRIBUTE(SELF, ATR_STRENGTH, +(GAURRING_STR));
    SELF.PROTECTION[2] += GAURRING_EDGE;
}

func void UNEQUIP_ITRI_GAURRING() {
    NPC_CHANGEATTRIBUTE(SELF, ATR_STRENGTH, -(GAURRING_STR));
    SELF.PROTECTION[2] -= GAURRING_EDGE;
}

instance ITRI_NOVICE_01(C_ITEM) {
    NAME = RINGNAME_NOVICE_01;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_NOVICE;
    VISUAL = "itri_mana_01.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_ITRI_NOVICE_01;
    ON_UNEQUIP = UNEQUIP_ITRI_NOVICE_01;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[2] = NAME_MAGICDAMAGE_BONUS;
    COUNT[2] = 5;
    TEXT[3] = NAME_BONUS_MANAMAX;
    COUNT[3] = NOVICERING_MANA;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

func void EQUIP_ITRI_NOVICE_01() {
    if ((SELF.ID) == (0)) {
        RESERVED_VAR_INT_05 += 1;
    };
    NPC_CHANGEATTRIBUTE(SELF, ATR_MANA_MAX, +(NOVICERING_MANA));
}

func void UNEQUIP_ITRI_NOVICE_01() {
    if ((SELF.ID) == (0)) {
        RESERVED_VAR_INT_05 -= 1;
    };
    NPC_CHANGEATTRIBUTE(SELF, ATR_MANA_MAX, -(NOVICERING_MANA));
}

instance ITRI_FIST_01(C_ITEM) {
    NAME = RINGNAME_FIST_01;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_FIST;
    VISUAL = "itri_prot_fire_02.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_FIST_01;
    ON_UNEQUIP = UNEQUIP_FIST_01;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[0] = ITEMDESC_ITRI_FIST_01_1;
    TEXT[1] = ITEMDESC_ITRI_FIST_01_2;
    TEXT[3] = ITEMDESC_ITRI_FIST_01_3;
    TEXT[4] = NAME_BONUS_HPMAX;
    COUNT[4] = FISTRING_HP;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

var int ITRI_FIST_01_COUNT;
var int ITRI_FIST_01_STR;
var int ITRI_FIST_01_STR_READY;
func void EQUIP_FIST_01() {
    MOLERAT_SEEDS_RANDOMIZER = HERO.ATTRIBUTE[4];
    ITRI_FIST_01_COUNT = (ITRI_FIST_01_COUNT) + (1);
    if ((ITRI_FIST_01_COUNT) == (2)) {
        if ((ITRI_FIST_01_STR_READY) == (FALSE)) {
            if (((NPC_HASEQUIPPEDRANGEDWEAPON(HERO)) == (FALSE)) && ((NPC_HASEQUIPPEDMELEEWEAPON(HERO)) == (FALSE))) {
                ITRI_FIST_01_STR_READY = TRUE;
                ARAXOS_HUNTERSREPUTATION = TRUE;
                NPC_CHANGEATTRIBUTE(HERO, ATR_STRENGTH, +((MOLERAT_SEEDS_RANDOMIZER) * (3)));
                PRINTSCREENS(PRINT_BIGGERSTR, -(1), -(1), FONT_SCREENSMALL, 3);
            };
        };
    };
    NPC_CHANGEATTRIBUTE(HERO, ATR_HITPOINTS_MAX, +(FISTRING_HP));
    NPC_CHANGEATTRIBUTE(HERO, ATR_HITPOINTS, +(FISTRING_HP));
    MARVINTRANSFORMHP = (MARVINTRANSFORMHP) + (FISTRING_HP);
}

func void UNEQUIP_FIST_01() {
    ITRI_FIST_01_COUNT = (ITRI_FIST_01_COUNT) - (1);
    if ((ITRI_FIST_01_COUNT) < (2)) {
        if (((ITRI_FIST_01_STR_READY) == (TRUE)) || ((ITRI_FIST_01_STR_READY) == (2))) {
            ARAXOS_HUNTERSREPUTATION = FALSE;
            ITRI_FIST_01_STR_READY = FALSE;
            HERO.ATTRIBUTE[4] = (HERO.ATTRIBUTE[4]) - ((MOLERAT_SEEDS_RANDOMIZER) * (3));
        };
    };
    HERO.ATTRIBUTE[1] = (HERO.ATTRIBUTE[1]) - (FISTRING_HP);
    if ((HERO.ATTRIBUTE[0]) >= (FISTRING_HP)) {
        HERO.ATTRIBUTE[0] = (HERO.ATTRIBUTE[0]) - (FISTRING_HP);
    };
    HERO.ATTRIBUTE[0] = 2;
    MARVINTRANSFORMHP = (MARVINTRANSFORMHP) - (FISTRING_HP);
    WEAPON_STATCHECK(HERO);
}

instance ITRI_MAGE_01(C_ITEM) {
    NAME = RINGNAME_MAGE_01;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_MAGE;
    VISUAL = "ItRi_Hp_Mana_01.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_ITRI_MAGE_01;
    ON_UNEQUIP = UNEQUIP_ITRI_MAGE_01;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[2] = NAME_MAGICDAMAGE_BONUS;
    COUNT[2] = 15;
    TEXT[3] = NAME_BONUS_MANAMAX;
    COUNT[3] = MAGERING_MANA;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

func void EQUIP_ITRI_MAGE_01() {
    if ((SELF.ID) == (0)) {
        RESERVED_VAR_INT_05 += 3;
    };
    NPC_CHANGEATTRIBUTE(SELF, ATR_MANA_MAX, +(MAGERING_MANA));
}

func void UNEQUIP_ITRI_MAGE_01() {
    if ((SELF.ID) == (0)) {
        RESERVED_VAR_INT_05 -= 3;
    };
    NPC_CHANGEATTRIBUTE(SELF, ATR_MANA_MAX, -(MAGERING_MANA));
}

instance ITRI_THIEF_01(C_ITEM) {
    NAME = RINGNAME_THIEF_01;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_THIEF;
    VISUAL = "itri_dex_02.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_ITRI_THIEF_01;
    ON_UNEQUIP = UNEQUIP_ITRI_THIEF_01;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[1] = AMULETDESC_THIEF_01_1;
    TEXT[2] = AMULETDESC_THIEF_01_2;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

func void EQUIP_ITRI_THIEF_01() {
    if ((SELF.ID) == (0)) {
        SETBONUS_THIEF_COUNT += 1;
        SETBONUS_THIEF_EQUIP();
    };
}

func void UNEQUIP_ITRI_THIEF_01() {
    if ((SELF.ID) == (0)) {
        SETBONUS_THIEF_COUNT -= 1;
        SETBONUS_THIEF_UNEQUIP();
    };
}

instance ITRI_WOLFSONSET_01(C_ITEM) {
    NAME = RINGNAME_WOLFSONSET_01;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_WOLFSONSET;
    VISUAL = "ItRi_Hp_Mana_01.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_ITRI_WOLFSONSET_01;
    ON_UNEQUIP = UNEQUIP_ITRI_WOLFSONSET_01;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[1] = NAME_BONUS_STR;
    COUNT[1] = WOLFSONSET_STR;
    TEXT[2] = NAME_PROT_MAGIC;
    COUNT[2] = WOLFSONSET_PROTMAGIC;
    TEXT[3] = AMULETDESC_WOLFSONSET_01;
    TEXT[4] = BONUS_2H;
    COUNT[4] = WOLFSONSET_2H;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

func void EQUIP_ITRI_WOLFSONSET_01() {
    if ((SELF.ID) == (0)) {
        NPC_CHANGEATTRIBUTE(SELF, ATR_STRENGTH, +(WOLFSONSET_STR));
        SELF.PROTECTION[5] += WOLFSONSET_PROTMAGIC;
        SETBONUS_WOLFSONRINGS_COUNT = (SETBONUS_WOLFSONRINGS_COUNT) + (1);
        SETBONUS_WOLFSONRINGS_EQUIP();
    };
}

func void UNEQUIP_ITRI_WOLFSONSET_01() {
    if ((SELF.ID) == (0)) {
        NPC_CHANGEATTRIBUTE(SELF, ATR_STRENGTH, -(WOLFSONSET_STR));
        SELF.PROTECTION[5] -= WOLFSONSET_PROTMAGIC;
        SETBONUS_WOLFSONRINGS_COUNT = (SETBONUS_WOLFSONRINGS_COUNT) - (1);
        SETBONUS_WOLFSONRINGS_UNEQUIP();
    };
}

instance ITRI_SOUTHERNERSET_01(C_ITEM) {
    NAME = RINGNAME_SOUTHERNERSET_01;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_SOUTHERNERSET;
    VISUAL = "itri_dex_strg_01.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_ITRI_SOUTHERNERSET_01;
    ON_UNEQUIP = UNEQUIP_ITRI_SOUTHERNERSET_01;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[1] = NAME_BONUS_DEX;
    COUNT[1] = SOUTHERNERSET_DEX;
    TEXT[2] = NAME_PROT_FIRE;
    COUNT[2] = SOUTHERNERSET_PROTFIRE;
    TEXT[3] = AMULETDESC_SOUTHERNERSET_01;
    TEXT[4] = BONUS_2H;
    COUNT[4] = SOUTHERNERSET_2H;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

func void EQUIP_ITRI_SOUTHERNERSET_01() {
    if ((SELF.ID) == (0)) {
        NPC_CHANGEATTRIBUTE(SELF, ATR_DEXTERITY, +(SOUTHERNERSET_DEX));
        SELF.PROTECTION[3] += SOUTHERNERSET_PROTFIRE;
        SETBONUS_SOUTHERNERRINGS_COUNT = (SETBONUS_SOUTHERNERRINGS_COUNT) + (1);
        SETBONUS_SOUTHERNERRINGS_EQUIP();
    };
}

func void UNEQUIP_ITRI_SOUTHERNERSET_01() {
    if ((SELF.ID) == (0)) {
        NPC_CHANGEATTRIBUTE(SELF, ATR_DEXTERITY, -(SOUTHERNERSET_DEX));
        SELF.PROTECTION[3] -= SOUTHERNERSET_PROTFIRE;
        SETBONUS_SOUTHERNERRINGS_COUNT = (SETBONUS_SOUTHERNERRINGS_COUNT) - (1);
        SETBONUS_SOUTHERNERRINGS_UNEQUIP();
    };
}

instance ITRI_WATERMAGESET_01(C_ITEM) {
    NAME = RINGNAME_WATERMAGESET_01;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_WATERMAGESET;
    VISUAL = "ItRi_Hp_Mana_01.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_ITRI_WATERMAGESET_01;
    ON_UNEQUIP = UNEQUIP_ITRI_WATERMAGESET_01;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[1] = NAME_BONUS_HPMAX;
    COUNT[1] = WATERMAGESET_HPMAX;
    TEXT[2] = NAME_BONUS_MANAMAX;
    COUNT[2] = WATERMAGESET_MANAMAX;
    TEXT[3] = AMULETDESC_WATERMAGESET_01_1;
    TEXT[4] = AMULETDESC_WATERMAGESET_01_2;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

func void EQUIP_ITRI_WATERMAGESET_01() {
    if ((SELF.ID) == (0)) {
        NPC_CHANGEATTRIBUTE(SELF, ATR_HITPOINTS_MAX, +(WATERMAGESET_HPMAX));
        MARVINTRANSFORMHP = (MARVINTRANSFORMHP) + (WATERMAGESET_HPMAX);
        NPC_CHANGEATTRIBUTE(SELF, ATR_MANA_MAX, +(WATERMAGESET_MANAMAX));
        SETBONUS_WATERMAGESET_COUNT = (SETBONUS_WATERMAGESET_COUNT) + (1);
        SETBONUS_WATERMAGESET_EQUIP();
    };
}

func void UNEQUIP_ITRI_WATERMAGESET_01() {
    if ((SELF.ID) == (0)) {
        NPC_CHANGEATTRIBUTE(SELF, ATR_HITPOINTS_MAX, -(WATERMAGESET_HPMAX));
        MARVINTRANSFORMHP = (MARVINTRANSFORMHP) - (WATERMAGESET_HPMAX);
        NPC_CHANGEATTRIBUTE(SELF, ATR_MANA_MAX, -(WATERMAGESET_MANAMAX));
        SETBONUS_WATERMAGESET_COUNT = (SETBONUS_WATERMAGESET_COUNT) - (1);
        SETBONUS_WATERMAGESET_UNEQUIP();
    };
}

instance ITRI_WATERCRICLESET_01(C_ITEM) {
    NAME = RINGNAME_WATERCRICLESET_01;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_WATERCRICLESET;
    VISUAL = "ItRi_Hp_Mana_01.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_ITRI_WATERCRICLESET_01;
    ON_UNEQUIP = UNEQUIP_ITRI_WATERCRICLESET_01;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[0] = NAME_MAGICDAMAGE_BONUS;
    COUNT[0] = 5;
    TEXT[1] = NAME_BONUS_MANAMAX;
    COUNT[1] = WATERCRICLESET_MANAMAX;
    TEXT[2] = NAME_PROT_ALL;
    COUNT[2] = WATERCRICLESET_PROTALL;
    TEXT[3] = AMULETDESC_WATERCRICLESET_01;
    TEXT[4] = BONUS_ALL;
    COUNT[4] = WATERCIRCLESET_ALLWEAPON;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

var int WATERCIRCLESET_WEARINGANYRING;
func void EQUIP_ITRI_WATERCRICLESET_01() {
    if ((SELF.ID) == (0)) {
        RESERVED_VAR_INT_05 += 1;
        NPC_CHANGEATTRIBUTE(SELF, ATR_MANA_MAX, +(WATERCRICLESET_MANAMAX));
        SELF.PROTECTION[2] += WATERCRICLESET_PROTALL;
        SELF.PROTECTION[1] += WATERCRICLESET_PROTALL;
        SELF.PROTECTION[6] += WATERCRICLESET_PROTALL;
        SELF.PROTECTION[3] += WATERCRICLESET_PROTALL;
        SELF.PROTECTION[5] += WATERCRICLESET_PROTALL;
        WATERCIRCLESET_WEARINGANYRING = (WATERCIRCLESET_WEARINGANYRING) + (1);
        if ((WATERCIRCLESET_WEARINGANYRING) >= (1)) {
            if (((SQ504_WEARINGRING) == (FALSE)) && ((SQ504_JOINEDWATERCIRCLE) == (TRUE))) {
                SQ504_WEARINGRING = TRUE;
            };
        };
        SETBONUS_WATERCIRCLERINGS_COUNT = (SETBONUS_WATERCIRCLERINGS_COUNT) + (1);
        SETBONUS_WATERCIRCLERINGS_EQUIP();
    };
}

func void UNEQUIP_ITRI_WATERCRICLESET_01() {
    if ((SELF.ID) == (0)) {
        RESERVED_VAR_INT_05 -= 1;
        NPC_CHANGEATTRIBUTE(SELF, ATR_MANA_MAX, -(WATERCRICLESET_MANAMAX));
        SELF.PROTECTION[2] -= WATERCRICLESET_PROTALL;
        SELF.PROTECTION[1] -= WATERCRICLESET_PROTALL;
        SELF.PROTECTION[6] -= WATERCRICLESET_PROTALL;
        SELF.PROTECTION[3] -= WATERCRICLESET_PROTALL;
        SELF.PROTECTION[5] -= WATERCRICLESET_PROTALL;
        WATERCIRCLESET_WEARINGANYRING = (WATERCIRCLESET_WEARINGANYRING) - (1);
        if ((WATERCIRCLESET_WEARINGANYRING) == (0)) {
            if (((SQ504_WEARINGRING) == (TRUE)) && ((SQ504_JOINEDWATERCIRCLE) == (TRUE))) {
                SQ504_WEARINGRING = FALSE;
            };
        };
        SETBONUS_WATERCIRCLERINGS_COUNT = (SETBONUS_WATERCIRCLERINGS_COUNT) - (1);
        SETBONUS_WATERCIRCLERINGS_UNEQUIP();
    };
}

instance ITRI_PIRATESET_01(C_ITEM) {
    NAME = RINGNAME_PIRATESET_01;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_PIRATESET;
    VISUAL = "itri_hp_01.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_ITRI_PIRATESET_01;
    ON_UNEQUIP = UNEQUIP_ITRI_PIRATESET_01;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[1] = NAME_BONUS_DEX;
    COUNT[1] = PIRATESET_DEX;
    TEXT[2] = NAME_PROT_POINT;
    COUNT[2] = PIRATESET_PROTPOINT;
    TEXT[3] = AMULETDESC_PIRATESET_01;
    TEXT[4] = BONUS_1H;
    COUNT[4] = PIRATESET_1H;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

func void EQUIP_ITRI_PIRATESET_01() {
    if ((SELF.ID) == (0)) {
        NPC_CHANGEATTRIBUTE(SELF, ATR_DEXTERITY, +(PIRATESET_DEX));
        SELF.PROTECTION[6] += PIRATESET_PROTPOINT;
        SETBONUS_PIRATERINGS_COUNT = (SETBONUS_PIRATERINGS_COUNT) + (1);
        SETBONUS_PIRATERINGS_EQUIP();
    };
}

func void UNEQUIP_ITRI_PIRATESET_01() {
    if ((SELF.ID) == (0)) {
        NPC_CHANGEATTRIBUTE(SELF, ATR_DEXTERITY, -(PIRATESET_DEX));
        SELF.PROTECTION[6] -= PIRATESET_PROTPOINT;
        SETBONUS_PIRATERINGS_COUNT = (SETBONUS_PIRATERINGS_COUNT) - (1);
        SETBONUS_PIRATERINGS_UNEQUIP();
    };
}

instance ITRI_NORDMARSET_01(C_ITEM) {
    NAME = RINGNAME_NORDMARSET_01;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_NORDMARSET;
    VISUAL = "itri_str_01.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_ITRI_NORDMARSET_01;
    ON_UNEQUIP = UNEQUIP_ITRI_NORDMARSET_01;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[1] = NAME_BONUS_STR;
    COUNT[1] = NORDMARSET_STR;
    TEXT[2] = NAME_BONUS_HPMAX;
    COUNT[2] = NORDMARSET_HPMAX;
    TEXT[3] = AMULETDESC_NORDMARSET_01;
    TEXT[4] = BONUS_1H;
    COUNT[4] = NORDMARSET_1H;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

func void EQUIP_ITRI_NORDMARSET_01() {
    if ((SELF.ID) == (0)) {
        NPC_CHANGEATTRIBUTE(SELF, ATR_STRENGTH, +(NORDMARSET_STR));
        NPC_CHANGEATTRIBUTE(SELF, ATR_HITPOINTS_MAX, +(NORDMARSET_HPMAX));
        MARVINTRANSFORMHP = (MARVINTRANSFORMHP) + (NORDMARSET_HPMAX);
        SETBONUS_NORDMARRINGS_COUNT = (SETBONUS_NORDMARRINGS_COUNT) + (1);
        SETBONUS_NORDMARRINGS_EQUIP();
    };
}

func void UNEQUIP_ITRI_NORDMARSET_01() {
    if ((SELF.ID) == (0)) {
        NPC_CHANGEATTRIBUTE(SELF, ATR_STRENGTH, -(NORDMARSET_STR));
        NPC_CHANGEATTRIBUTE(SELF, ATR_HITPOINTS_MAX, -(NORDMARSET_HPMAX));
        MARVINTRANSFORMHP = (MARVINTRANSFORMHP) - (NORDMARSET_HPMAX);
        SETBONUS_NORDMARRINGS_COUNT = (SETBONUS_NORDMARRINGS_COUNT) - (1);
        SETBONUS_NORDMARRINGS_UNEQUIP();
    };
}

instance ITRI_ARCHOLOSSET_01(C_ITEM) {
    NAME = RINGNAME_ARCHOLOSSET_01;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_ARCHOLOSSET;
    VISUAL = "itri_prot_mage_01.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_ITRI_ARCHOLOSSET_01;
    ON_UNEQUIP = UNEQUIP_ITRI_ARCHOLOSSET_01;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[1] = NAME_BONUS_STR;
    COUNT[1] = ARCHOLOSSET_STR;
    TEXT[2] = NAME_PROT_BLUNT;
    COUNT[2] = ARCHOLOSSET_PROTBLUNT;
    TEXT[3] = AMULETDESC_ARCHOLOSSET_01;
    TEXT[4] = NAME_BONUS_CROSSBOW;
    COUNT[4] = ARCHOLOSSET_CROSSBOW;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

func void EQUIP_ITRI_ARCHOLOSSET_01() {
    if ((SELF.ID) == (0)) {
        NPC_CHANGEATTRIBUTE(SELF, ATR_STRENGTH, +(ARCHOLOSSET_STR));
        SELF.PROTECTION[1] += ARCHOLOSSET_PROTBLUNT;
        SETBONUS_ARCHOLOSRINGS_COUNT = (SETBONUS_ARCHOLOSRINGS_COUNT) + (1);
        SETBONUS_ARCHOLOSRINGS_EQUIP();
    };
}

func void UNEQUIP_ITRI_ARCHOLOSSET_01() {
    if ((SELF.ID) == (0)) {
        NPC_CHANGEATTRIBUTE(SELF, ATR_STRENGTH, -(ARCHOLOSSET_STR));
        SELF.PROTECTION[1] -= ARCHOLOSSET_PROTBLUNT;
        SETBONUS_ARCHOLOSRINGS_COUNT = (SETBONUS_ARCHOLOSRINGS_COUNT) - (1);
        SETBONUS_ARCHOLOSRINGS_UNEQUIP();
    };
}

instance ITRI_MYRTANASET_01(C_ITEM) {
    NAME = RINGNAME_MYRTANASET_01;
    MAINFLAG = ITEM_KAT_MAGIC;
    FLAGS = ITEM_RING;
    VALUE = VALUE_RI_MYRTANASET;
    VISUAL = "itmi_ring_01.3ds";
    VISUAL_SKIN = 0;
    MATERIAL = MAT_METAL;
    ON_EQUIP = EQUIP_ITRI_MYRTANASET_01;
    ON_UNEQUIP = UNEQUIP_ITRI_MYRTANASET_01;
    WEAR = WEAR_EFFECT;
    EFFECT = "SPELLFX_ITEMGLIMMER";
    DESCRIPTION = NAME;
    TEXT[1] = NAME_BONUS_DEX;
    COUNT[1] = MYRTANASET_DEX;
    TEXT[2] = NAME_PROT_EDGE;
    COUNT[2] = MYRTANASET_PROTEDGE;
    TEXT[3] = AMULETDESC_MYRTANASET_01;
    TEXT[4] = NAME_BONUS_BOW;
    COUNT[4] = MYRTANASET_BOW;
    TEXT[5] = NAME_VALUE;
    COUNT[5] = VALUE;
    INV_ZBIAS = INVCAM_ENTF_RING_STANDARD;
    INV_ROTZ = INVCAM_Z_RING_STANDARD;
    INV_ROTX = INVCAM_X_RING_STANDARD;
}

func void EQUIP_ITRI_MYRTANASET_01() {
    if ((SELF.ID) == (0)) {
        NPC_CHANGEATTRIBUTE(SELF, ATR_DEXTERITY, +(MYRTANASET_DEX));
        SELF.PROTECTION[2] += MYRTANASET_PROTEDGE;
        SETBONUS_MYRTANARINGS_COUNT = (SETBONUS_MYRTANARINGS_COUNT) + (1);
        SETBONUS_MYRTANARINGS_EQUIP();
    };
}

func void UNEQUIP_ITRI_MYRTANASET_01() {
    if ((SELF.ID) == (0)) {
        NPC_CHANGEATTRIBUTE(SELF, ATR_DEXTERITY, -(MYRTANASET_DEX));
        SELF.PROTECTION[2] -= MYRTANASET_PROTEDGE;
        SETBONUS_MYRTANARINGS_COUNT = (SETBONUS_MYRTANARINGS_COUNT) - (1);
        SETBONUS_MYRTANARINGS_UNEQUIP();
    };
}

