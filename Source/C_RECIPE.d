class C_RECIPE {
	var int RECIPEITEM;
	var int MINTALENT;
	var int TALENTARRAYINDEX;
	var int TOTALREQUIRED;
	var int REQUIREDITEM[6];
	var int REQUIREDITEMAMOUNT[6];
	var int REQITEM_ISMULTIUSE[6];
	var int DOCINST;
	var string DESCRIPTION;
};
func int RECIPE_GETREQUIREDITEMINSTANCE(var C_RECIPE REC, var int ID) {
    return MEM_READINTARRAY(_@(REC.REQUIREDITEM[0]), ID);
}

func string BUILDRECIPEDIALOGDESCRIPTION(var int RECIPEINST) {
    var string RESULTSTRING;
    var C_ITEM CURRENTITEM;
    var int S;
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(RECIPEINST);
    REC = MEM_PTRTOINST(PTR);
    S = SB_NEW();
    CURRENTITEM = MEM_PTRTOINST(ITM_GETPTR(REC.RECIPEITEM));
    SB(CURRENTITEM.DESCRIPTION);
    if (((CURRENTITEM.MAINFLAG) == (ITEM_KAT_NF)) || ((CURRENTITEM.MAINFLAG) == (ITEM_KAT_FF))) {
        SB(" (");
        SB(NAME_RECIPE_CRAFTED_AMOUNT);
        SBI(MEM_READINTARRAY(_@(PLAYER_WEAPONS_CRAFTED[0]), REC.TALENTARRAYINDEX));
        SB(")");
    };
    if ((CURRENTITEM.MAINFLAG) == (ITEM_KAT_POTIONS)) {
        SB(" (");
        SB(NAME_RECIPE_CRAFTED_AMOUNT);
        SBI(MEM_READINTARRAY(_@(PLAYER_POTIONS_CRAFTED[0]), REC.TALENTARRAYINDEX));
        SB(")");
    };
    if ((CURRENTITEM.MAINFLAG) == (ITEM_KAT_FOOD)) {
        SB(" (");
        SB(NAME_RECIPE_CRAFTED_AMOUNT);
        SBI(MEM_READINTARRAY(_@(PLAYER_MEALS_CRAFTED[0]), REC.TALENTARRAYINDEX));
        SB(")");
    };
    RESULTSTRING = SB_TOSTRING();
    SB_DESTROY();
    return RESULTSTRING;
}

func string GETWEAPONDAMTYPESTRING(var C_ITEM WPN) {
    if ((WPN.DAMAGETYPE) == (DAM_BLUNT)) {
        return NAME_DAMAGETYPE_BLUNT_BASE;
    };
    if ((WPN.DAMAGETYPE) == (DAM_EDGE)) {
        return NAME_DAMAGETYPE_EDGE_BASE;
    };
    if ((WPN.DAMAGETYPE) == (DAM_POINT)) {
        return NAME_DAMAGETYPE_POINT_BASE;
    };
    if ((WPN.DAMAGETYPE) == (DAM_FIRE)) {
        return NAME_DAMAGETYPE_FIRE_BASE;
    };
    if ((WPN.DAMAGETYPE) == (DAM_MAGIC)) {
        return NAME_DAMAGETYPE_MAGIC_BASE;
    };
    return NAME_DAMAGETYPE_UNKNOWN_BASE;
}

func string GETATRNEEDEDSTRING(var C_ITEM WPN) {
    if ((WPN.COND_ATR[2]) == (ATR_STRENGTH)) {
        return NAME_STR_NEEDED;
    };
    if ((WPN.COND_ATR[2]) == (ATR_DEXTERITY)) {
        return NAME_DEX_NEEDED;
    };
    if ((WPN.COND_ATR[2]) == (ATR_MANA_MAX)) {
        return NAME_MANA_NEEDED;
    };
    return 0 /* !broken stack! */;
}

const int RECIPEVALUE_TIER02 = 25;
const int RECIPEVALUE_TIER03 = 150;
prototype WEAPONRECIPE(C_ITEM) {
    NAME = PRINT_WEAPONRECIPENAME;
    MAINFLAG = ITEM_KAT_DOCS;
    FLAGS = ITEM_MULTI;
    VISUAL = ITWR_SCROLL_01_3DS;
    MATERIAL = MAT_LEATHER;
    SCEMENAME = SCEME_MAPSEALED;
    DESCRIPTION = NAME;
}

prototype ALCHEMYRECIPE(C_ITEM) {
    NAME = PRINT_ALCHEMYRECIPENAME;
    MAINFLAG = ITEM_KAT_DOCS;
    FLAGS = ITEM_MULTI;
    VISUAL = ITWR_SCROLL_01_3DS;
    MATERIAL = MAT_LEATHER;
    SCEMENAME = SCEME_MAPSEALED;
    ON_STATE[0] = USEALCHEMYRECIPE;
    DESCRIPTION = NAME;
}

prototype COOKINGRECIPE(C_ITEM) {
    NAME = PRINT_COOKINGRECIPENAME;
    MAINFLAG = ITEM_KAT_DOCS;
    FLAGS = ITEM_MULTI;
    VISUAL = "KM_recipe_food_01.3DS";
    MATERIAL = MAT_LEATHER;
    SCEMENAME = SCEME_MAPSEALED;
    ON_STATE[0] = USECOOKINGRECIPE;
    DESCRIPTION = NAME;
}

func void SHOWWEAPONRECIPEDOC(var C_RECIPE REC) {
    var int S;
    var int I;
    var C_ITEM RECITEM;
    var C_ITEM CURRENTITEM;
    var int NDOCID;
    NDOCID = DOC_CREATE();
    DOC_SETPAGES(NDOCID, 1);
    DOC_SETPAGE(NDOCID, 0, LETTERSTGA, 0);
    DOC_SETFONT(NDOCID, 0, FONT_BOOKHEADLINE);
    DOC_SETMARGINS(NDOCID, -(1), 50, 50, 70, 50, 1);
    RECITEM = MEM_PTRTOINST(ITM_GETPTR(REC.RECIPEITEM));
    DOC_PRINTLINES(NDOCID, 0, RECITEM.NAME);
    DOC_SETFONT(NDOCID, 0, FONT_BOOK);
    DOC_PRINTLINE(NDOCID, 0, "");
    DOC_PRINTLINE(NDOCID, 0, PRINT_RECIPE_INGREDIENTS);
    DOC_PRINTLINE(NDOCID, 0, "");
    REPEAT(I, REC.TOTALREQUIRED);
    S = SB_NEW();
    CURRENTITEM = MEM_PTRTOINST(ITM_GETPTR(RECIPE_GETREQUIREDITEMINSTANCE(REC, I)));
    SB("- ");
    if ((RECIPE_GETREQUIREDITEMAMOUNT(REC, I)) > (1)) {
        SBI(RECIPE_GETREQUIREDITEMAMOUNT(REC, I));
        SB("x ");
    };
    SB(CURRENTITEM.DESCRIPTION);
    DOC_PRINTLINE(NDOCID, 0, SB_TOSTRING());
    SB_DESTROY();
    END;
    DOC_PRINTLINE(NDOCID, 0, "");
    DOC_PRINTLINE(NDOCID, 0, PRINT_RECIPE_ITEMDETAILS);
    DOC_PRINTLINE(NDOCID, 0, "");
    DOC_PRINTLINE(NDOCID, 0, CS3(GETWEAPONTYPESTRING(RECITEM), "        ", GETWEAPONDAMTYPESTRING(RECITEM)));
    DOC_PRINTLINE(NDOCID, 0, CS3(NAME_DAMAGE, ": ", INTTOSTRING(RECITEM.DAMAGETOTAL)));
    if ((RECITEM.WEIGHT) > (0)) {
        DOC_PRINTLINE(NDOCID, 0, CS2(NAME_ARMORPIERCE, INTTOSTRING(RECITEM.WEIGHT)));
    };
    DOC_PRINTLINE(NDOCID, 0, CS3(GETATRNEEDEDSTRING(RECITEM), " ", INTTOSTRING(RECITEM.COND_VALUE[2])));
    DOC_PRINTLINE(NDOCID, 0, "");
    DOC_PRINTLINES(NDOCID, 0, REC.DESCRIPTION);
    DOC_SHOW(NDOCID);
}

func void LEARNWEAPONRECIPE(var int RECIPEINST) {
    var string LOG;
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(RECIPEINST);
    REC = MEM_PTRTOINST(PTR);
    MEM_WRITEINTARRAY(_@(PLAYER_TALENT_SMITH[0]), REC.TALENTARRAYINDEX, TRUE);
    LOG_CREATETOPIC(TOPIC_TALENTSMITH, LOG_NOTE);
    LOG = BUILDRECIPELOG(RECIPEINST);
    B_LOGENTRY(TOPIC_TALENTSMITH, LOG);
}

func void USERANGEDWEAPONRECIPE() {
    var string LOG;
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(ITEM.HP);
    REC = MEM_PTRTOINST(PTR);
    if ((NPC_GETTALENTSKILL(HERO, NPC_TALENT_FLETCHERY)) < (REC.MINTALENT)) {
        PRINTS_EXT(CS2(PRINT_RECIPE_REQUIREFLETCHERY, STR_SPLIT(MEM_READSTATSTRINGARR(TXT_TALENTS_SKILLS[0], NPC_TALENT_SMITH), "|", REC.MINTALENT)), RGBA(255, 50, 50, 255));
        B_SAY(SELF, SELF, "$CANTUNDERSTANDTHIS");
        CREATEINVITEMS(SELF, REC.DOCINST, 1);
    };
    if ((MEM_READINTARRAY(_@(PLAYER_TALENT_SMITH[0]), REC.TALENTARRAYINDEX)) == (FALSE)) {
        B_SAY(SELF, SELF, "$VERSTEHE");
        MEM_WRITEINTARRAY(_@(PLAYER_TALENT_SMITH[0]), REC.TALENTARRAYINDEX, TRUE);
        LOG_CREATETOPIC(TOPIC_TALENTFLETCHERY, LOG_NOTE);
        LOG = BUILDRECIPELOG(ITEM.HP);
        B_LOGENTRY(TOPIC_TALENTFLETCHERY, LOG);
    };
    B_SAY(HERO, HERO, "$MARVIN_IKnowItAlready");
    SHOWWEAPONRECIPEDOC(REC);
}

func void USECOOKINGRECIPE() {
    var string LOG;
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(ITEM.HP);
    REC = MEM_PTRTOINST(PTR);
    if ((MEM_READINTARRAY(_@(PLAYER_TALENT_COOKING[0]), REC.TALENTARRAYINDEX)) == (FALSE)) {
        B_SAY(SELF, SELF, "$VERSTEHE");
        MEM_WRITEINTARRAY(_@(PLAYER_TALENT_COOKING[0]), REC.TALENTARRAYINDEX, TRUE);
        LOG_CREATETOPIC(TOPIC_TALENTCOOKING, LOG_NOTE);
        LOG = BUILDRECIPELOG(ITEM.HP);
        B_LOGENTRY(TOPIC_TALENTCOOKING, LOG);
    };
    B_SAY(HERO, HERO, "$MARVIN_IKnowItAlready");
    SHOWEDIBLERECIPEDOC(REC);
}

func void USEALCHEMYRECIPE() {
    var string LOG;
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(ITEM.HP);
    REC = MEM_PTRTOINST(PTR);
    if ((NPC_GETTALENTSKILL(HERO, NPC_TALENT_ALCHEMY)) < (REC.MINTALENT)) {
        PRINTS_EXT(CS2(PRINT_RECIPE_REQUIREALCHEMY, STR_SPLIT(MEM_READSTATSTRINGARR(TXT_TALENTS_SKILLS[0], NPC_TALENT_ALCHEMY), "|", REC.MINTALENT)), RGBA(255, 50, 50, 255));
        B_SAY(SELF, SELF, "$CANTUNDERSTANDTHIS");
        CREATEINVITEMS(SELF, REC.DOCINST, 1);
    };
    if ((MEM_READINTARRAY(_@(PLAYER_TALENT_ALCHEMY[0]), REC.TALENTARRAYINDEX)) == (FALSE)) {
        B_SAY(SELF, SELF, "$VERSTEHE");
        MEM_WRITEINTARRAY(_@(PLAYER_TALENT_ALCHEMY[0]), REC.TALENTARRAYINDEX, TRUE);
        LOG_CREATETOPIC(TOPIC_TALENTALCHEMY, LOG_NOTE);
        LOG = BUILDRECIPELOG(ITEM.HP);
        B_LOGENTRY(TOPIC_TALENTALCHEMY, LOG);
    };
    B_SAY(HERO, HERO, "$MARVIN_IKnowItAlready");
    SHOWEDIBLERECIPEDOC(REC);
}

func void GIVERECIPEITEMS(var C_NPC SELF, var C_NPC OTHER, var int RECIPEINST) {
    var int I;
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(RECIPEINST);
    REC = MEM_PTRTOINST(PTR);
    REPEAT(I, REC.TOTALREQUIRED);
    END;
}

