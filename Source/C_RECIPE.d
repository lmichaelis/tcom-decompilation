class C_RECIPE {
	var int RECIPEITEM;
	var int MINTALENT;
	var int TALENTARRAYINDEX;
	var int TOTALREQUIRED;
	var int REQUIREDITEM[6];
	var int REQUIREDITEMAMOUNT[6];
	var int REQITEM_ISMULTIUSE[6];
	var int DOCINST;
	var string DESCRIPTION;
};
func int RECIPE_GETREQUIREDITEMINSTANCE(var C_RECIPE REC, var int ID) {
    return MEM_READINTARRAY(_@(REC.REQUIREDITEM[0]), ID);
}

func int RECIPE_GETREQUIREDITEMAMOUNT(var C_RECIPE REC, var int ID) {
    return MEM_READINTARRAY(_@(REC.REQUIREDITEMAMOUNT[0]), ID);
}

func int RECIPE_ISREQUIREDITEMMULTIUSE(var C_RECIPE REC, var int ID) {
    return MEM_READINTARRAY(_@(REC.REQITEM_ISMULTIUSE[0]), ID);
}

func string BUILDRECIPEDIALOGDESCRIPTION(var int RECIPEINST) {
    var string RESULTSTRING;
    var C_ITEM CURRENTITEM;
    var int S;
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(RECIPEINST);
    REC = MEM_PTRTOINST(PTR);
    S = SB_NEW();
    CURRENTITEM = MEM_PTRTOINST(ITM_GETPTR(REC.RECIPEITEM));
    SB(CURRENTITEM.DESCRIPTION);
    if (((CURRENTITEM.MAINFLAG) == (ITEM_KAT_NF)) || ((CURRENTITEM.MAINFLAG) == (ITEM_KAT_FF))) {
        SB(" (");
        SB(NAME_RECIPE_CRAFTED_AMOUNT);
        SBI(MEM_READINTARRAY(_@(PLAYER_WEAPONS_CRAFTED[0]), REC.TALENTARRAYINDEX));
        SB(")");
    };
    if ((CURRENTITEM.MAINFLAG) == (ITEM_KAT_POTIONS)) {
        SB(" (");
        SB(NAME_RECIPE_CRAFTED_AMOUNT);
        SBI(MEM_READINTARRAY(_@(PLAYER_POTIONS_CRAFTED[0]), REC.TALENTARRAYINDEX));
        SB(")");
    };
    if ((CURRENTITEM.MAINFLAG) == (ITEM_KAT_FOOD)) {
        SB(" (");
        SB(NAME_RECIPE_CRAFTED_AMOUNT);
        SBI(MEM_READINTARRAY(_@(PLAYER_MEALS_CRAFTED[0]), REC.TALENTARRAYINDEX));
        SB(")");
    };
    RESULTSTRING = SB_TOSTRING();
    SB_DESTROY();
    return RESULTSTRING;
}

func string BUILDRECIPELOG(var int RECIPEINST) {
    var string RESULTSTRING;
    var int I;
    var C_ITEM CURRENTITEM;
    var int S;
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(RECIPEINST);
    REC = MEM_PTRTOINST(PTR);
    S = SB_NEW();
    CURRENTITEM = MEM_PTRTOINST(ITM_GETPTR(REC.RECIPEITEM));
    SB(CURRENTITEM.DESCRIPTION);
    SB(": 
");
    PTR += 16;
    REPEAT(I, REC.TOTALREQUIRED);
    CURRENTITEM = MEM_PTRTOINST(ITM_GETPTR(RECIPE_GETREQUIREDITEMINSTANCE(REC, I)));
    if ((HLP_GETINSTANCEID(CURRENTITEM)) != (HLP_GETINSTANCEID(ITMI_FLASK))) {
        SB("- ");
        if ((RECIPE_GETREQUIREDITEMAMOUNT(REC, I)) > (1)) {
            SBI(RECIPE_GETREQUIREDITEMAMOUNT(REC, I));
            SB("x ");
        };
        SB(CURRENTITEM.DESCRIPTION);
        if ((I) < ((REC.TOTALREQUIRED) - (1))) {
            SB(", 
");
        };
    };
    END;
    RESULTSTRING = SB_TOSTRING();
    SB_DESTROY();
    return RESULTSTRING;
}

func string GETWEAPONDAMTYPESTRING(var C_ITEM WPN) {
    if ((WPN.DAMAGETYPE) == (DAM_BLUNT)) {
        return NAME_DAMAGETYPE_BLUNT_BASE;
    };
    if ((WPN.DAMAGETYPE) == (DAM_EDGE)) {
        return NAME_DAMAGETYPE_EDGE_BASE;
    };
    if ((WPN.DAMAGETYPE) == (DAM_POINT)) {
        return NAME_DAMAGETYPE_POINT_BASE;
    };
    if ((WPN.DAMAGETYPE) == (DAM_FIRE)) {
        return NAME_DAMAGETYPE_FIRE_BASE;
    };
    if ((WPN.DAMAGETYPE) == (DAM_MAGIC)) {
        return NAME_DAMAGETYPE_MAGIC_BASE;
    };
    return NAME_DAMAGETYPE_UNKNOWN_BASE;
}

func string GETWEAPONTYPESTRING(var C_ITEM WPN) {
    if ((WPN.FLAGS) & (ITEM_DAG)) {
        return NAME_WEAPONTYPE_DAGGER;
    };
    if ((WPN.FLAGS) & (ITEM_SWD)) {
        return NAME_WEAPONTYPE_SWORD_1H;
    };
    if ((WPN.FLAGS) & (ITEM_AXE)) {
        return NAME_WEAPONTYPE_AXE_1H;
    };
    if ((WPN.FLAGS) & (ITEM_2HD_SWD)) {
        return NAME_WEAPONTYPE_SWORD_2H;
    };
    if ((WPN.FLAGS) & (ITEM_2HD_AXE)) {
        return NAME_WEAPONTYPE_AXE_2H;
    };
    if ((WPN.FLAGS) & (ITEM_SHIELD)) {
        return NAME_WEAPONTYPE_SHIELD;
    };
    if ((WPN.FLAGS) & (ITEM_BOW)) {
        return NAME_WEAPONTYPE_BOW;
    };
    if ((WPN.FLAGS) & (ITEM_CROSSBOW)) {
        return NAME_WEAPONTYPE_CROSSBOW;
    };
    return 0 /* !broken stack! */;
}

func string GETATRNEEDEDSTRING(var C_ITEM WPN) {
    if ((WPN.COND_ATR[2]) == (ATR_STRENGTH)) {
        return NAME_STR_NEEDED;
    };
    if ((WPN.COND_ATR[2]) == (ATR_DEXTERITY)) {
        return NAME_DEX_NEEDED;
    };
    if ((WPN.COND_ATR[2]) == (ATR_MANA_MAX)) {
        return NAME_MANA_NEEDED;
    };
    return 0 /* !broken stack! */;
}

const int RECIPEVALUE_TIER01 = 10;
const int RECIPEVALUE_TIER02 = 25;
const int RECIPEVALUE_TIER03 = 150;
prototype WEAPONRECIPE(C_ITEM) {
    NAME = PRINT_WEAPONRECIPENAME;
    MAINFLAG = ITEM_KAT_DOCS;
    FLAGS = ITEM_MULTI;
    VISUAL = ITWR_SCROLL_01_3DS;
    MATERIAL = MAT_LEATHER;
    SCEMENAME = SCEME_MAPSEALED;
    DESCRIPTION = NAME;
}

prototype ALCHEMYRECIPE(C_ITEM) {
    NAME = PRINT_ALCHEMYRECIPENAME;
    MAINFLAG = ITEM_KAT_DOCS;
    FLAGS = ITEM_MULTI;
    VISUAL = ITWR_SCROLL_01_3DS;
    MATERIAL = MAT_LEATHER;
    SCEMENAME = SCEME_MAPSEALED;
    ON_STATE[0] = USEALCHEMYRECIPE;
    DESCRIPTION = NAME;
}

prototype COOKINGRECIPE(C_ITEM) {
    NAME = PRINT_COOKINGRECIPENAME;
    MAINFLAG = ITEM_KAT_DOCS;
    FLAGS = ITEM_MULTI;
    VISUAL = "KM_recipe_food_01.3DS";
    MATERIAL = MAT_LEATHER;
    SCEMENAME = SCEME_MAPSEALED;
    ON_STATE[0] = USECOOKINGRECIPE;
    DESCRIPTION = NAME;
}

func void SHOWWEAPONRECIPEDOC(var C_RECIPE REC) {
    var int S;
    var int I;
    var C_ITEM RECITEM;
    var C_ITEM CURRENTITEM;
    var int NDOCID;
    NDOCID = DOC_CREATE();
    DOC_SETPAGES(NDOCID, 1);
    DOC_SETPAGE(NDOCID, 0, LETTERSTGA, 0);
    DOC_SETFONT(NDOCID, 0, FONT_BOOKHEADLINE);
    DOC_SETMARGINS(NDOCID, -(1), 50, 50, 70, 50, 1);
    RECITEM = MEM_PTRTOINST(ITM_GETPTR(REC.RECIPEITEM));
    DOC_PRINTLINES(NDOCID, 0, RECITEM.NAME);
    DOC_SETFONT(NDOCID, 0, FONT_BOOK);
    DOC_PRINTLINE(NDOCID, 0, "");
    DOC_PRINTLINE(NDOCID, 0, PRINT_RECIPE_INGREDIENTS);
    DOC_PRINTLINE(NDOCID, 0, "");
    REPEAT(I, REC.TOTALREQUIRED);
    S = SB_NEW();
    CURRENTITEM = MEM_PTRTOINST(ITM_GETPTR(RECIPE_GETREQUIREDITEMINSTANCE(REC, I)));
    SB("- ");
    if ((RECIPE_GETREQUIREDITEMAMOUNT(REC, I)) > (1)) {
        SBI(RECIPE_GETREQUIREDITEMAMOUNT(REC, I));
        SB("x ");
    };
    SB(CURRENTITEM.DESCRIPTION);
    DOC_PRINTLINE(NDOCID, 0, SB_TOSTRING());
    SB_DESTROY();
    END;
    DOC_PRINTLINE(NDOCID, 0, "");
    DOC_PRINTLINE(NDOCID, 0, PRINT_RECIPE_ITEMDETAILS);
    DOC_PRINTLINE(NDOCID, 0, "");
    DOC_PRINTLINE(NDOCID, 0, CS3(GETWEAPONTYPESTRING(RECITEM), "        ", GETWEAPONDAMTYPESTRING(RECITEM)));
    DOC_PRINTLINE(NDOCID, 0, CS3(NAME_DAMAGE, ": ", INTTOSTRING(RECITEM.DAMAGETOTAL)));
    if ((RECITEM.WEIGHT) > (0)) {
        DOC_PRINTLINE(NDOCID, 0, CS2(NAME_ARMORPIERCE, INTTOSTRING(RECITEM.WEIGHT)));
    };
    DOC_PRINTLINE(NDOCID, 0, CS3(GETATRNEEDEDSTRING(RECITEM), " ", INTTOSTRING(RECITEM.COND_VALUE[2])));
    DOC_PRINTLINE(NDOCID, 0, "");
    DOC_PRINTLINES(NDOCID, 0, REC.DESCRIPTION);
    DOC_SHOW(NDOCID);
}

func void SHOWEDIBLERECIPEDOC(var C_RECIPE REC) {
    var int COUNT;
    var int J;
    var int COUNTARRAYPTR;
    var int TEXTARRAYPTR;
    var int S;
    var int I;
    var C_ITEM RECITEM;
    var C_ITEM CURRENTITEM;
    var int NDOCID;
    NDOCID = DOC_CREATE();
    DOC_SETPAGES(NDOCID, 1);
    DOC_SETPAGE(NDOCID, 0, LETTERSTGA, 0);
    DOC_SETFONT(NDOCID, 0, FONT_BOOKHEADLINE);
    DOC_SETMARGINS(NDOCID, -(1), 50, 50, 70, 50, 1);
    RECITEM = MEM_PTRTOINST(ITM_GETPTR(REC.RECIPEITEM));
    DOC_PRINTLINES(NDOCID, 0, RECITEM.DESCRIPTION);
    DOC_SETFONT(NDOCID, 0, FONT_BOOK);
    DOC_PRINTLINE(NDOCID, 0, "");
    DOC_PRINTLINE(NDOCID, 0, PRINT_RECIPE_INGREDIENTS);
    DOC_PRINTLINE(NDOCID, 0, "");
    REPEAT(I, REC.TOTALREQUIRED);
    S = SB_NEW();
    CURRENTITEM = MEM_PTRTOINST(ITM_GETPTR(RECIPE_GETREQUIREDITEMINSTANCE(REC, I)));
    SB("- ");
    if ((RECIPE_GETREQUIREDITEMAMOUNT(REC, I)) > (1)) {
        SBI(RECIPE_GETREQUIREDITEMAMOUNT(REC, I));
        SB("x ");
    };
    SB(CURRENTITEM.DESCRIPTION);
    DOC_PRINTLINE(NDOCID, 0, SB_TOSTRING());
    SB_DESTROY();
    END;
    DOC_PRINTLINE(NDOCID, 0, "");
    DOC_PRINTLINE(NDOCID, 0, PRINT_RECIPE_ITEMDETAILS);
    DOC_PRINTLINE(NDOCID, 0, "");
    TEXTARRAYPTR = _@S(RECITEM.TEXT[0]);
    COUNTARRAYPTR = _@(RECITEM.COUNT[0]);
    REPEAT(J, ITM_TEXT_MAX);
    COUNT = MEM_READINTARRAY(COUNTARRAYPTR, J);
    S = SB_NEW();
    SB(MEM_READSTRINGARRAY(TEXTARRAYPTR, J));
    if ((COUNT) > (0)) {
        SB(" ");
        SBI(COUNT);
    };
    DOC_PRINTLINE(NDOCID, 0, SB_TOSTRING());
    SB_DESTROY();
    END;
    DOC_PRINTLINE(NDOCID, 0, "");
    DOC_PRINTLINES(NDOCID, 0, REC.DESCRIPTION);
    DOC_SHOW(NDOCID);
}

func void LEARNWEAPONRECIPE(var int RECIPEINST) {
    var string LOG;
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(RECIPEINST);
    REC = MEM_PTRTOINST(PTR);
    MEM_WRITEINTARRAY(_@(PLAYER_TALENT_SMITH[0]), REC.TALENTARRAYINDEX, TRUE);
    LOG_CREATETOPIC(TOPIC_TALENTSMITH, LOG_NOTE);
    LOG = BUILDRECIPELOG(RECIPEINST);
    B_LOGENTRY(TOPIC_TALENTSMITH, LOG);
}

func void USEMELEEWEAPONRECIPE() {
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(ITEM.HP);
    REC = MEM_PTRTOINST(PTR);
    if ((NPC_GETTALENTSKILL(HERO, NPC_TALENT_SMITH)) < (REC.MINTALENT)) {
        PRINTS_EXT(CS2(PRINT_RECIPE_REQUIRESMITH, STR_SPLIT(MEM_READSTATSTRINGARR(TXT_TALENTS_SKILLS[0], NPC_TALENT_SMITH), "|", REC.MINTALENT)), RGBA(255, 50, 50, 255));
        B_SAY(SELF, SELF, "$CANTUNDERSTANDTHIS");
        CREATEINVITEMS(SELF, REC.DOCINST, 1);
    };
    if ((MEM_READINTARRAY(_@(PLAYER_TALENT_SMITH[0]), REC.TALENTARRAYINDEX)) == (FALSE)) {
        B_SAY(SELF, SELF, "$VERSTEHE");
        LEARNWEAPONRECIPE(ITEM.HP);
    };
    B_SAY(HERO, HERO, "$MARVIN_IKnowItAlready");
    SHOWWEAPONRECIPEDOC(REC);
}

func void USERANGEDWEAPONRECIPE() {
    var string LOG;
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(ITEM.HP);
    REC = MEM_PTRTOINST(PTR);
    if ((NPC_GETTALENTSKILL(HERO, NPC_TALENT_FLETCHERY)) < (REC.MINTALENT)) {
        PRINTS_EXT(CS2(PRINT_RECIPE_REQUIREFLETCHERY, STR_SPLIT(MEM_READSTATSTRINGARR(TXT_TALENTS_SKILLS[0], NPC_TALENT_SMITH), "|", REC.MINTALENT)), RGBA(255, 50, 50, 255));
        B_SAY(SELF, SELF, "$CANTUNDERSTANDTHIS");
        CREATEINVITEMS(SELF, REC.DOCINST, 1);
    };
    if ((MEM_READINTARRAY(_@(PLAYER_TALENT_SMITH[0]), REC.TALENTARRAYINDEX)) == (FALSE)) {
        B_SAY(SELF, SELF, "$VERSTEHE");
        MEM_WRITEINTARRAY(_@(PLAYER_TALENT_SMITH[0]), REC.TALENTARRAYINDEX, TRUE);
        LOG_CREATETOPIC(TOPIC_TALENTFLETCHERY, LOG_NOTE);
        LOG = BUILDRECIPELOG(ITEM.HP);
        B_LOGENTRY(TOPIC_TALENTFLETCHERY, LOG);
    };
    B_SAY(HERO, HERO, "$MARVIN_IKnowItAlready");
    SHOWWEAPONRECIPEDOC(REC);
}

func void USECOOKINGRECIPE() {
    var string LOG;
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(ITEM.HP);
    REC = MEM_PTRTOINST(PTR);
    if ((MEM_READINTARRAY(_@(PLAYER_TALENT_COOKING[0]), REC.TALENTARRAYINDEX)) == (FALSE)) {
        B_SAY(SELF, SELF, "$VERSTEHE");
        MEM_WRITEINTARRAY(_@(PLAYER_TALENT_COOKING[0]), REC.TALENTARRAYINDEX, TRUE);
        LOG_CREATETOPIC(TOPIC_TALENTCOOKING, LOG_NOTE);
        LOG = BUILDRECIPELOG(ITEM.HP);
        B_LOGENTRY(TOPIC_TALENTCOOKING, LOG);
    };
    B_SAY(HERO, HERO, "$MARVIN_IKnowItAlready");
    SHOWEDIBLERECIPEDOC(REC);
}

func void USEALCHEMYRECIPE() {
    var string LOG;
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(ITEM.HP);
    REC = MEM_PTRTOINST(PTR);
    if ((NPC_GETTALENTSKILL(HERO, NPC_TALENT_ALCHEMY)) < (REC.MINTALENT)) {
        PRINTS_EXT(CS2(PRINT_RECIPE_REQUIREALCHEMY, STR_SPLIT(MEM_READSTATSTRINGARR(TXT_TALENTS_SKILLS[0], NPC_TALENT_ALCHEMY), "|", REC.MINTALENT)), RGBA(255, 50, 50, 255));
        B_SAY(SELF, SELF, "$CANTUNDERSTANDTHIS");
        CREATEINVITEMS(SELF, REC.DOCINST, 1);
    };
    if ((MEM_READINTARRAY(_@(PLAYER_TALENT_ALCHEMY[0]), REC.TALENTARRAYINDEX)) == (FALSE)) {
        B_SAY(SELF, SELF, "$VERSTEHE");
        MEM_WRITEINTARRAY(_@(PLAYER_TALENT_ALCHEMY[0]), REC.TALENTARRAYINDEX, TRUE);
        LOG_CREATETOPIC(TOPIC_TALENTALCHEMY, LOG_NOTE);
        LOG = BUILDRECIPELOG(ITEM.HP);
        B_LOGENTRY(TOPIC_TALENTALCHEMY, LOG);
    };
    B_SAY(HERO, HERO, "$MARVIN_IKnowItAlready");
    SHOWEDIBLERECIPEDOC(REC);
}

func void GIVERECIPEITEMS(var C_NPC SELF, var C_NPC OTHER, var int RECIPEINST) {
    var int I;
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(RECIPEINST);
    REC = MEM_PTRTOINST(PTR);
    REPEAT(I, REC.TOTALREQUIRED);
    END;
}

func int PC_CRAFTRECIPEITEM_MAX(var int RECIPEINST) {
    var int INVITEMS;
    var int I;
    var int MAX;
    var int CHECK;
    var C_RECIPE REC;
    var int PTR;
    PTR = CREATE(RECIPEINST);
    REC = MEM_PTRTOINST(PTR);
    CHECK = 0;
    MAX = 99999;
    REPEAT(I, REC.TOTALREQUIRED);
    if ((HLP_ISITEMGROUP(RECIPE_GETREQUIREDITEMINSTANCE(REC, I))) == (TRUE)) {
        INVITEMS = NPC_HASITEMGROUP(HERO, RECIPE_GETREQUIREDITEMINSTANCE(REC, I));
    };
    INVITEMS = NPC_HASITEMS(HERO, RECIPE_GETREQUIREDITEMINSTANCE(REC, I));
    if (RECIPE_ISREQUIREDITEMMULTIUSE(REC, I)) {
        if ((INVITEMS) < (RECIPE_GETREQUIREDITEMAMOUNT(REC, I))) {
            CHECK = 0;
        } else {
            CHECK = MAX;
        };
    };
    CHECK = (INVITEMS) / (RECIPE_GETREQUIREDITEMAMOUNT(REC, I));
    if ((CHECK) < (MAX)) {
        MAX = CHECK;
    };
    END;
    return MAX;
}

func int PC_CRAFTRECIPEITEMS(var int RECIPEINST, var int AMOUNT) {
    var int INVITEMS;
    var int S2;
    var C_ITEM RECITEM;
    var int I;
    var int J;
    var int CHECK;
    var C_RECIPE REC;
    var int PTR;
    if ((AMOUNT) == (0)) {
        PRINTS_EXT(PRINT_PRODITEMSMISSING, RGBA(255, 50, 50, 255));
        return FALSE;
    };
    PTR = CREATE(RECIPEINST);
    REC = MEM_PTRTOINST(PTR);
    CHECK = 0;
    REPEAT(I, REC.TOTALREQUIRED);
    if ((HLP_ISITEMGROUP(RECIPE_GETREQUIREDITEMINSTANCE(REC, I))) == (TRUE)) {
        INVITEMS = NPC_HASITEMGROUP(HERO, RECIPE_GETREQUIREDITEMINSTANCE(REC, I));
    };
    INVITEMS = NPC_HASITEMS(HERO, RECIPE_GETREQUIREDITEMINSTANCE(REC, I));
    if (RECIPE_ISREQUIREDITEMMULTIUSE(REC, I)) {
        if ((INVITEMS) >= (RECIPE_GETREQUIREDITEMAMOUNT(REC, I))) {
            CHECK += 1;
        };
    };
    if ((INVITEMS) >= ((RECIPE_GETREQUIREDITEMAMOUNT(REC, I)) * (AMOUNT))) {
        CHECK += 1;
    };
    if ((CHECK) == (REC.TOTALREQUIRED)) {
        CREATEINVITEMS(SELF, REC.RECIPEITEM, AMOUNT);
        RECITEM = MEM_PTRTOINST(ITM_GETPTR(REC.RECIPEITEM));
        if ((RECITEM.MAINFLAG) == (ITEM_KAT_RUNE)) {
            GAMESERVICES_INCREMENTSTATANDCHECKACHIEVEMENT(STAT_ACH_18, AMOUNT, ACH_18, STAT_ACH_18_REQUIRED);
        } else if (((RECITEM.MAINFLAG) == (ITEM_KAT_NF)) || ((RECITEM.MAINFLAG) == (ITEM_KAT_FF))) {
            MEM_WRITEINTARRAY(_@(PLAYER_WEAPONS_CRAFTED[0]), REC.TALENTARRAYINDEX, (MEM_READINTARRAY(_@(PLAYER_WEAPONS_CRAFTED[0]), REC.TALENTARRAYINDEX)) + (AMOUNT));
            MEM_CALL(48355);
        } else if ((RECITEM.MAINFLAG) == (ITEM_KAT_POTIONS)) {
            MEM_WRITEINTARRAY(_@(PLAYER_POTIONS_CRAFTED[0]), REC.TALENTARRAYINDEX, (MEM_READINTARRAY(_@(PLAYER_POTIONS_CRAFTED[0]), REC.TALENTARRAYINDEX)) + (AMOUNT));
            MEM_CALL(47780);
        } else if ((RECITEM.MAINFLAG) == (ITEM_KAT_FOOD)) {
            MEM_WRITEINTARRAY(_@(PLAYER_MEALS_CRAFTED[0]), REC.TALENTARRAYINDEX, (MEM_READINTARRAY(_@(PLAYER_MEALS_CRAFTED[0]), REC.TALENTARRAYINDEX)) + (AMOUNT));
            MEM_CALL(48743);
        };
        REPEAT(J, REC.TOTALREQUIRED);
        if ((RECIPE_ISREQUIREDITEMMULTIUSE(REC, J)) == (FALSE)) {
            if ((HLP_ISITEMGROUP(RECIPE_GETREQUIREDITEMINSTANCE(REC, J))) == (TRUE)) {
                NPC_REMOVEINVITEMGROUP(SELF, RECIPE_GETREQUIREDITEMINSTANCE(REC, J), (RECIPE_GETREQUIREDITEMAMOUNT(REC, J)) * (AMOUNT));
            } else {
                NPC_REMOVEINVITEMS(SELF, RECIPE_GETREQUIREDITEMINSTANCE(REC, J), (RECIPE_GETREQUIREDITEMAMOUNT(REC, J)) * (AMOUNT));
            };
        };
        NPC_GETINVITEM(SELF, REC.RECIPEITEM);
        S2 = SB_NEW();
        END;
        SB(PRINT_RECIPE_CRAFTED);
        if ((AMOUNT) > (1)) {
            SBI(AMOUNT);
            SB("x ");
        };
        SB(ITEM.DESCRIPTION);
        PRINTS_EXT(SB_TOSTRING(), RGBA(50, 255, 50, 255));
        SB_DESTROY();
        return TRUE;
    };
    END;
    PRINTS_EXT(PRINT_PRODITEMSMISSING, RGBA(255, 50, 50, 255));
    return FALSE;
}

func int PC_CRAFTRECIPEITEM(var int RECIPEINST) {
    return PC_CRAFTRECIPEITEMS(RECIPEINST, 1);
}

