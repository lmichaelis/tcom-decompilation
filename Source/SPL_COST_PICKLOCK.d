const int SPL_COST_PICKLOCK = 1;
const int SPL_TIME_PICKLOCK = 1000;
const int TARGET_TYPE_MOB = 128;
instance SPELL_PICKLOCK(C_SPELL_PROTO) {
    C_SPELL_PROTO();
    TIME_PER_MANA = 500;
    SPELLTYPE = SPELL_NEUTRAL;
    TARGETCOLLECTALGO = TARGET_COLLECT_FOCUS;
    TARGETCOLLECTTYPE = TARGET_TYPE_MOB;
    TARGETCOLLECTRANGE = 550;
    CANTURNDURINGINVEST = TRUE;
    CANCHANGETARGETDURINGINVEST = FALSE;
    TARGETCOLLECTAZI = 20;
}

func void SPELL_PICKLOCK_CLEARKEYBUFFER() {
    var int CALL;
    if (CALL_BEGIN(CALL)) {
        CALL__THISCALL(ZCINPUT_ZINPUT, ZCINPUT_WIN32__CLEARKEYBUFFER);
        CALL = CALL_END();
    };
}

func int SPELL_LOGIC_PICKLOCK(var int MANAINVESTED) {
    var int TIMESTEP;
    var int PARTPICKLOCK;
    var int CURRCHARCOUNT;
    var int MOBPTR;
    var int TOTALCHARCOUNT;
    var OCMOBLOCKABLE MOB;
    var OCNPC SLF;
    SLF = HLP_GETNPC(1815);
    if ((NPC_GETACTIVESPELLLEVEL(SELF)) <= (MEMINT_SWITCHG1G2(2, 1))) {
        if (!(HLP_IS_OCMOBLOCKABLE(SLF.FOCUS_VOB))) {
            return SPL_SENDSTOP;
        };
        MOB = _^(SLF.FOCUS_VOB);
        if (!((MOB.BITFIELD) & (OCMOBLOCKABLE_BITFIELD_LOCKED))) {
            return SPL_SENDSTOP;
        };
        if (HLP_STRCMP(MOB.PICKLOCKSTR, "")) {
            PRINT(PRINT_NEVEROPEN);
            SPELL_PICKLOCK_CLEARKEYBUFFER();
            return SPL_SENDSTOP;
        };
        if ((SELF.ATTRIBUTE[2]) < (SPL_COST_PICKLOCK)) {
            return SPL_SENDSTOP;
        };
        MOBPTR = SLF.FOCUS_VOB;
        CURRCHARCOUNT = ((MOB.BITFIELD) & (OCMOBLOCKABLE_BITFIELD_PICKLOCKNR)) >> (2);
        PARTPICKLOCK = (CURRCHARCOUNT) > (0);
        return SPL_NEXTLEVEL;
    };
    if (!((MANAINVESTED) % (SPL_COST_PICKLOCK))) {
        MOB = _^(SLF.FOCUS_VOB);
        if ((SLF.FOCUS_VOB) != (MOBPTR)) {
            return SPL_SENDSTOP;
        };
        SLF.INTERACTMOB = SLF.FOCUS_VOB;
        NPC_SENDPASSIVEPERC(SELF, PERC_ASSESSUSEMOB, SELF, SELF);
        SLF.INTERACTMOB = 0;
        TOTALCHARCOUNT = STR_LEN(MOB.PICKLOCKSTR);
        CURRCHARCOUNT = ((MOB.BITFIELD) & (OCMOBLOCKABLE_BITFIELD_PICKLOCKNR)) >> (2);
        CURRCHARCOUNT += 1;
        MOB.BITFIELD = (MOB.BITFIELD) & (~(OCMOBLOCKABLE_BITFIELD_PICKLOCKNR));
        MOB.BITFIELD = (MOB.BITFIELD) | ((CURRCHARCOUNT) << (2));
        if ((CURRCHARCOUNT) >= (TOTALCHARCOUNT)) {
            MOB.BITFIELD = (MOB.BITFIELD) & (~(OCMOBLOCKABLE_BITFIELD_LOCKED));
            PRINT(PRINT_PICKLOCK_UNLOCK);
            SND_PLAY3D(SELF, "PICKLOCK_SUCCESS");
            SND_PLAY("MFX_PICKLOCK_CAST");
            if ((GOTHIC_BASE_VERSION) == (2)) {
                SELF.ATTRIBUTE[2] -= 1;
            };
            if (PARTPICKLOCK) {
                GAMESERVICES_UNLOCKACHIEVEMENT(ACH_34);
            };
            SPELL_PICKLOCK_CLEARKEYBUFFER();
            return SPL_SENDCAST;
        };
        SND_PLAY3D(SELF, "PICKLOCK_SUCCESS");
        TIMESTEP = ROUNDF(FRACF(SPL_TIME_PICKLOCK, SPL_COST_PICKLOCK));
        TIMESTEP = (HLP_RANDOM(TIMESTEP)) + (80);
        SPELL_PICKLOCK.TIME_PER_MANA = 0;
    };
    return SPL_RECEIVEINVEST;
}

func void SPELL_PICKLOCK_PRIO() {
    var int SPELLID;
    var int MOB_PRIO_BACKUP;
    var C_NPC SLF;
    var int CASTER;
    CASTER = MEM_READINT((ESP) + (4));
    if (!(CASTER)) {
        return;
    };
    SLF = _^(CASTER);
    if (!(NPC_ISPLAYER(SLF))) {
        return;
    };
    if ((MOB_PRIO_BACKUP) == (42)) {
        MOB_PRIO_BACKUP = FOCUS_MAGIC.MOB_PRIO;
    };
    SPELLID = MEM_READINT((ECX) + (84));
    if ((SPELLID) == (SPL_PICKLOCK)) {
        FOCUS_MAGIC.MOB_PRIO = 1;
    };
    if ((MOB_PRIO_BACKUP) != (42)) {
        FOCUS_MAGIC.MOB_PRIO = MOB_PRIO_BACKUP;
    };
}

func void SPELL_PICKLOCK_FOCUS() {
    var OCMOBLOCKABLE MOB;
    var int VOBPTR;
    if ((ECX) == (TARGET_TYPE_MOB)) {
        VOBPTR = MEM_READINT((ESP) + (4));
        if (HLP_IS_OCMOBLOCKABLE(VOBPTR)) {
            MOB = _^(VOBPTR);
            if ((MOB.BITFIELD) & (OCMOBLOCKABLE_BITFIELD_LOCKED)) {
                ECX = 1;
            };
        };
    };
}

func void SPELL_PICKLOCK_INIT_GAMESTART() {
    HOOKENGINEF(OCSPELL__ISTARGETTYPEVALID, 5, 43804);
    HOOKENGINEF(OCSPELL__SETUP, 7, 43799);
}

func void SPELL_PICKLOCK_INIT_ALWAYS() {
    var int FMAGICPTR;
    FMAGICPTR = MEM_READINTARRAY(OCNPCFOCUS__FOCUSLIST, 5);
    if (FMAGICPTR) {
        MEM_INFO("Spell_PickLock: Reinitializing Focus_Magic instance");
        FOCUS_MAGIC = _^(FMAGICPTR);
    };
}

